# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/refs/troubleshooting.rst:2
msgid "Tricks and Troubleshooting"
msgstr "技巧和故障排除"

#: ../../source/refs/troubleshooting.rst:6
msgid ""
"The following lists some of the common tricks and troubleshooting methods "
"that we use in our common workflows. Please also check the `troubleshooting "
"page on Omniverse <https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/linux_troubleshooting.html>`__ for more assistance."
msgstr ""
"下面列出了我们在常见工作流程中使用的一些常见技巧和故障排除方法。还请查看 Omniverse "
"上的 ` 故障排除页面<https://docs.omniverse.nvidia.com/kit/docs/kit-"
"manual/latest/guide/linux_troubleshooting.html>`__ 以获取更多帮助。"

#: ../../source/refs/troubleshooting.rst:13
msgid "Checking the internal logs from the simulator"
msgstr "检查模拟器的内部日志"

#: ../../source/refs/troubleshooting.rst:15
msgid ""
"When running the simulator from a standalone script, it logs warnings and "
"errors to the terminal. At the same time, it also logs internal messages to "
"a file. These are useful for debugging and understanding the internal state "
"of the simulator. Depending on your system, the log file can be found in the"
" locations listed `here "
"<https://docs.omniverse.nvidia.com/isaacsim/latest/installation/install_faq.html#common-"
"path-locations>`_."
msgstr ""
"在从独立脚本运行模拟器时，它会将警告和错误记录到终端。同时，它还会将内部消息记录到文件中。这些对于调试和理解模拟器的内部状态是很有用的。根据您的系统，日志文件可以在此处列出的位置中找到 `<https://docs.omniverse.nvidia.com/isaacsim/latest/installation/install_faq.html#common-"
"path-locations>`_ 。"

#: ../../source/refs/troubleshooting.rst:20
msgid ""
"To obtain the exact location of the log file, you need to check the first "
"few lines of the terminal output when you run the standalone script. The log"
" file location is printed at the start of the terminal output. For example:"
msgstr "要获取日志文件的确切位置，您需要检查运行独立脚本时终端输出的前几行。日志文件的位置将打印在终端输出的开头。例如："

#: ../../source/refs/troubleshooting.rst:32
msgid ""
"In the above example, the log file is located at ``.../logs/Kit/Isaac-"
"Sim/2023.1/kit_20240328_183346.log``, ``...`` is the path to the user's log "
"directory. The log file is named ``kit_20240328_183346.log``"
msgstr ""
"在上面的例子中，日志文件位于 ``.../logs/Kit/Isaac-"
"Sim/2023.1/kit_20240328_183346.log``，``...`` "
"是用户日志目录的路径。日志文件的名称为 ``kit_20240328_183346.log``"

#: ../../source/refs/troubleshooting.rst:35
msgid ""
"You can open this file to check the internal logs from the simulator. Also "
"when reporting issues, please include this log file to help us debug the "
"issue."
msgstr "您可以打开此文件检查来自模拟器的内部日志。此外，在报告问题时，请包括此日志文件以帮助我们调试问题。"

#: ../../source/refs/troubleshooting.rst:40
msgid "Using CPU Scaling Governor for performance"
msgstr "使用 CPU 调频管理器提升性能"

#: ../../source/refs/troubleshooting.rst:42
msgid ""
"By default on many systems, the CPU frequency governor is set to ``powersave``"
" mode, which sets the CPU to lowest static frequency. To increase the "
"maximum performance, we recommend setting the CPU frequency governor to "
"``performance`` mode. For more details, please check the the link `here "
"<https://access.redhat.com/documentation/en-"
"us/red_hat_enterprise_linux/7/html/power_management_guide/cpufreq_governors>`__."
msgstr ""
"在许多系统上，默认情况下，CPU 频率调节器设置为 `` 节能 `` 模式，这将使 CPU 的频率保持在最低的静态频率。为了提高最大性能，我们建议将 CPU "
"频率调节器设置为 `` 性能 `` 模式。有关更多详细信息，请查看此链接 `<https://access.redhat.com/documentation/en-"
"us/red_hat_enterprise_linux/7/html/power_management_guide/cpufreq_governors>`__ 。"

#: ../../source/refs/troubleshooting.rst:50
msgid ""
"We advice not to set the governor to ``performance`` mode on a system with "
"poor cooling (such as laptops), since it may cause the system to overheat."
msgstr "我们建议在散热较差的系统上（如笔记本电脑）不要将调节器设置为 `` 性能 `` 模式，因为这可能会导致系统过热。"

#: ../../source/refs/troubleshooting.rst:53
msgid "To view existing ``scaling_governor`` value per CPU:"
msgstr "要查看每个 CPU 的现有 ``scaling_governor`` 值："

#: ../../source/refs/troubleshooting.rst:59
msgid "To change the governor to ``performance`` mode for each CPU:"
msgstr "要将每个 CPU 的调节器更改为 `` 性能 `` 模式："

#: ../../source/refs/troubleshooting.rst:67
msgid "Observing long load times at the start of the simulation"
msgstr "观察模拟开始时的长时间加载"

#: ../../source/refs/troubleshooting.rst:69
msgid ""
"The first time you run the simulator, it will take a long time to load up. "
"This is because the simulator is compiling shaders and loading assets. "
"Subsequent runs should be faster to start up, but may still take some time."
msgstr "第一次运行模拟器时，加载时间会很长。这是因为模拟器正在编译着色器和加载资源。随后的运行应该会更快启动，但可能仍需要一些时间。"

#: ../../source/refs/troubleshooting.rst:73
msgid ""
"Please note that once the Isaac Sim app loads, the environment creation time"
" may scale linearly with the number of environments. Please expect a longer "
"load time if running with thousands of environments or if each environment "
"contains a larger number of assets. We are continually working on improving "
"the time needed for this."
msgstr ""
"请注意，一旦 Isaac Sim "
"应用加载，环境创建时间可能会随环境数量成线性扩展。如果运行数千个环境，或者每个环境包含更多资源，则请预期加载时间会更长。我们一直在努力改进这一点所需的时间。"

#: ../../source/refs/troubleshooting.rst:78
msgid ""
"When an instance of Isaac Sim is already running, launching another Isaac "
"Sim instance in a different process may appear to hang at startup for the "
"first time. Please be patient and give it some time as the second process "
"will take longer to start up due to slower shader compilation."
msgstr ""
"当一个 Isaac Sim 实例已经在运行时，启动另一个 Isaac Sim "
"实例可能因较慢的着色器编译而在启动时出现停顿。请耐心等待一段时间，因为第二个进程会因着色器编译较慢而需要更长时间启动。"

#: ../../source/refs/troubleshooting.rst:84
msgid "Receiving a ``PhysX error`` when running simulation on GPU"
msgstr "在 GPU 上运行模拟时收到 ``PhysX 错误 ``"

#: ../../source/refs/troubleshooting.rst:86
msgid ""
"When using the GPU pipeline, the buffers used for the physics simulation are"
" allocated on the GPU only once at the start of the simulation. This means "
"that they do not grow dynamically as the number of collisions or objects in "
"the scene changes. If the number of collisions or objects in the scene "
"exceeds the size of the buffers, the simulation will fail with an error such"
" as the following:"
msgstr ""
"在使用 GPU 管道时，用于物理模拟的缓冲区仅在模拟开始时在 GPU "
"上分配。这意味着当场景中的碰撞或对象数量超过缓冲区的大小时，模拟将因错误而失败，例如："

#: ../../source/refs/troubleshooting.rst:96
msgid ""
"In this case, you need to increase the size of the buffers passed to the "
":class:`~omni.isaac.lab.sim.SimulationContext` class. The size of the "
"buffers can be increased by setting the "
":attr:`~omni.isaac.lab.sim.PhysxCfg.gpu_found_lost_pairs_capacity` parameter"
" in the :class:`~omni.isaac.lab.sim.PhysxCfg` class. For example, to "
"increase the size of the buffers to 4096, you can use the following code:"
msgstr ""
"在这种情况下，您需要通过设置 :class:`~omni.isaac.lab.sim.PhysxCfg` 类中的 "
":attr:`~omni.isaac.lab.sim.PhysxCfg.gpu_found_lost_pairs_capacity` 参数来增加传递给 "
":class:`~omni.isaac.lab.sim.SimulationContext` 类的缓冲区大小。例如，要将缓冲区大小增加到 "
"4096，可以使用以下代码："

#: ../../source/refs/troubleshooting.rst:110
msgid ""
"Please see the documentation for :class:`~omni.isaac.lab.sim.SimulationCfg` "
"for more details on the parameters that can be used to configure the "
"simulation."
msgstr ""
"有关可以用来配置模拟的参数的更多详细信息，请参阅 :class:`~omni.isaac.lab.sim.SimulationCfg` 的文档。"

#: ../../source/refs/troubleshooting.rst:115
msgid "Preventing memory leaks in the simulator"
msgstr "预防模拟器中的内存泄漏"

#: ../../source/refs/troubleshooting.rst:117
msgid ""
"Memory leaks in the Isaac Sim simulator can occur when C++ callbacks are "
"registered with Python objects. This happens when callback functions within "
"classes maintain references to the Python objects they are associated with. "
"As a result, Python's garbage collection is unable to reclaim memory "
"associated with these objects, preventing the corresponding C++ objects from"
" being destroyed. Over time, this can lead to memory leaks and increased "
"resource usage."
msgstr ""
"Isaac Sim 模拟器中可能会出现内存泄漏，当 C++ 回调与 Python 对象注册时即可能发生。当类内的回调函数保持与其关联的 Python "
"对象的引用时，这种情况就会发生。因此，Python 的垃圾收集器无法回收与这些对象关联的内存，从而导致相应的 C++ "
"对象无法被销毁。久而久之，这可能导致内存泄漏和资源使用量增加。"

#: ../../source/refs/troubleshooting.rst:123
msgid ""
"To prevent memory leaks in the Isaac Sim simulator, it is essential to use "
"weak references when registering callbacks with the simulator. This ensures "
"that Python objects can be garbage collected when they are no longer needed,"
" thereby avoiding memory leaks. The `weakref "
"<https://docs.python.org/3/library/weakref.html>`_ module from the Python "
"standard library can be employed for this purpose."
msgstr ""
"为了防止模拟器中的内存泄漏，关键是在向模拟器注册回调时使用弱引用。这可以确保在不再需要时 Python 对象可以被垃圾收集，从而避免内存泄漏。可以使用 "
"Python 标准库中的 `weakref <https://docs.python.org/3/library/weakref.html>`_ "
"模块来实现这一目的。"

#: ../../source/refs/troubleshooting.rst:129
msgid ""
"For example, consider a class with a callback function ``on_event_callback``"
" that needs to be registered with the simulator. If you use a strong "
"reference to the ``MyClass`` object when passing the callback, the reference"
" count of the ``MyClass`` object will be incremented. This prevents the "
"``MyClass`` object from being garbage collected when it is no longer needed,"
" i.e., the ``__del__`` destructor will not be called."
msgstr ""
"例如，考虑一个具有需要向模拟器注册的回调函数 ``on_event_callback`` 的类。如果在传递回调时对 ``MyClass`` 对象使用强引用，那么 ``MyClass`` 对象的引用计数将增加。这将阻止 ``MyClass`` 对象在不再需要时被垃圾收集，即当它不再需要时将不会调用 ``__del__`` 析构函数。"

#: ../../source/refs/troubleshooting.rst:154
msgid ""
"To fix this issue, it's crucial to employ weak references when registering "
"the callback. While this approach adds some verbosity to the code, it "
"ensures that the ``MyClass`` object can be garbage collected when no longer "
"in use. Here's the modified code:"
msgstr ""
"为了解决这个问题，当注册回调时使用弱引用是至关重要的。尽管这种方法会增加代码的冗长，但可以确保在不再使用时 ``MyClass`` 对象可以被垃圾收集。以下是修改后的代码："

#: ../../source/refs/troubleshooting.rst:178
msgid ""
"In this revised code, the weak reference ``weakref.proxy(self)`` is used "
"when registering the callback, allowing the ``MyClass`` object to be "
"properly garbage collected."
msgstr ""
"在这个修改后的代码中，当注册回调时使用了弱引用 ``weakref.proxy(self)``，这样 ``MyClass`` 对象就可以被垃圾收集。"

#: ../../source/refs/troubleshooting.rst:181
msgid ""
"By following this pattern, you can prevent memory leaks and maintain a more "
"efficient and stable simulation."
msgstr "通过遵循这种模式，您可以预防内存泄漏并保持模拟更加高效和稳定。"

#: ../../source/refs/troubleshooting.rst:185
msgid "Understanding the error logs from crashes"
msgstr "理解崩溃时的错误日志"

#: ../../source/refs/troubleshooting.rst:187
msgid ""
"Many times the simulator crashes due to a bug in the implementation. This "
"swamps the terminal with exceptions, some of which are coming from the "
"python interpreter calling ``__del__()`` destructor of the simulation "
"application. These typically look like the following:"
msgstr ""
"模拟器经常因实现中的错误而崩溃。这会导致终端充斥着异常情况，其中一些是来自 Python "
"解释器调用 ``__del__()`` 析构函数的模拟器应用程序。典型的异常看起来像这样："

#: ../../source/refs/troubleshooting.rst:229
msgid ""
"This is a known error with running standalone scripts with the Isaac Sim "
"simulator. Please scroll above the exceptions thrown with ``registry`` to "
"see the actual error log."
msgstr ""
"这是因为使用 Isaac Sim 模拟器运行独立脚本时会出现的已知错误。请向上滚动查看伴随着 ``registry`` 抛出的异常，以查看实际的错误日志。"

#: ../../source/refs/troubleshooting.rst:233
msgid "In the above case, the actual error is:"
msgstr "在上述情况下，实际错误是 :"
