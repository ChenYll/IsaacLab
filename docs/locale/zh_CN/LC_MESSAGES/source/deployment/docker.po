# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-05 10:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/deployment/docker.rst:5
msgid "Docker Guide"
msgstr "Docker 指南"

#: ../../source/deployment/docker.rst:9
msgid ""
"Due to the dependency on Isaac Sim docker image, by running this container "
"you are implicitly agreeing to the `NVIDIA Omniverse EULA`_. If you do not "
"agree to the EULA, do not run this container."
msgstr ""
"由于依赖Isaac Sim docker镜像，通过运行此容器，您默认同意 `NVIDIA Omniverse "
"EULA`_。如果您不同意EULA，请不要运行此容器。"

#: ../../source/deployment/docker.rst:13
msgid "Setup Instructions"
msgstr "设置指南"

#: ../../source/deployment/docker.rst:17
msgid ""
"The following steps are taken from the NVIDIA Omniverse Isaac Sim "
"documentation on `container installation`_. They have been added here for "
"the sake of completeness."
msgstr "以下步骤取自NVIDIA Omniverse Isaac Sim关于 `容器安装`_ 的文档。这里添加了完整性。"

#: ../../source/deployment/docker.rst:22
msgid "Docker and Docker Compose"
msgstr "Docker和Docker Compose"

#: ../../source/deployment/docker.rst:24
msgid ""
"We have tested the container using Docker Engine version 26.0.0 and Docker "
"Compose version 2.25.0 We recommend using these versions or newer."
msgstr ""
"我们已经测试了使用Docker Engine 版本26.0.0和Docker Compose版本2.25.0的容器。我们建议使用这些版本或更高版本。"

#: ../../source/deployment/docker.rst:27
msgid ""
"To install Docker, please follow the instructions for your operating system "
"on the `Docker website`_."
msgstr "要安装Docker，请按照 `Docker网站`_ 上有关您操作系统的说明来执行。"

#: ../../source/deployment/docker.rst:28
msgid ""
"To install Docker Compose, please follow the instructions for your operating"
" system on the `docker compose`_ page."
msgstr "要安装Docker Compose，请按照 `docker compose`_ 页面上有关您操作系统的说明来执行。"

#: ../../source/deployment/docker.rst:29
msgid ""
"Follow the post-installation steps for Docker on the `post-installation "
"steps`_ page. These steps allow you to run Docker without using ``sudo``."
msgstr "请按照 `后安装步骤`_ 页面上的步骤。这些步骤允许您在不使用``sudo``的情况下运行Docker。"

#: ../../source/deployment/docker.rst:31
msgid ""
"To build and run GPU-accelerated containers, you also need install the "
"`NVIDIA Container Toolkit`_. Please follow the instructions on the "
"`Container Toolkit website`_ for installation steps."
msgstr ""
"要构建和运行GPU加速的容器，您还需要安装 `NVIDIA Container Toolkit`_。请按照 `Container Toolkit网站`_"
" 上的说明进行安装。"

#: ../../source/deployment/docker.rst:36
msgid ""
"Due to limitations with `snap <https://snapcraft.io/docs/home-outside-"
"home>`_, please make sure the Isaac Lab directory is placed under the "
"``/home`` directory tree when using docker."
msgstr ""
"由于 `snap <https://snapcraft.io/docs/home-outside-home>`_ "
"的限制，请确保在使用docker时将Isaac Lab目录放在``/home``目录树下。"

#: ../../source/deployment/docker.rst:41
msgid "Obtaining the Isaac Sim Container"
msgstr "获取Isaac Sim容器"

#: ../../source/deployment/docker.rst:43
msgid ""
"Get access to the `Isaac Sim container`_ by joining the NVIDIA Developer "
"Program credentials."
msgstr "通过加入NVIDIA Developer Program凭据来获取 `Isaac Sim容器`_ 的访问权限。"

#: ../../source/deployment/docker.rst:44
msgid ""
"Generate your `NGC API key`_ to access locked container images from NVIDIA "
"GPU Cloud (NGC)."
msgstr "生成 `NGC API密钥`_ 以访问从NVIDIA GPU Cloud（NGC）获取的受限制的容器镜像。"

#: ../../source/deployment/docker.rst:46
msgid ""
"This step requires you to create an NGC account if you do not already have "
"one."
msgstr "如果您还没有NGC账号，您需要创建一个NGC账号来执行此步骤。"

#: ../../source/deployment/docker.rst:47
msgid ""
"You would also need to install the NGC CLI to perform operations from the "
"command line."
msgstr "您还需要安装NGC CLI以在命令行上执行操作。"

#: ../../source/deployment/docker.rst:48
msgid ""
"Once you have your generated API key and have installed the NGC CLI, you "
"need to log in to NGC from the terminal."
msgstr "一旦您生成了自己的API密钥并安装了NGC CLI，您需要从终端登录到NGC。"

#: ../../source/deployment/docker.rst:55
msgid "Use the command line to pull the Isaac Sim container image from NGC."
msgstr "使用命令行从NGC拉取Isaac Sim容器镜像。"

#: ../../source/deployment/docker.rst:61
msgid ""
"For the username, enter ``$oauthtoken`` exactly as shown. It is a special "
"username that is used to authenticate with NGC."
msgstr "对于用户名，确切地输入``$oauthtoken``。这是一个特殊的用户名，用于对NGC进行身份验证。"

#: ../../source/deployment/docker.rst:71
msgid "Directory Organization"
msgstr "目录组织"

#: ../../source/deployment/docker.rst:73
msgid ""
"The root of the Isaac Lab repository contains the ``docker`` directory that "
"has various files and scripts needed to run Isaac Lab inside a Docker "
"container. A subset of these are summarized below:"
msgstr ""
"Isaac Lab存储库的根目录包含``docker``目录，其中包含运行Isaac "
"Lab在Docker容器中所需的各种文件和脚本。以下是其中的部分摘要："

#: ../../source/deployment/docker.rst:76
msgid ""
"``Dockerfile.base``: Defines the isaaclab image by overlaying Isaac Lab "
"dependencies onto the Isaac Sim Docker image. ``Dockerfiles`` which end with"
" something else, (i.e. ``Dockerfile.ros2``) build an `image_extension "
"<#isaac-lab-image-extensions>`_."
msgstr ""
"``Dockerfile.base``: 通过在Isaac Sim Docker镜像上叠加Isaac "
"Lab依赖项来定义isaaclab镜像。以``Dockerfile.ros2``结尾的``Dockerfiles``会构建 "
"`image_extension <#isaac-lab-image-extensions>`_。"

#: ../../source/deployment/docker.rst:78
msgid ""
"``docker-compose.yaml``: Creates mounts to allow direct editing of Isaac Lab"
" code from the host machine that runs the container. It also creates several"
" named volumes such as ``isaac-cache-kit`` to store frequently re-used "
"resources compiled by Isaac Sim, such as shaders, and to retain logs, data, "
"and documents."
msgstr ""
"``docker-compose.yaml``: 创建挂载以允许直接从运行容器的主机机器编辑Isaac "
"Lab代码。同时创建一些命名卷，如``isaac-cache-kit``，用于存储Isaac "
"Sim编译的频繁重用资源，如shaders，以及保留日志、数据和文档。"

#: ../../source/deployment/docker.rst:81
msgid ""
"``base.env``: Stores environment variables required for the ``base`` build "
"process and the container itself. ``.env`` files which end with something "
"else (i.e. ``.env.ros2``) define these for `image_extension <#isaac-lab-"
"image-extensions>`_."
msgstr ""
"``base.env``: 存储了``base``构建过程和容器自身所需的环境变量。以``.env.ros2``结尾的``.env``文件会为 "
"`image_extension <#isaac-lab-image-extensions>`_ 定义这些环境变量。"

#: ../../source/deployment/docker.rst:83
msgid ""
"``container.sh``: A script that wraps the ``docker compose`` command to "
"build the image and run the container."
msgstr "``container.sh``: 一个包装了``docker compose``命令以构建镜像和运行容器的脚本。"

#: ../../source/deployment/docker.rst:86
msgid "Running the Container"
msgstr "运行容器"

#: ../../source/deployment/docker.rst:90
msgid ""
"The docker container copies all the files from the repository into the "
"container at the location ``/workspace/isaaclab`` at build time. This means "
"that any changes made to the files in the container would not normally be "
"reflected in the repository after the image has been built, i.e. after "
"``./container.sh start`` is run."
msgstr ""
"docker容器在构建时将存储库中的所有文件复制到位置``/workspace/isaaclab``。这意味着容器中对文件所作的任何更改通常不会在构建图像后（即运行``./container.sh"
" start``后）反映在存储库中。"

#: ../../source/deployment/docker.rst:94
msgid ""
"For a faster development cycle, we mount the following directories in the "
"Isaac Lab repository into the container so that you can edit their files "
"from the host machine:"
msgstr "为了更快的开发周期，我们将Isaac Lab存储库中的以下目录挂载到容器中，以便您可以从主机机器编辑它们的文件："

#: ../../source/deployment/docker.rst:97
msgid ""
"``source``: This is the directory that contains the Isaac Lab source code."
msgstr "``source``: 这是包含Isaac Lab源代码的目录。"

#: ../../source/deployment/docker.rst:98
msgid ""
"``docs``: This is the directory that contains the source code for Isaac Lab "
"documentation. This is overlaid except for the ``_build`` subdirectory where"
" build artifacts are stored."
msgstr "``docs``: 这是包含Isaac Lab文档源代码的目录。除了存储构建工件的``_build``子目录之外，此目录会被覆盖。"

#: ../../source/deployment/docker.rst:102
msgid ""
"The script ``container.sh`` wraps around three basic ``docker compose`` "
"commands. Each can accept an `image_extension argument <#isaac-lab-image-"
"extensions>`_, or else they will default to image_extension ``base``:"
msgstr ""
"脚本``container.sh``包装了三个基本的``docker compose``命令。每个命令都可以接受一个 `image_extension "
"参数 <#isaac-lab-image-extensions>`_，否则它们将默认为image_extension ``base``:"

#: ../../source/deployment/docker.rst:105
msgid ""
"``start``: This builds the image and brings up the container in detached "
"mode (i.e. in the background)."
msgstr "``start``: 这将在后台以分离模式（即后台运行）构建镜像并启动容器。"

#: ../../source/deployment/docker.rst:106
msgid ""
"``enter``: This begins a new bash process in an existing isaaclab container,"
" and which can be exited without bringing down the container."
msgstr "``enter``: 这会在现有的isaaclab容器中启动一个新的bash进程，可以在不关闭容器的情况下退出。"

#: ../../source/deployment/docker.rst:108
msgid ""
"``copy``: This copies the ``logs``, ``data_storage`` and ``docs/_build`` "
"artifacts, from the ``isaac-lab-logs``, ``isaac-lab-data`` and ``isaac-lab-"
"docs`` volumes respectively, to the ``docker/artifacts`` directory. These "
"artifacts persist between docker container instances and are shared between "
"image extensions."
msgstr ""
"``copy``: 这将``logs``，``data_storage``和``docs/_build``工件从相应的``isaac-lab-"
"logs``，``isaac-lab-data``和``isaac-lab-"
"docs``卷复制到``docker/artifacts``目录。这些工件在docker容器实例之间持续存在，并在image扩展之间共享。"

#: ../../source/deployment/docker.rst:111
msgid "``stop``: This brings down the container and removes it."
msgstr "``stop``: 这会关闭容器并移除它。"

#: ../../source/deployment/docker.rst:113
msgid ""
"The following shows how to launch the container in a detached state and "
"enter it:"
msgstr "以下显示了如何以分离状态启动容器并进入容器。"

#: ../../source/deployment/docker.rst:124
msgid ""
"To copy files from the base container to the host machine, you can use the "
"following command:"
msgstr "要将文件从基础容器复制到主机上，可以使用以下命令："

#: ../../source/deployment/docker.rst:131
msgid ""
"The script ``container.sh`` provides a wrapper around this command to copy "
"the ``logs`` , ``data_storage`` and ``docs/_build`` directories to the "
"``docker/artifacts`` directory. This is useful for copying the logs, data "
"and documentation:"
msgstr ""
"脚本``container.sh``提供了一个包装此命令的方法，用于将``logs``，``data_storage``和``docs/_build``目录复制到``docker/artifacts``目录。这对于复制日志、数据和文档很有用："

#: ../../source/deployment/docker.rst:141
msgid "Python Interpreter"
msgstr "Python解释器"

#: ../../source/deployment/docker.rst:143
msgid ""
"The container uses the Python interpreter provided by Isaac Sim. This "
"interpreter is located at ``/isaac-sim/python.sh``. We set aliases inside "
"the container to make it easier to run the Python interpreter. You can use "
"the following commands to run the Python interpreter:"
msgstr ""
"容器使用Isaac Sim提供的Python解释器。该解释器位于``/isaac-"
"sim/python.sh``。我们在容器内设置了别名，以便更容易地运行Python解释器。您可以使用以下命令来运行Python解释器："

#: ../../source/deployment/docker.rst:154
msgid "Understanding the mounted volumes"
msgstr "理解挂载的卷"

#: ../../source/deployment/docker.rst:156
msgid ""
"The ``docker-compose.yaml`` file creates several named volumes that are "
"mounted to the container. These are summarized below:"
msgstr "``docker-compose.yaml``文件创建了几个命名卷，这些卷被挂载到容器中。以下是它们的摘要："

#: ../../source/deployment/docker.rst:159
msgid ""
"``isaac-cache-kit``: This volume is used to store cached Kit resources "
"(`/isaac-sim/kit/cache` in container)"
msgstr "``isaac-cache-kit``: 此卷用于存储Kit资源的缓存（容器中的``/isaac-sim/kit/cache``）"

#: ../../source/deployment/docker.rst:160
msgid ""
"``isaac-cache-ov``: This volume is used to store cached OV resources "
"(`/root/.cache/ov` in container)"
msgstr "``isaac-cache-ov``: 此卷用于存储OV资源的缓存（容器中的``/root/.cache/ov``）"

#: ../../source/deployment/docker.rst:161
msgid ""
"``isaac-cache-pip``: This volume is used to store cached pip resources "
"(`/root/.cache/pip`` in container)"
msgstr "``isaac-cache-pip``: 此卷用于存储pip资源的缓存（容器中的``/root/.cache/pip``）"

#: ../../source/deployment/docker.rst:162
msgid ""
"``isaac-cache-gl``: This volume is used to store cached GLCache resources "
"(`/root/.cache/nvidia/GLCache` in container)"
msgstr ""
"``isaac-cache-gl``: 此卷用于存储GLCache资源的缓存（容器中的``/root/.cache/nvidia/GLCache``）"

#: ../../source/deployment/docker.rst:163
msgid ""
"``isaac-cache-compute``: This volume is used to store cached compute "
"resources (`/root/.nv/ComputeCache` in container)"
msgstr ""
"``isaac-cache-compute``: 此卷用于存储计算资源的缓存（容器中的``/root/.nv/ComputeCache``）"

#: ../../source/deployment/docker.rst:164
msgid ""
"``isaac-logs``: This volume is used to store logs generated by Omniverse. "
"(`/root/.nvidia-omniverse/logs` in container)"
msgstr ""
"``isaac-logs``: 此卷用于存储Omniverse生成的日志（容器中的``/root/.nvidia-omniverse/logs``）"

#: ../../source/deployment/docker.rst:165
msgid ""
"``isaac-carb-logs``: This volume is used to store logs generated by carb. "
"(`/isaac-sim/kit/logs/Kit/Isaac-Sim` in container)"
msgstr ""
"``isaac-carb-logs``: 此卷用于存储carb生成的日志（容器中的``/isaac-sim/kit/logs/Kit/Isaac-"
"Sim``）"

#: ../../source/deployment/docker.rst:166
msgid ""
"``isaac-data``: This volume is used to store data generated by Omniverse. "
"(`/root/.local/share/ov/data` in container)"
msgstr ""
"``isaac-data``: 此卷用于存储Omniverse生成的数据（容器中的``/root/.local/share/ov/data``）"

#: ../../source/deployment/docker.rst:167
msgid ""
"``isaac-docs``: This volume is used to store documents generated by "
"Omniverse. (`/root/Documents` in container)"
msgstr "``isaac-docs``: 这个卷用于存储 Omniverse 生成的文件。 （容器中的 `/root/Documents`）"

#: ../../source/deployment/docker.rst:168
msgid ""
"``isaac-lab-docs``: This volume is used to store documentation of Isaac Lab "
"when built inside the container. (`/workspace/isaaclab/docs/_build` in "
"container)"
msgstr ""
"``isaac-lab-docs``: 当内置 Isaac 实验室时，该卷用于存储 Isaac 实验室的文档。 （容器中的 "
"`/workspace/isaaclab/docs/_build`）"

#: ../../source/deployment/docker.rst:169
msgid ""
"``isaac-lab-logs``: This volume is used to store logs generated by Isaac Lab"
" workflows when run inside the container. (`/workspace/isaaclab/logs` in "
"container)"
msgstr ""
"``isaac-lab-logs``: 当在容器中运行 Isaac 实验室工作流时，该卷用于存储生成的日志。 （容器中的 "
"`/workspace/isaaclab/logs`）"

#: ../../source/deployment/docker.rst:170
msgid ""
"``isaac-lab-data``: This volume is used to store whatever data users may "
"want to preserve between container runs. (`/workspace/isaaclab/data_storage`"
" in container)"
msgstr ""
"``isaac-lab-data``: 该卷用于存储用户在容器运行之间想要保留的任何数据。 （容器中的 "
"`/workspace/isaaclab/data_storage`）"

#: ../../source/deployment/docker.rst:172
msgid ""
"To view the contents of these volumes, you can use the following command:"
msgstr "要查看这些卷的内容，您可以使用以下命令："

#: ../../source/deployment/docker.rst:184
msgid "Isaac Lab Image Extensions"
msgstr "Isaac 实验室镜像扩展"

#: ../../source/deployment/docker.rst:186
msgid ""
"The produced image depends upon the arguments passed to ``./container.sh "
"start`` and ``./container.sh stop``. These commands accept an "
"``image_extension`` as an additional argument. If no argument is passed, "
"then these commands default to ``base``. Currently, the only valid "
"``image_extension`` arguments are (``base``, ``ros2``). Only one "
"``image_extension`` can be passed at a time, and the produced container will"
" be named ``isaaclab``."
msgstr ""
"生成的镜像取决于传递给 ``./container.sh start`` 和 ``./container.sh stop`` 的参数。 这些命令接受 "
"``image_extension`` 作为附加参数。 如果未传递参数，则这些命令将默认为``base``。 目前，唯一有效的 "
"``image_extension`` 参数是（``base``、``ros2``）。 一次只能传递一个 "
"``image_extension``，并且生成的容器将命名为 ``isaaclab``。"

#: ../../source/deployment/docker.rst:202
msgid ""
"The passed ``image_extension`` argument will build the image defined in "
"``Dockerfile.${image_extension}``, with the corresponding `profile`_ in the "
"``docker-compose.yaml`` and the envars from ``.env.${image_extension}`` in "
"addition to the ``.env.base``, if any."
msgstr ""
"传递的 ``image_extension`` 参数将构建 ``Dockerfile.${image_extension}`` 中定义的镜像，以及 "
"``docker-compose.yaml`` 中的相应`profile`_和``.env.${image_extension}`` 及 "
"``.env.base`` 中的 envars，如果有的话。"

#: ../../source/deployment/docker.rst:207
msgid "ROS2 Image Extension"
msgstr "ROS2镜像扩展"

#: ../../source/deployment/docker.rst:209
msgid ""
"In ``Dockerfile.ros2``, the container installs ROS2 Humble via an `apt "
"package`_, and it is sourced in the ``.bashrc``. The exact version is "
"specified by the variable ``ROS_APT_PACKAGE`` in the ``.env.ros2`` file, "
"defaulting to ``ros-base``. Other relevant ROS2 variables are also specified"
" in the ``.env.ros2`` file, including variables defining the `various "
"middleware`_ options. The container defaults to ``FastRTPS``, but "
"``CylconeDDS`` is also supported. Each of these middlewares can be `tuned`_ "
"using their corresponding ``.xml`` files under ``docker/.ros``."
msgstr ""
"在 ``Dockerfile.ros2`` 中，容器通过 `apt package`_ 安装 ROS2 Humble，并在 ``.bashrc`` "
"中进行源代码设置。 变量``ROS_APT_PACKAGE`` 在 ``.env.ros2`` 文件中指定确切的版本，默认为``ros-base``。 "
"``.env.ros2`` 文件中还指定了其他相关的 ROS2 变量，包括定义`各种中间件`_选项的变量。 "
"容器默认为``FastRTPS``，但也支持``CylconeDDS``。 "
"这些中间件可以使用它们在``docker/.ros``下的相应``.xml``文件进行`tuned`_。"

#: ../../source/deployment/docker.rst:217
msgid "Known Issues"
msgstr "已知问题"

#: ../../source/deployment/docker.rst:220
msgid "Invalid mount config for type \"bind\""
msgstr "类型 “bind” 的无效挂载配置"

#: ../../source/deployment/docker.rst:222
msgid "If you see the following error when building the container:"
msgstr "如果构建容器时出现以下错误："

#: ../../source/deployment/docker.rst:229
msgid ""
"This means that the ``.Xauthority`` file is not present in the home "
"directory of the host machine. The portion of the docker-compose.yaml that "
"enables this is commented out by default, so this shouldn't happen unless it"
" has been altered. This file is required for X11 forwarding to work. To fix "
"this, you can create an empty ``.Xauthority`` file in your home directory."
msgstr ""
"这意味着主机机器的主目录中不存在``.Xauthority`` 文件。 docker-"
"compose.yaml中启用此部分默认是已注释掉的，因此除非进行了更改，否则不应该发生这种情况。 对于 X11 转发来说，此文件是必需的。 "
"要解决此问题，您可以在您的主目录中创建一个空的``.Xauthority``文件。"

#: ../../source/deployment/docker.rst:238
msgid "A similar error but requires a different fix:"
msgstr "类似的错误，但需要不同的修复："

#: ../../source/deployment/docker.rst:245
msgid ""
"This means that the folder/files are either not present or not accessible on"
" the host machine. The portion of the docker-compose.yaml that enables this "
"is commented out by default, so this shouldn't happen unless it has been "
"altered. This usually happens when you have multiple docker versions "
"installed on your machine. To fix this, you can try the following:"
msgstr ""
"这意味着主机机器上要么不存在该文件夹/文件，要么不可访问。 docker-"
"compose.yaml中启用此部分默认是已注释掉的，因此除非进行了更改，否则不应该发生这种情况。 这通常发生在主机机器上安装了多个 docker "
"版本时。 要解决此问题，您可以尝试："

#: ../../source/deployment/docker.rst:250
msgid "Remove all docker versions from your machine."
msgstr "从您的计算机中删除所有 docker 版本。"

#: ../../source/deployment/docker.rst:259
msgid ""
"Install the latest version of docker based on the instructions in the setup "
"section."
msgstr "按照设置部分的说明安装最新版本的 docker。"

#: ../../source/deployment/docker.rst:262
msgid "WebRTC Streaming"
msgstr "WebRTC流"

#: ../../source/deployment/docker.rst:264
msgid ""
"When streaming the GUI from Isaac Sim, there are `several streaming "
"clients`_ available. There is a `known issue`_ when attempting to use WebRTC"
" streaming client on Google Chrome and Safari while running Isaac Sim inside"
" a container. To avoid this problem, we suggest using the Native Streaming "
"Client or using the Mozilla Firefox browser on which WebRTC works."
msgstr ""
"在从 Isaac Sim 中进行GUI流时，有`几个流客户端`_可用。 当尝试在容器中运行 Isaac Sim 时，使用 Google Chrome 和"
" Safari 进行 WebRTC 流客户端有`已知问题`_。 为了避免此问题，我们建议使用原生流客户端，或者在其中 WebRTC 正常工作的 "
"Mozilla Firefox 浏览器。"

#: ../../source/deployment/docker.rst:269
msgid ""
"Streaming is the only supported method for visualizing the Isaac GUI from "
"within the container. The Omniverse Streaming Client is freely available "
"from the Omniverse app, and is easy to use. The other streaming methods "
"similarly require only a web browser. If users want to use X11 forwarding in"
" order to have the apps behave as local GUI windows, they can uncomment the "
"relevant portions in docker-compose.yaml."
msgstr ""
"从容器中可视化 Isaac GUI 的唯一支持的方法是流。 Omniverse 流客户端可在 Omniverse 应用程序中免费获得，并且易于使用。 "
"其他流方法同样只需要一个 Web 浏览器。 如果用户想要使用 X11 转发，以便应用程序像本地 GUI 窗口一样运行，他们可以在 docker-"
"compose.yaml 中取消注释相关部分。"
