# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-06 04:24+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/deployment/docker.rst:5
msgid "Docker Guide"
msgstr "Docker 指南"

#: ../../source/deployment/docker.rst:9
msgid ""
"Due to the dependency on Isaac Sim docker image, by running this container "
"you are implicitly agreeing to the `NVIDIA Omniverse EULA`_. If you do not "
"agree to the EULA, do not run this container."
msgstr ""
"由于依赖于 Isaac Sim docker 映像，通过运行此容器，您隐含地同意 `NVIDIA Omniverse EULA`_ "
"。如果您不同意该最终用户许可协议，请不要运行此容器。"

#: ../../source/deployment/docker.rst:13
msgid "Setup Instructions"
msgstr "设置说明"

#: ../../source/deployment/docker.rst:17
msgid ""
"The following steps are taken from the NVIDIA Omniverse Isaac Sim "
"documentation on `container installation`_. They have been added here for "
"the sake of completeness."
msgstr ""
"以下步骤取自NVIDIA Omniverse Isaac Sim文档中的 `container installation`_ "
"。它们被添加在这里是为了完整起见。"

#: ../../source/deployment/docker.rst:22
msgid "Docker and Docker Compose"
msgstr "Docker 和 Docker Compose"

#: ../../source/deployment/docker.rst:24
msgid ""
"We have tested the container using Docker Engine version 26.0.0 and Docker "
"Compose version 2.25.0 We recommend using these versions or newer."
msgstr ""
"我们已经测试了 Docker Engine 版本26.0.0 和 Docker Compose 版本2.25.0。我们建议使用这些版本或更新版本。"

#: ../../source/deployment/docker.rst:27
msgid ""
"To install Docker, please follow the instructions for your operating system "
"on the `Docker website`_."
msgstr "安装 Docker，请按照 `Docker website`_ 上您操作系统的说明进行操作。"

#: ../../source/deployment/docker.rst:28
msgid ""
"To install Docker Compose, please follow the instructions for your operating"
" system on the `docker compose`_ page."
msgstr "要安装 Docker Compose，请按照 `docker compose`_ 页面上您操作系统的说明进行操作。"

#: ../../source/deployment/docker.rst:29
msgid ""
"Follow the post-installation steps for Docker on the `post-installation "
"steps`_ page. These steps allow you to run Docker without using ``sudo``."
msgstr ""
"按照 `post-installation steps`_ 页面上的后续步骤进行Docker的安装。这些步骤允许您在不使用 ``sudo`` "
"的情况下运行 Docker。"

#: ../../source/deployment/docker.rst:31
msgid ""
"To build and run GPU-accelerated containers, you also need install the "
"`NVIDIA Container Toolkit`_. Please follow the instructions on the "
"`Container Toolkit website`_ for installation steps."
msgstr ""
"要构建和运行 GPU加速容器，您还需要安装 `NVIDIA Container Toolkit`_ 。请按照 `Container Toolkit "
"website`_ 上的说明进行安装。"

#: ../../source/deployment/docker.rst:36
msgid ""
"Due to limitations with `snap <https://snapcraft.io/docs/home-outside-"
"home>`_, please make sure the Isaac Lab directory is placed under the "
"``/home`` directory tree when using docker."
msgstr ""
"由于对 `snap <https://snapcraft.io/docs/home-outside-home>`_ 的限制，请确保Isaac "
"Lab目录位于 ``/home`` 目录树下使用docker时。"

#: ../../source/deployment/docker.rst:41
msgid "Obtaining the Isaac Sim Container"
msgstr "获取 Isaac Sim 容器"

#: ../../source/deployment/docker.rst:43
msgid ""
"Get access to the `Isaac Sim container`_ by joining the NVIDIA Developer "
"Program credentials."
msgstr "通过加入 NVIDIA Developer Program 凭据来获得对 `Isaac Sim容器`_ 的访问权限。"

#: ../../source/deployment/docker.rst:44
msgid ""
"Generate your `NGC API key`_ to access locked container images from NVIDIA "
"GPU Cloud (NGC)."
msgstr "生成您的 `NGC API密钥`_ 以访问NVIDIA GPU Cloud (NGC)中的锁定容器映像。"

#: ../../source/deployment/docker.rst:46
msgid ""
"This step requires you to create an NGC account if you do not already have "
"one."
msgstr "如果您尚未拥有NGC账户，则需要创建一个NGC账户才能执行此步骤。"

#: ../../source/deployment/docker.rst:47
msgid ""
"You would also need to install the NGC CLI to perform operations from the "
"command line."
msgstr "还需要安装NGC CLI以从命令行执行操作。"

#: ../../source/deployment/docker.rst:48
msgid ""
"Once you have your generated API key and have installed the NGC CLI, you "
"need to log in to NGC from the terminal."
msgstr "一旦您生成了 API密钥并安装了NGC CLI，您需要从终端登录到NGC。"

#: ../../source/deployment/docker.rst:55
msgid "Use the command line to pull the Isaac Sim container image from NGC."
msgstr "使用命令行从NGC中拉取Isaac Sim容器映像。"

#: ../../source/deployment/docker.rst:61
msgid ""
"For the username, enter ``$oauthtoken`` exactly as shown. It is a special "
"username that is used to authenticate with NGC."
msgstr "对于用户名，输入 ``$oauthtoken`` ，如所示。这是用于与NGC进行身份验证的特殊用户名。"

#: ../../source/deployment/docker.rst:71
msgid "Directory Organization"
msgstr "目录组织"

#: ../../source/deployment/docker.rst:73
msgid ""
"The root of the Isaac Lab repository contains the ``docker`` directory that "
"has various files and scripts needed to run Isaac Lab inside a Docker "
"container. A subset of these are summarized below:"
msgstr ""
"Isaac Lab存储库的根目录包含名为 ``docker`` 的目录，其中包含运行Isaac Lab所需的各种文件和脚本。以下是其中的一部分摘要 :"

#: ../../source/deployment/docker.rst:76
msgid ""
"``Dockerfile.base``: Defines the isaaclab image by overlaying Isaac Lab "
"dependencies onto the Isaac Sim Docker image. ``Dockerfiles`` which end with"
" something else, (i.e. ``Dockerfile.ros2``) build an `image_extension "
"<#isaac-lab-image-extensions>`_."
msgstr ""
"``Dockerfile.base``: 通过将Isaac Lab的依赖项覆盖 Isaac Sim Docker "
"映像，定义了isaaclab映像。以其他内容结尾的 ``Dockerfiles``(即 ``Dockerfile.ros2``)构建了一个 "
"`image_extension <#isaac-lab-image-extensions>`_ 。"

#: ../../source/deployment/docker.rst:78
msgid ""
"``docker-compose.yaml``: Creates mounts to allow direct editing of Isaac Lab"
" code from the host machine that runs the container. It also creates several"
" named volumes such as ``isaac-cache-kit`` to store frequently re-used "
"resources compiled by Isaac Sim, such as shaders, and to retain logs, data, "
"and documents."
msgstr ""
"``docker-compose.yaml``: 创建挂载点，允许从运行容器的主机直接编辑Isaac Lab代码。还创建了几个命名卷，如 "
"``isaac-cache-kit`` 用于存储Isaac Sim编译的经常复用的资源，如着色器，以及保留日志、数据和文件。"

#: ../../source/deployment/docker.rst:81
msgid ""
"``base.env``: Stores environment variables required for the ``base`` build "
"process and the container itself. ``.env`` files which end with something "
"else (i.e. ``.env.ros2``) define these for `image_extension <#isaac-lab-"
"image-extensions>`_."
msgstr ""
"``base.env``: 存储需要 ``base`` 构建过程和容器本身所需的环境变量。其他以其他内容结尾的 ``.env`` 文件(即 "
"``.env.ros2``)为 `image_extension <#isaac-lab-image-extensions>`_ 定义了这些变量。"

#: ../../source/deployment/docker.rst:83
msgid ""
"``container.sh``: A script that wraps the ``docker compose`` command to "
"build the image and run the container."
msgstr "``container.sh``: 一个包装了 ``docker compose`` 命令的脚本，用于构建映像和运行容器。"

#: ../../source/deployment/docker.rst:86
msgid "Running the Container"
msgstr "运行容器"

#: ../../source/deployment/docker.rst:90
msgid ""
"The docker container copies all the files from the repository into the "
"container at the location ``/workspace/isaaclab`` at build time. This means "
"that any changes made to the files in the container would not normally be "
"reflected in the repository after the image has been built, i.e. after "
"``./container.sh start`` is run."
msgstr ""
"Docker容器在构建时将存储库中的所有文件复制到位置为 ``/workspace/isaaclab`` "
"的容器中。这意味着对容器中文件的任何更改通常在构建映像后不会反映在存储库中，即在运行 ```./container.sh start``` 后。"

#: ../../source/deployment/docker.rst:94
msgid ""
"For a faster development cycle, we mount the following directories in the "
"Isaac Lab repository into the container so that you can edit their files "
"from the host machine:"
msgstr "为了使开发周期更快，我们将Isaac Lab存储库中的以下目录挂载到容器中，以便您可以从主机编辑其文件 :"

#: ../../source/deployment/docker.rst:97
msgid ""
"``source``: This is the directory that contains the Isaac Lab source code."
msgstr "``source``: 包含Isaac Lab源代码的目录。"

#: ../../source/deployment/docker.rst:98
msgid ""
"``docs``: This is the directory that contains the source code for Isaac Lab "
"documentation. This is overlaid except for the ``_build`` subdirectory where"
" build artifacts are stored."
msgstr "``docs``: 包含Isaac Lab文档源代码的目录。这是除了保存构建工件的 ``_build`` 子目录之外的所有东西。"

#: ../../source/deployment/docker.rst:102
msgid ""
"The script ``container.sh`` wraps around three basic ``docker compose`` "
"commands. Each can accept an `image_extension argument <#isaac-lab-image-"
"extensions>`_, or else they will default to image_extension ``base``:"
msgstr ""
"脚本 ``container.sh`` 包围了三个基本的 ``docker compose`` 命令。每个命令都可以接受一个 "
"`image_extension argument <#isaac-lab-image-extensions>`_ "
"，否则它们将默认为image_extension ``base``:"

#: ../../source/deployment/docker.rst:105
msgid ""
"``start``: This builds the image and brings up the container in detached "
"mode (i.e. in the background)."
msgstr "``start``: 这会构建映像并在分离模式下 (即后台模式)启动容器。"

#: ../../source/deployment/docker.rst:106
msgid ""
"``enter``: This begins a new bash process in an existing isaaclab container,"
" and which can be exited without bringing down the container."
msgstr "``enter``: 这在现有的isaaclab容器中启动一个新的 bash 进程，退出该进程不会关闭容器。"

#: ../../source/deployment/docker.rst:108
msgid ""
"``copy``: This copies the ``logs``, ``data_storage`` and ``docs/_build`` "
"artifacts, from the ``isaac-lab-logs``, ``isaac-lab-data`` and ``isaac-lab-"
"docs`` volumes respectively, to the ``docker/artifacts`` directory. These "
"artifacts persist between docker container instances and are shared between "
"image extensions."
msgstr ""
"``copy``: 这将 ``logs``, ``data_storage`` 和 ``docs/_build`` 工件从分别的 ``isaac-"
"lab-logs``, ``isaac-lab-data`` 和 ``isaac-lab-docs`` 卷复制到 "
"``docker/artifacts`` 目录中。这些工件在 Docker 容器实例之间持续存在，并在镜像扩展之间共享。"

#: ../../source/deployment/docker.rst:111
msgid "``stop``: This brings down the container and removes it."
msgstr "``stop``: 这会关闭容器并删除它。"

#: ../../source/deployment/docker.rst:113
msgid ""
"The following shows how to launch the container in a detached state and "
"enter it:"
msgstr "以下显示了如何在分离状态下启动容器并进入它 :"

#: ../../source/deployment/docker.rst:124
msgid ""
"To copy files from the base container to the host machine, you can use the "
"following command:"
msgstr "要将文件从基础容器复制到主机，您可以使用以下命令："

#: ../../source/deployment/docker.rst:131
msgid ""
"The script ``container.sh`` provides a wrapper around this command to copy "
"the ``logs`` , ``data_storage`` and ``docs/_build`` directories to the "
"``docker/artifacts`` directory. This is useful for copying the logs, data "
"and documentation:"
msgstr ""
"脚本 ``container.sh`` 包装了此命令以将 ``logs``, ``data_storage`` 和 ``docs/_build`` "
"目录复制到 ``docker/artifacts`` 目录。这对于复制日志、数据和文档非常有用 :"

#: ../../source/deployment/docker.rst:141
msgid "Python Interpreter"
msgstr "Python 解释器"

#: ../../source/deployment/docker.rst:143
msgid ""
"The container uses the Python interpreter provided by Isaac Sim. This "
"interpreter is located at ``/isaac-sim/python.sh``. We set aliases inside "
"the container to make it easier to run the Python interpreter. You can use "
"the following commands to run the Python interpreter:"
msgstr ""
"容器使用Isaac Sim提供的Python解释器。此解释器位于 ``/isaac-sim/python.sh`` "
"。我们在容器内设置别名，以便更容易地运行Python解释器。您可以使用以下命令运行Python解释器 :"

#: ../../source/deployment/docker.rst:154
msgid "Understanding the mounted volumes"
msgstr "理解挂载卷"

#: ../../source/deployment/docker.rst:156
msgid ""
"The ``docker-compose.yaml`` file creates several named volumes that are "
"mounted to the container. These are summarized below:"
msgstr "``docker-compose.yaml`` 文件创建了几个命名卷，它们被挂载到容器。以下是这些卷的摘要 :"

#: ../../source/deployment/docker.rst:159
#, fuzzy
msgid ""
"``isaac-cache-kit``: This volume is used to store cached Kit resources "
"(``/isaac-sim/kit/cache`` in container)"
msgstr ""
"``isaac-cache-kit``: 此卷用于存储已缓存的 Kit 资源 (容器中的 ``/isaac-sim/kit/cache`` )"

#: ../../source/deployment/docker.rst:160
#, fuzzy
msgid ""
"``isaac-cache-ov``: This volume is used to store cached OV resources "
"(``/root/.cache/ov`` in container)"
msgstr "``isaac-cache-ov``: 此卷用于存储已缓存的OV资源(容器中的 ``/root/.cache/ov`` )"

#: ../../source/deployment/docker.rst:161
#, fuzzy
msgid ""
"``isaac-cache-pip``: This volume is used to store cached pip resources "
"(``/root/.cache/pip`` in container)"
msgstr "``isaac-cache-pip``: 此卷用于存储已缓存的pip资源(容器中的 ``/root/.cache/pip`` )"

#: ../../source/deployment/docker.rst:162
#, fuzzy
msgid ""
"``isaac-cache-gl``: This volume is used to store cached GLCache resources "
"(``/root/.cache/nvidia/GLCache`` in container)"
msgstr ""
"``isaac-cache-gl``: 此卷用于存储已缓存的GLCache资源(容器中的 ``/root/.cache/nvidia/GLCache``"
" )"

#: ../../source/deployment/docker.rst:163
#, fuzzy
msgid ""
"``isaac-cache-compute``: This volume is used to store cached compute "
"resources (``/root/.nv/ComputeCache`` in container)"
msgstr ""
"``isaac-cache-compute``: 此卷用于存储已缓存的计算资源(容器中的 ``/root/.nv/ComputeCache`` )"

#: ../../source/deployment/docker.rst:164
#, fuzzy
msgid ""
"``isaac-logs``: This volume is used to store logs generated by Omniverse. "
"(``/root/.nvidia-omniverse/logs`` in container)"
msgstr ""
"``isaac-logs``: 此卷用于存储Omniverse生成的日志(容器中的 ``/root/.nvidia-omniverse/logs`` )"

#: ../../source/deployment/docker.rst:165
#, fuzzy
msgid ""
"``isaac-carb-logs``: This volume is used to store logs generated by carb. "
"(``/isaac-sim/kit/logs/Kit/Isaac-Sim`` in container)"
msgstr ""
"``isaac-carb-logs``: 此卷用于存储carb生成的日志(容器中的 ``/isaac-sim/kit/logs/Kit/Isaac-"
"Sim`` )"

#: ../../source/deployment/docker.rst:166
#, fuzzy
msgid ""
"``isaac-data``: This volume is used to store data generated by Omniverse. "
"(``/root/.local/share/ov/data`` in container)"
msgstr ""
"``isaac-data``: 此卷用于存储Omniverse生成的数据(容器中的 ``/root/.local/share/ov/data`` )"

#: ../../source/deployment/docker.rst:167
#, fuzzy
msgid ""
"``isaac-docs``: This volume is used to store documents generated by "
"Omniverse. (``/root/Documents`` in container)"
msgstr "``isaac-docs``: 该卷用于存储 Omniverse 生成的文档。 (容器中的 ``/root/Documents`` )"

#: ../../source/deployment/docker.rst:168
#, fuzzy
msgid ""
"``isaac-lab-docs``: This volume is used to store documentation of Isaac Lab "
"when built inside the container. (``/workspace/isaaclab/docs/_build`` in "
"container)"
msgstr ""
"``isaac-lab-docs``: 当在容器内构建 Isaac Lab 时，该卷用于存储 Isaac Lab 的文档。 (容器中的 "
"``/workspace/isaaclab/docs/_build`` )"

#: ../../source/deployment/docker.rst:169
#, fuzzy
msgid ""
"``isaac-lab-logs``: This volume is used to store logs generated by Isaac Lab"
" workflows when run inside the container. (``/workspace/isaaclab/logs`` in "
"container)"
msgstr ""
"``isaac-lab-logs``: 该卷用于存储在容器内运行时由 Isaac Lab 工作流生成的日志。 (容器中的 "
"``/workspace/isaaclab/logs`` )"

#: ../../source/deployment/docker.rst:170
#, fuzzy
msgid ""
"``isaac-lab-data``: This volume is used to store whatever data users may "
"want to preserve between container runs. "
"(``/workspace/isaaclab/data_storage`` in container)"
msgstr ""
"``isaac-lab-data``: 该卷用于存储用户希望在容器运行之间保留的任何数据。 (容器中的 "
"``/workspace/isaaclab/data_storage`` )"

#: ../../source/deployment/docker.rst:172
msgid ""
"To view the contents of these volumes, you can use the following command:"
msgstr "要查看这些卷的内容，您可以使用以下命令："

#: ../../source/deployment/docker.rst:184
msgid "Isaac Lab Image Extensions"
msgstr "Isaac Lab 图像扩展"

#: ../../source/deployment/docker.rst:186
msgid ""
"The produced image depends upon the arguments passed to ``./container.sh "
"start`` and ``./container.sh stop``. These commands accept an "
"``image_extension`` as an additional argument. If no argument is passed, "
"then these commands default to ``base``. Currently, the only valid "
"``image_extension`` arguments are (``base``, ``ros2``). Only one "
"``image_extension`` can be passed at a time, and the produced container will"
" be named ``isaaclab``."
msgstr ""
"生成的图像取决于传递给 ``./container.sh start`` 和 ``./container.sh stop`` 的参数。这些命令接受一个 "
"``image_extension`` 作为额外参数。 如果未传递参数，则这些命令默认为 ``base`` 。 当前，唯一有效的 "
"``image_extension`` 参数是（ ``base`` ， ``ros2`` ）。 一次只能传递一个 ``image_extension``"
" ，并且生成的容器将命名为 ``isaaclab`` 。"

#: ../../source/deployment/docker.rst:202
msgid ""
"The passed ``image_extension`` argument will build the image defined in "
"``Dockerfile.${image_extension}``, with the corresponding `profile`_ in the "
"``docker-compose.yaml`` and the envars from ``.env.${image_extension}`` in "
"addition to the ``.env.base``, if any."
msgstr ""
"传递的 ``image_extension`` 参数将构建 ``Dockerfile.${image_extension}`` 中定义的图像，该图像在 "
"``docker-compose.yaml`` 中具有相应的 `profile`_ 和 ``.env.${image_extension}`` "
"文件中包含的环境变量以及 ``.env.base`` 文件，如果有的话。"

#: ../../source/deployment/docker.rst:207
msgid "ROS2 Image Extension"
msgstr "ROS2 图像扩展"

#: ../../source/deployment/docker.rst:209
msgid ""
"In ``Dockerfile.ros2``, the container installs ROS2 Humble via an `apt "
"package`_, and it is sourced in the ``.bashrc``. The exact version is "
"specified by the variable ``ROS_APT_PACKAGE`` in the ``.env.ros2`` file, "
"defaulting to ``ros-base``. Other relevant ROS2 variables are also specified"
" in the ``.env.ros2`` file, including variables defining the `various "
"middleware`_ options. The container defaults to ``FastRTPS``, but "
"``CylconeDDS`` is also supported. Each of these middlewares can be `tuned`_ "
"using their corresponding ``.xml`` files under ``docker/.ros``."
msgstr ""
"在 ``Dockerfile.ros2`` 中，容器通过 `apt package`_ 安装了 ROS2 Humble，并在 ``.bashrc`` "
"中进行了源化。 具体版本由 ``.env.ros2`` 文件中的变量 ``ROS_APT_PACKAGE`` 指定， 默认为 ``ros-base`` "
"。 ``.env.ros2`` 文件中还指定了其他相关的 ROS2 变量，包括定义 ` 各种中间件`_ 选项的变量。 容器默认为 "
"``FastRTPS`` ，但也支持 ``CylconeDDS`` 。 这些中间件中的每一个都可以使用它们在 ``docker/.ros`` 下对应的 "
"``.xml`` 文件进行 `tuned`_ 。"

#: ../../source/deployment/docker.rst:217
msgid "Known Issues"
msgstr "已知问题"

#: ../../source/deployment/docker.rst:220
msgid "Invalid mount config for type \"bind\""
msgstr "类型 \"bind\" 的无效挂载配置"

#: ../../source/deployment/docker.rst:222
msgid "If you see the following error when building the container:"
msgstr "如果在构建容器时看到以下错误："

#: ../../source/deployment/docker.rst:229
msgid ""
"This means that the ``.Xauthority`` file is not present in the home "
"directory of the host machine. The portion of the docker-compose.yaml that "
"enables this is commented out by default, so this shouldn't happen unless it"
" has been altered. This file is required for X11 forwarding to work. To fix "
"this, you can create an empty ``.Xauthority`` file in your home directory."
msgstr ""
"这意味着主机机器的主目录中不存在 ``.Xauthority`` 文件。 docker-compose.yaml "
"的一部分被默认注释掉了，因此除非被更改，否则不会发生这种情况。 这个文件对于 X11 转发是必需的。 要解决此问题，您可以在您的主目录中创建一个空的 "
"``.Xauthority`` 文件。"

#: ../../source/deployment/docker.rst:238
msgid "A similar error but requires a different fix:"
msgstr "类似的错误但需要不同的修复方法："

#: ../../source/deployment/docker.rst:245
msgid ""
"This means that the folder/files are either not present or not accessible on"
" the host machine. The portion of the docker-compose.yaml that enables this "
"is commented out by default, so this shouldn't happen unless it has been "
"altered. This usually happens when you have multiple docker versions "
"installed on your machine. To fix this, you can try the following:"
msgstr ""
"这意味着主机机器上要么不存在要么无法访问文件/文件夹。 docker-compose.yaml "
"的一部分被默认注释掉了，因此除非被更改，否则不会发生这种情况。 当您的机器上安装了多个 docker 版本时通常会发生这种情况。 "
"要解决此问题，您可以尝试以下操作："

#: ../../source/deployment/docker.rst:250
msgid "Remove all docker versions from your machine."
msgstr "从您的机器上删除所有 docker 版本。"

#: ../../source/deployment/docker.rst:259
msgid ""
"Install the latest version of docker based on the instructions in the setup "
"section."
msgstr "根据设置部分的说明安装最新版本的 docker。"

#: ../../source/deployment/docker.rst:262
msgid "WebRTC Streaming"
msgstr "WebRTC 流"

#: ../../source/deployment/docker.rst:264
msgid ""
"When streaming the GUI from Isaac Sim, there are `several streaming "
"clients`_ available. There is a `known issue`_ when attempting to use WebRTC"
" streaming client on Google Chrome and Safari while running Isaac Sim inside"
" a container. To avoid this problem, we suggest using the Native Streaming "
"Client or using the Mozilla Firefox browser on which WebRTC works."
msgstr ""
"从 Isaac Sim 中流式传输 GUI 时，有 ` 几种流媒体客户端`_ 可供选择。 尝试在容器中运行 Isaac Sim 时，使用 WebRTC "
"流客户端在 Google Chrome 和 Safari 上可能会出现 ` 已知问题`_ 。 为了避免此问题，我们建议使用本机流式传输客户端或在支持 "
"WebRTC 的 Mozilla Firefox 浏览器上运行。"

#: ../../source/deployment/docker.rst:269
msgid ""
"Streaming is the only supported method for visualizing the Isaac GUI from "
"within the container. The Omniverse Streaming Client is freely available "
"from the Omniverse app, and is easy to use. The other streaming methods "
"similarly require only a web browser. If users want to use X11 forwarding in"
" order to have the apps behave as local GUI windows, they can uncomment the "
"relevant portions in docker-compose.yaml."
msgstr ""
"从容器内可视化 Isaac GUI 的唯一支持方法是流式传输。 Omniverse 流式传输客户端可以从 Omniverse "
"应用中免费获取，并且易于使用。 其他流式传输方法同样只需要一个网络浏览器。 如果用户希望使用 X11 转发以使应用程序表现为本地 GUI "
"窗口，可以取消注释 docker-compose.yaml 中的相关部分。"
