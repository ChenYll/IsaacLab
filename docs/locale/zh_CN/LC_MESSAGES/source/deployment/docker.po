# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/deployment/docker.rst:5
msgid "Docker Guide"
msgstr "Docker Guide"

#: ../../source/deployment/docker.rst:9
msgid ""
"Due to the dependency on Isaac Sim docker image, by running this container "
"you are implicitly agreeing to the `NVIDIA Omniverse EULA`_. If you do not "
"agree to the EULA, do not run this container."
msgstr ""
"Due to the dependency on Isaac Sim docker image, by running this container "
"you are implicitly agreeing to the `NVIDIA Omniverse EULA`_. If you do not "
"agree to the EULA, do not run this container."

#: ../../source/deployment/docker.rst:13
msgid "Setup Instructions"
msgstr "Setup Instructions"

#: ../../source/deployment/docker.rst:17
msgid ""
"The following steps are taken from the NVIDIA Omniverse Isaac Sim "
"documentation on `container installation`_. They have been added here for "
"the sake of completeness."
msgstr ""
"The following steps are taken from the NVIDIA Omniverse Isaac Sim "
"documentation on `container installation`_. They have been added here for "
"the sake of completeness."

#: ../../source/deployment/docker.rst:22
msgid "Docker and Docker Compose"
msgstr "Docker and Docker Compose"

#: ../../source/deployment/docker.rst:24
msgid ""
"We have tested the container using Docker Engine version 26.0.0 and Docker "
"Compose version 2.25.0 We recommend using these versions or newer."
msgstr ""
"We have tested the container using Docker Engine version 26.0.0 and Docker "
"Compose version 2.25.0 We recommend using these versions or newer."

#: ../../source/deployment/docker.rst:27
msgid ""
"To install Docker, please follow the instructions for your operating system "
"on the `Docker website`_."
msgstr ""
"To install Docker, please follow the instructions for your operating system "
"on the `Docker website`_."

#: ../../source/deployment/docker.rst:28
msgid ""
"To install Docker Compose, please follow the instructions for your operating"
" system on the `docker compose`_ page."
msgstr ""
"To install Docker Compose, please follow the instructions for your operating"
" system on the `docker compose`_ page."

#: ../../source/deployment/docker.rst:29
msgid ""
"Follow the post-installation steps for Docker on the `post-installation "
"steps`_ page. These steps allow you to run Docker without using ``sudo``."
msgstr ""
"Follow the post-installation steps for Docker on the `post-installation "
"steps`_ page. These steps allow you to run Docker without using ``sudo``."

#: ../../source/deployment/docker.rst:31
msgid ""
"To build and run GPU-accelerated containers, you also need install the "
"`NVIDIA Container Toolkit`_. Please follow the instructions on the "
"`Container Toolkit website`_ for installation steps."
msgstr ""
"To build and run GPU-accelerated containers, you also need install the "
"`NVIDIA Container Toolkit`_. Please follow the instructions on the "
"`Container Toolkit website`_ for installation steps."

#: ../../source/deployment/docker.rst:36
msgid ""
"Due to limitations with `snap <https://snapcraft.io/docs/home-outside-"
"home>`_, please make sure the Isaac Lab directory is placed under the "
"``/home`` directory tree when using docker."
msgstr ""
"Due to limitations with `snap <https://snapcraft.io/docs/home-outside-"
"home>`_, please make sure the Isaac Lab directory is placed under the "
"``/home`` directory tree when using docker."

#: ../../source/deployment/docker.rst:41
msgid "Obtaining the Isaac Sim Container"
msgstr "Obtaining the Isaac Sim Container"

#: ../../source/deployment/docker.rst:43
msgid ""
"Get access to the `Isaac Sim container`_ by joining the NVIDIA Developer "
"Program credentials."
msgstr ""
"Get access to the `Isaac Sim container`_ by joining the NVIDIA Developer "
"Program credentials."

#: ../../source/deployment/docker.rst:44
msgid ""
"Generate your `NGC API key`_ to access locked container images from NVIDIA "
"GPU Cloud (NGC)."
msgstr ""
"Generate your `NGC API key`_ to access locked container images from NVIDIA "
"GPU Cloud (NGC)."

#: ../../source/deployment/docker.rst:46
msgid ""
"This step requires you to create an NGC account if you do not already have "
"one."
msgstr ""
"This step requires you to create an NGC account if you do not already have "
"one."

#: ../../source/deployment/docker.rst:47
msgid ""
"You would also need to install the NGC CLI to perform operations from the "
"command line."
msgstr ""
"You would also need to install the NGC CLI to perform operations from the "
"command line."

#: ../../source/deployment/docker.rst:48
msgid ""
"Once you have your generated API key and have installed the NGC CLI, you "
"need to log in to NGC from the terminal."
msgstr ""
"Once you have your generated API key and have installed the NGC CLI, you "
"need to log in to NGC from the terminal."

#: ../../source/deployment/docker.rst:55
msgid "Use the command line to pull the Isaac Sim container image from NGC."
msgstr "Use the command line to pull the Isaac Sim container image from NGC."

#: ../../source/deployment/docker.rst:61
msgid ""
"For the username, enter ``$oauthtoken`` exactly as shown. It is a special "
"username that is used to authenticate with NGC."
msgstr ""
"For the username, enter ``$oauthtoken`` exactly as shown. It is a special "
"username that is used to authenticate with NGC."

#: ../../source/deployment/docker.rst:71
msgid "Directory Organization"
msgstr "Directory Organization"

#: ../../source/deployment/docker.rst:73
msgid ""
"The root of the Isaac Lab repository contains the ``docker`` directory that "
"has various files and scripts needed to run Isaac Lab inside a Docker "
"container. A subset of these are summarized below:"
msgstr ""
"The root of the Isaac Lab repository contains the ``docker`` directory that "
"has various files and scripts needed to run Isaac Lab inside a Docker "
"container. A subset of these are summarized below:"

#: ../../source/deployment/docker.rst:76
msgid ""
"``Dockerfile.base``: Defines the isaaclab image by overlaying Isaac Lab "
"dependencies onto the Isaac Sim Docker image. ``Dockerfiles`` which end with"
" something else, (i.e. ``Dockerfile.ros2``) build an `image_extension "
"<#isaac-lab-image-extensions>`_."
msgstr ""
"``Dockerfile.base``: Defines the isaaclab image by overlaying Isaac Lab "
"dependencies onto the Isaac Sim Docker image. ``Dockerfiles`` which end with"
" something else, (i.e. ``Dockerfile.ros2``) build an `image_extension "
"<#isaac-lab-image-extensions>`_."

#: ../../source/deployment/docker.rst:78
msgid ""
"``docker-compose.yaml``: Creates mounts to allow direct editing of Isaac Lab"
" code from the host machine that runs the container. It also creates several"
" named volumes such as ``isaac-cache-kit`` to store frequently re-used "
"resources compiled by Isaac Sim, such as shaders, and to retain logs, data, "
"and documents."
msgstr ""
"``docker-compose.yaml``: Creates mounts to allow direct editing of Isaac Lab"
" code from the host machine that runs the container. It also creates several"
" named volumes such as ``isaac-cache-kit`` to store frequently re-used "
"resources compiled by Isaac Sim, such as shaders, and to retain logs, data, "
"and documents."

#: ../../source/deployment/docker.rst:81
msgid ""
"``base.env``: Stores environment variables required for the ``base`` build "
"process and the container itself. ``.env`` files which end with something "
"else (i.e. ``.env.ros2``) define these for `image_extension <#isaac-lab-"
"image-extensions>`_."
msgstr ""
"``base.env``: Stores environment variables required for the ``base`` build "
"process and the container itself. ``.env`` files which end with something "
"else (i.e. ``.env.ros2``) define these for `image_extension <#isaac-lab-"
"image-extensions>`_."

#: ../../source/deployment/docker.rst:83
msgid ""
"``container.sh``: A script that wraps the ``docker compose`` command to "
"build the image and run the container."
msgstr ""
"``container.sh``: A script that wraps the ``docker compose`` command to "
"build the image and run the container."

#: ../../source/deployment/docker.rst:86
msgid "Running the Container"
msgstr "Running the Container"

#: ../../source/deployment/docker.rst:90
msgid ""
"The docker container copies all the files from the repository into the "
"container at the location ``/workspace/isaaclab`` at build time. This means "
"that any changes made to the files in the container would not normally be "
"reflected in the repository after the image has been built, i.e. after "
"``./container.sh start`` is run."
msgstr ""
"The docker container copies all the files from the repository into the "
"container at the location ``/workspace/isaaclab`` at build time. This means "
"that any changes made to the files in the container would not normally be "
"reflected in the repository after the image has been built, i.e. after "
"``./container.sh start`` is run."

#: ../../source/deployment/docker.rst:94
msgid ""
"For a faster development cycle, we mount the following directories in the "
"Isaac Lab repository into the container so that you can edit their files "
"from the host machine:"
msgstr ""
"For a faster development cycle, we mount the following directories in the "
"Isaac Lab repository into the container so that you can edit their files "
"from the host machine:"

#: ../../source/deployment/docker.rst:97
msgid ""
"``source``: This is the directory that contains the Isaac Lab source code."
msgstr ""
"``source``: This is the directory that contains the Isaac Lab source code."

#: ../../source/deployment/docker.rst:98
msgid ""
"``docs``: This is the directory that contains the source code for Isaac Lab "
"documentation. This is overlaid except for the ``_build`` subdirectory where"
" build artifacts are stored."
msgstr ""
"``docs``: This is the directory that contains the source code for Isaac Lab "
"documentation. This is overlaid except for the ``_build`` subdirectory where"
" build artifacts are stored."

#: ../../source/deployment/docker.rst:102
msgid ""
"The script ``container.sh`` wraps around three basic ``docker compose`` "
"commands. Each can accept an `image_extension argument <#isaac-lab-image-"
"extensions>`_, or else they will default to image_extension ``base``:"
msgstr ""
"The script ``container.sh`` wraps around three basic ``docker compose`` "
"commands. Each can accept an `image_extension argument <#isaac-lab-image-"
"extensions>`_, or else they will default to image_extension ``base``:"

#: ../../source/deployment/docker.rst:105
msgid ""
"``start``: This builds the image and brings up the container in detached "
"mode (i.e. in the background)."
msgstr ""
"``start``: This builds the image and brings up the container in detached "
"mode (i.e. in the background)."

#: ../../source/deployment/docker.rst:106
msgid ""
"``enter``: This begins a new bash process in an existing isaaclab container,"
" and which can be exited without bringing down the container."
msgstr ""
"``enter``: This begins a new bash process in an existing isaaclab container,"
" and which can be exited without bringing down the container."

#: ../../source/deployment/docker.rst:108
msgid ""
"``copy``: This copies the ``logs``, ``data_storage`` and ``docs/_build`` "
"artifacts, from the ``isaac-lab-logs``, ``isaac-lab-data`` and ``isaac-lab-"
"docs`` volumes respectively, to the ``docker/artifacts`` directory. These "
"artifacts persist between docker container instances and are shared between "
"image extensions."
msgstr ""
"``copy``: This copies the ``logs``, ``data_storage`` and ``docs/_build`` "
"artifacts, from the ``isaac-lab-logs``, ``isaac-lab-data`` and ``isaac-lab-"
"docs`` volumes respectively, to the ``docker/artifacts`` directory. These "
"artifacts persist between docker container instances and are shared between "
"image extensions."

#: ../../source/deployment/docker.rst:111
msgid "``stop``: This brings down the container and removes it."
msgstr "``stop``: This brings down the container and removes it."

#: ../../source/deployment/docker.rst:113
msgid ""
"The following shows how to launch the container in a detached state and "
"enter it:"
msgstr ""
"The following shows how to launch the container in a detached state and "
"enter it:"

#: ../../source/deployment/docker.rst:124
msgid ""
"To copy files from the base container to the host machine, you can use the "
"following command:"
msgstr ""
"To copy files from the base container to the host machine, you can use the "
"following command:"

#: ../../source/deployment/docker.rst:131
msgid ""
"The script ``container.sh`` provides a wrapper around this command to copy "
"the ``logs`` , ``data_storage`` and ``docs/_build`` directories to the "
"``docker/artifacts`` directory. This is useful for copying the logs, data "
"and documentation:"
msgstr ""
"The script ``container.sh`` provides a wrapper around this command to copy "
"the ``logs`` , ``data_storage`` and ``docs/_build`` directories to the "
"``docker/artifacts`` directory. This is useful for copying the logs, data "
"and documentation:"

#: ../../source/deployment/docker.rst:141
msgid "Python Interpreter"
msgstr "Python Interpreter"

#: ../../source/deployment/docker.rst:143
msgid ""
"The container uses the Python interpreter provided by Isaac Sim. This "
"interpreter is located at ``/isaac-sim/python.sh``. We set aliases inside "
"the container to make it easier to run the Python interpreter. You can use "
"the following commands to run the Python interpreter:"
msgstr ""
"The container uses the Python interpreter provided by Isaac Sim. This "
"interpreter is located at ``/isaac-sim/python.sh``. We set aliases inside "
"the container to make it easier to run the Python interpreter. You can use "
"the following commands to run the Python interpreter:"

#: ../../source/deployment/docker.rst:154
msgid "Understanding the mounted volumes"
msgstr "Understanding the mounted volumes"

#: ../../source/deployment/docker.rst:156
msgid ""
"The ``docker-compose.yaml`` file creates several named volumes that are "
"mounted to the container. These are summarized below:"
msgstr ""
"The ``docker-compose.yaml`` file creates several named volumes that are "
"mounted to the container. These are summarized below:"

#: ../../source/deployment/docker.rst:159
msgid ""
"``isaac-cache-kit``: This volume is used to store cached Kit resources "
"(`/isaac-sim/kit/cache` in container)"
msgstr ""
"``isaac-cache-kit``: This volume is used to store cached Kit resources "
"(`/isaac-sim/kit/cache` in container)"

#: ../../source/deployment/docker.rst:160
msgid ""
"``isaac-cache-ov``: This volume is used to store cached OV resources "
"(`/root/.cache/ov` in container)"
msgstr ""
"``isaac-cache-ov``: This volume is used to store cached OV resources "
"(`/root/.cache/ov` in container)"

#: ../../source/deployment/docker.rst:161
msgid ""
"``isaac-cache-pip``: This volume is used to store cached pip resources "
"(`/root/.cache/pip`` in container)"
msgstr ""
"``isaac-cache-pip``: This volume is used to store cached pip resources "
"(`/root/.cache/pip`` in container)"

#: ../../source/deployment/docker.rst:162
msgid ""
"``isaac-cache-gl``: This volume is used to store cached GLCache resources "
"(`/root/.cache/nvidia/GLCache` in container)"
msgstr ""
"``isaac-cache-gl``: This volume is used to store cached GLCache resources "
"(`/root/.cache/nvidia/GLCache` in container)"

#: ../../source/deployment/docker.rst:163
msgid ""
"``isaac-cache-compute``: This volume is used to store cached compute "
"resources (`/root/.nv/ComputeCache` in container)"
msgstr ""
"``isaac-cache-compute``: This volume is used to store cached compute "
"resources (`/root/.nv/ComputeCache` in container)"

#: ../../source/deployment/docker.rst:164
msgid ""
"``isaac-logs``: This volume is used to store logs generated by Omniverse. "
"(`/root/.nvidia-omniverse/logs` in container)"
msgstr ""
"``isaac-logs``: This volume is used to store logs generated by Omniverse. "
"(`/root/.nvidia-omniverse/logs` in container)"

#: ../../source/deployment/docker.rst:165
msgid ""
"``isaac-carb-logs``: This volume is used to store logs generated by carb. "
"(`/isaac-sim/kit/logs/Kit/Isaac-Sim` in container)"
msgstr ""
"``isaac-carb-logs``: This volume is used to store logs generated by carb. "
"(`/isaac-sim/kit/logs/Kit/Isaac-Sim` in container)"

#: ../../source/deployment/docker.rst:166
msgid ""
"``isaac-data``: This volume is used to store data generated by Omniverse. "
"(`/root/.local/share/ov/data` in container)"
msgstr ""
"``isaac-data``: This volume is used to store data generated by Omniverse. "
"(`/root/.local/share/ov/data` in container)"

#: ../../source/deployment/docker.rst:167
msgid ""
"``isaac-docs``: This volume is used to store documents generated by "
"Omniverse. (`/root/Documents` in container)"
msgstr "``isaac-docs``: 用于存储Omniverse生成的文档。（容器中的`/root/Documents`）"

#: ../../source/deployment/docker.rst:168
msgid ""
"``isaac-lab-docs``: This volume is used to store documentation of Isaac Lab "
"when built inside the container. (`/workspace/isaaclab/docs/_build` in "
"container)"
msgstr ""
"``isaac-lab-docs``: 在容器内建立Isaac Lab时，用于存储Isaac "
"Lab的文档。（容器中的`/workspace/isaaclab/docs/_build`）"

#: ../../source/deployment/docker.rst:169
msgid ""
"``isaac-lab-logs``: This volume is used to store logs generated by Isaac Lab"
" workflows when run inside the container. (`/workspace/isaaclab/logs` in "
"container)"
msgstr ""
"``isaac-lab-logs``: 在容器内运行Isaac Lab工作流时，用于存储Isaac "
"Lab生成的日志。（容器中的`/workspace/isaaclab/logs`）"

#: ../../source/deployment/docker.rst:170
msgid ""
"``isaac-lab-data``: This volume is used to store whatever data users may "
"want to preserve between container runs. (`/workspace/isaaclab/data_storage`"
" in container)"
msgstr ""
"``isaac-lab-data``: "
"用于存储用户在容器运行之间希望保留的任何数据。（容器中的`/workspace/isaaclab/data_storage`）"

#: ../../source/deployment/docker.rst:172
msgid ""
"To view the contents of these volumes, you can use the following command:"
msgstr "要查看这些卷的内容，可以使用以下命令："

#: ../../source/deployment/docker.rst:184
msgid "Isaac Lab Image Extensions"
msgstr "Isaac Lab图像扩展"

#: ../../source/deployment/docker.rst:186
msgid ""
"The produced image depends upon the arguments passed to ``./container.sh "
"start`` and ``./container.sh stop``. These commands accept an "
"``image_extension`` as an additional argument. If no argument is passed, "
"then these commands default to ``base``. Currently, the only valid "
"``image_extension`` arguments are (``base``, ``ros2``). Only one "
"``image_extension`` can be passed at a time, and the produced container will"
" be named ``isaaclab``."
msgstr ""
"生成的图像取决于传递给``./container.sh start``和``./container.sh "
"stop``的参数。这些命令接受``image_extension``作为附加参数。 如果未传递参数，则这些命令默认为``base``。 "
"目前，唯一有效的``image_extension``参数是（``base``, "
"``ros2``）。一次只能传递一个``image_extension``，生成的容器将被命名为``isaaclab``。"

#: ../../source/deployment/docker.rst:202
msgid ""
"The passed ``image_extension`` argument will build the image defined in "
"``Dockerfile.${image_extension}``, with the corresponding `profile`_ in the "
"``docker-compose.yaml`` and the envars from ``.env.${image_extension}`` in "
"addition to the ``.env.base``, if any."
msgstr ""
"传递的``image_extension``参数将构建``Dockerfile.${image_extension}``中定义的镜像，以及``docker-"
"compose.yaml``中的相应`profile`_和``.env.${image_extension}``中的环境变量，以及``.env.base``（如果有）。"

#: ../../source/deployment/docker.rst:207
msgid "ROS2 Image Extension"
msgstr "ROS2图片扩展"

#: ../../source/deployment/docker.rst:209
msgid ""
"In ``Dockerfile.ros2``, the container installs ROS2 Humble via an `apt "
"package`_, and it is sourced in the ``.bashrc``. The exact version is "
"specified by the variable ``ROS_APT_PACKAGE`` in the ``.env.ros2`` file, "
"defaulting to ``ros-base``. Other relevant ROS2 variables are also specified"
" in the ``.env.ros2`` file, including variables defining the `various "
"middleware`_ options. The container defaults to ``FastRTPS``, but "
"``CylconeDDS`` is also supported. Each of these middlewares can be `tuned`_ "
"using their corresponding ``.xml`` files under ``docker/.ros``."
msgstr ""
"在``Dockerfile.ros2``中，容器通过`apt package`_安装ROS2 Humble，并在``.bashrc``中进行源码。 "
"具体版本由``.env.ros2``文件中的变量``ROS_APT_PACKAGE``指定，默认为``ros-base``。 "
"``.env.ros2``文件还指定了其他相关的ROS2变量，包括定义`各种中间件`_选项的变量。 "
"容器默认为``FastRTPS``，但也支持``CylconeDDS``。 "
"每个中间件可以使用``docker/.ros``下的相应的``.xml``文件进行`tuning`_。"

#: ../../source/deployment/docker.rst:217
msgid "Known Issues"
msgstr "已知问题"

#: ../../source/deployment/docker.rst:220
msgid "Invalid mount config for type \"bind\""
msgstr "类型“bind”的无效挂载配置"

#: ../../source/deployment/docker.rst:222
msgid "If you see the following error when building the container:"
msgstr "如果在构建容器时出现以下错误："

#: ../../source/deployment/docker.rst:229
msgid ""
"This means that the ``.Xauthority`` file is not present in the home "
"directory of the host machine. The portion of the docker-compose.yaml that "
"enables this is commented out by default, so this shouldn't happen unless it"
" has been altered. This file is required for X11 forwarding to work. To fix "
"this, you can create an empty ``.Xauthority`` file in your home directory."
msgstr ""
"这意味着主机机器的主目录中没有``.Xauthority``文件。 docker-"
"compose.yaml中启用此功能的部分默认情况下已经被注释，因此除非它已被更改，否则不应发生。 此文件为使X11转发正常工作所必需。 "
"要修复这个问题，您可以在主目录中创建一个空``.Xauthority``文件。"

#: ../../source/deployment/docker.rst:238
msgid "A similar error but requires a different fix:"
msgstr "类似的错误，但需要不同的修复方法："

#: ../../source/deployment/docker.rst:245
msgid ""
"This means that the folder/files are either not present or not accessible on"
" the host machine. The portion of the docker-compose.yaml that enables this "
"is commented out by default, so this shouldn't happen unless it has been "
"altered. This usually happens when you have multiple docker versions "
"installed on your machine. To fix this, you can try the following:"
msgstr ""
"这意味着主机机器上要么缺少文件夹/文件，要么无法访问。 docker-"
"compose.yaml中启用此功能的部分默认情况下已被注释，因此除非它已被更改，否则不应发生。 这通常是由于您在计算机上安装了多个docker版本。 "
"要解决此问题，您可以尝试以下方法："

#: ../../source/deployment/docker.rst:250
msgid "Remove all docker versions from your machine."
msgstr "从您的计算机中删除所有docker版本。"

#: ../../source/deployment/docker.rst:259
msgid ""
"Install the latest version of docker based on the instructions in the setup "
"section."
msgstr "根据设置部分中的说明安装最新版本的docker。"

#: ../../source/deployment/docker.rst:262
msgid "WebRTC Streaming"
msgstr "WebRTC流"

#: ../../source/deployment/docker.rst:264
msgid ""
"When streaming the GUI from Isaac Sim, there are `several streaming "
"clients`_ available. There is a `known issue`_ when attempting to use WebRTC"
" streaming client on Google Chrome and Safari while running Isaac Sim inside"
" a container. To avoid this problem, we suggest using the Native Streaming "
"Client or using the Mozilla Firefox browser on which WebRTC works."
msgstr ""
"当从Isaac Sim中传输GUI时，有`多个传输客户端`_可用。 使用Google Chrome和Safari运行Isaac "
"Sim时，会出现`已知问题`_。 为了避免这个问题，我们建议使用Native Streaming "
"Client或在其上WebRTC可以正常工作的Mozilla Firefox浏览器。"

#: ../../source/deployment/docker.rst:269
msgid ""
"Streaming is the only supported method for visualizing the Isaac GUI from "
"within the container. The Omniverse Streaming Client is freely available "
"from the Omniverse app, and is easy to use. The other streaming methods "
"similarly require only a web browser. If users want to use X11 forwarding in"
" order to have the apps behave as local GUI windows, they can uncomment the "
"relevant portions in docker-compose.yaml."
msgstr ""
"从容器内可视化Isaac GUI的唯一支持方法是流式传输。 Omniverse Streaming "
"Client可以免费从Omniverse应用程序中获取，并且易于使用。 其他流传输方法同样只需要一个Web浏览器。 "
"如果用户想要使用X11转发以使应用程序像本地GUI窗口一样运行，可以取消注释docker-compose.yaml中的相关部分。"
