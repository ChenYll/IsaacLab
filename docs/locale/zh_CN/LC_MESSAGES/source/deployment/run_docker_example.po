# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/deployment/run_docker_example.rst:2
msgid "Running an example with Docker"
msgstr "在使用Docker运行示例"

#: ../../source/deployment/run_docker_example.rst:4
msgid ""
"From the root of the ``Isaac Lab`` repository,  the ``docker`` directory "
"contains all the Docker relevant files. These include the three files "
"(**Dockerfile**, **docker-compose.yaml**, **.env**) which are used by "
"Docker, and an additional script that we use to interface with them, "
"**container.sh**."
msgstr ""
"从``Isaac "
"Lab``存储库的根目录开始，``docker``目录包含所有与Docker相关的文件。这些文件包括三个文件（**Dockerfile**，**docker-"
"compose.yaml**，**.env**），这些文件由Docker使用，以及我们用来与它们进行交互的附加脚本，**container.sh**。"

#: ../../source/deployment/run_docker_example.rst:8
msgid ""
"In this tutorial, we will learn how to use the Isaac Lab Docker container "
"for development. For a detailed description of the Docker setup, including "
"installation and obtaining access to an Isaac Sim image, please reference "
"the :ref:`deployment-docker`. For a description of Docker in general, please"
" refer to `their official documentation <https://docs.docker.com/get-"
"started/overview/>`_."
msgstr ""
"在本教程中，我们将学习如何使用Isaac Lab Docker容器进行开发。有关Docker设置的详细说明，包括安装和获取对Isaac "
"Sim映像的访问权限，请参考：ref：`部署-"
"docker`。有关Docker的一般描述，请参阅`官方文档<https://docs.docker.com/get-"
"started/overview/>`_。"

#: ../../source/deployment/run_docker_example.rst:14
msgid "Building the Container"
msgstr "构建容器"

#: ../../source/deployment/run_docker_example.rst:16
msgid ""
"To build the Isaac Lab container from the root of the Isaac Lab repository, "
"we will run the following:"
msgstr "要从Isaac Lab存储库的根目录构建Isaac Lab容器，我们将运行以下命令："

#: ../../source/deployment/run_docker_example.rst:24
msgid ""
"The terminal will first pull the base IsaacSim image, build the Isaac Lab "
"image's additional layers on top of it, and run the Isaac Lab container. "
"This should take several minutes upon the first build but will be shorter in"
" subsequent runs as Docker's caching prevents repeated work. If we run the "
"command ``docker container ls`` on the terminal, the output will list the "
"containers that are running on the system. If everything has been set up "
"correctly, a container with the ``NAME`` **isaaclab** should appear, similar"
" to below:"
msgstr ""
"终端将首先提取基本的IsaacSim映像，在其上构建Isaac Lab映像的附加层，并运行Isaac "
"Lab容器。第一次构建可能需要几分钟，但在后续运行中将更短，因为Docker的缓存可以防止重复工作。如果我们在终端上运行命令``docker "
"container ls``，输出将列出在系统上运行的容器。如果一切设置正确，将会出现一个名称为**isaaclab**的容器，类似于下面的样子："

#: ../../source/deployment/run_docker_example.rst:36
msgid ""
"Once the container is up and running, we can enter it from our terminal."
msgstr "容器启动后，我们可以从终端进入这个容器"

#: ../../source/deployment/run_docker_example.rst:43
msgid ""
"On entering the Isaac Lab container, we are in the terminal as the "
"superuser, ``root``. This environment contains a copy of the Isaac Lab "
"repository, but also has access to the directories and libraries of Isaac "
"Sim. We can run experiments from this environment using a few convenient "
"aliases that have been put into the ``root`` **.bashrc**. For instance, we "
"have made the **isaaclab.sh** script usable from anywhere by typing its "
"alias ``isaaclab``."
msgstr ""
"进入Isaac Lab容器后，我们将作为超级用户``root``进入终端。此环境包含Isaac Lab存储库的副本，还可以访问Isaac "
"Sim的目录和库。我们可以使用一些方便的别名从这个环境中运行实验，这些别名已经放入了``root``**.bashrc** "
"中。例如，我们已经使**isaaclab.sh**脚本通过键入其别名``isaaclab``可以在任何地方使用。"

#: ../../source/deployment/run_docker_example.rst:48
msgid ""
"Additionally in the container, we have `bind mounted`_ the "
"``IsaacLab/source`` directory from the host machine. This means that if we "
"modify files under this directory from an editor on the host machine, the "
"changes are reflected immediately within the container without requiring us "
"to rebuild the Docker image."
msgstr ""
"此外，在容器中，我们已经将`IsaacLab/source`目录从主机机器`bind "
"mounted`_到容器中。这意味着如果我们在主机机器上的编辑器中修改了此目录下的文件，则这些更改将立即反映在容器中，而无需重新构建Docker镜像。"

#: ../../source/deployment/run_docker_example.rst:52
msgid ""
"We will now run a sample script from within the container to demonstrate how"
" to extract artifacts from the Isaac Lab Docker container."
msgstr "现在，我们将在容器内运行一个样本脚本，以演示如何从Isaac Lab Docker容器中提取工件。"

#: ../../source/deployment/run_docker_example.rst:56
msgid "The Code"
msgstr "代码"

#: ../../source/deployment/run_docker_example.rst:58
msgid ""
"The tutorial corresponds to the ``log_time.py`` script in the "
"``IsaacLab/source/standalone/tutorials/00_sim`` directory."
msgstr ""
"本教程对应于``IsaacLab/source/standalone/tutorials/00_sim``目录中的``log_time.py``脚本。"

#: ../../source/deployment/run_docker_example.rst
msgid "Code for log_time.py"
msgstr "log_time.py的代码"

#: ../../source/deployment/run_docker_example.rst:70
msgid "The Code Explained"
msgstr "代码的解释"

#: ../../source/deployment/run_docker_example.rst:72
msgid ""
"The Isaac Lab Docker container has several `volumes`_ to facilitate "
"persistent storage between the host computer and the container. One such "
"volume is the ``/workspace/isaaclab/logs`` directory. The ``log_time.py`` "
"script designates this directory as the location to which a ``log.txt`` "
"should be written:"
msgstr ""
"Isaac Lab Docker容器具有多个`volumes`_以方便主机计算机和容器之间的持久存储。其中一个卷是``/ workspace / "
"isaaclab / logs``目录。``log_time.py``脚本将此目录指定为写入``log.txt``的位置："

#: ../../source/deployment/run_docker_example.rst:82
msgid ""
"As the comments note, :func:`os.path.abspath()` will prepend "
"``/workspace/isaaclab`` because in the Docker container all python execution"
" is done through ``/workspace/isaaclab/isaaclab.sh``. The output will be a "
"file, ``log.txt``, with the ``sim_time`` written on a newline at every "
"simulation step:"
msgstr ""
"如注释所述，:func:`os.path.abspath()`将在前面添加``/ workspace / "
"isaaclab``，因为在Docker容器中所有python执行都是通过``/ workspace / isaaclab / "
"isaaclab.sh``进行的。输出将是一个文件，``log.txt``，每次模拟步骤都会写入``sim_time``的换行符："

#: ../../source/deployment/run_docker_example.rst:93
msgid "Executing the Script"
msgstr "执行脚本"

#: ../../source/deployment/run_docker_example.rst:95
msgid ""
"We will execute the script to produce a log, adding a ``--headless`` flag to"
" our execution to prevent a GUI:"
msgstr "我们将执行脚本以生成日志，添加``--headless``标志以防止GUI："

#: ../../source/deployment/run_docker_example.rst:102
msgid ""
"Now ``log.txt`` will have been produced at "
"``/workspace/isaaclab/logs/docker_tutorial``. If we exit the container by "
"typing ``exit``, we will return to ``IsaacLab/docker`` in our host terminal "
"environment. We can then enter the following command to retrieve our logs "
"from the Docker container and put them on our host machine:"
msgstr ""
"现在，``log.txt``将在``/workspace/isaaclab/logs/docker_tutorial``中生成。如果我们键入``exit``退出容器，我们将返回到主机终端环境中的``IsaacLab/docker``。然后，我们可以输入以下命令从Docker容器中检索日志并将它们放在我们的主机机器上："

#: ../../source/deployment/run_docker_example.rst:111
msgid ""
"We will see a terminal readout reporting the artifacts we have retrieved "
"from the container. If we navigate to "
"``/isaaclab/docker/artifacts/logs/docker_tutorial``, we will see a copy of "
"the ``log.txt`` file which was produced by the script above."
msgstr ""
"我们将看到终端输出报告我们从容器中检索的工件。如果我们导航到``/isaaclab/docker/artifacts/logs/docker_tutorial``，我们将看到上面脚本生成的``log.txt``文件的副本。"

#: ../../source/deployment/run_docker_example.rst:115
msgid ""
"Each of the directories under ``artifacts`` corresponds to Docker `volumes`_"
" mapped to directories within the container and the ``container.sh copy`` "
"command copies them from those `volumes`_ to these directories."
msgstr ""
"``artifacts``下的每个目录对应于容器内映射到目录的Docker`volumes`_，``container.sh "
"copy``命令将它们从这些`volumes`_复制到这些目录中。"

#: ../../source/deployment/run_docker_example.rst:118
msgid ""
"We could return to the Isaac Lab Docker terminal environment by running "
"``container.sh enter`` again, but we have retrieved our logs and wish to go "
"inspect them. We can stop the Isaac Lab Docker container with the following "
"command:"
msgstr ""
"我们可以通过再次运行``container.sh enter``返回到Isaac Lab "
"Docker终端环境，但我们已经检索到我们的日志并希望去检查它们。我们可以使用以下命令停止Isaac Lab Docker容器："

#: ../../source/deployment/run_docker_example.rst:126
msgid ""
"This will bring down the Docker Isaac Lab container. The image will persist "
"and remain available for further use, as will the contents of any "
"`volumes`_. If we wish to free up the disk space taken by the image, "
"(~20.1GB), and do not mind repeating the build process when we next run "
"``./container.sh start``, we may enter the following command to delete the "
"**isaaclab** image:"
msgstr ""
"这将关闭Docker Isaac "
"Lab容器。镜像将保持存在并继续可用，`volumes`_的内容也将保持存在。如果我们希望释放镜像占用的磁盘空间（~20.1GB），并且不介意在下次运行``./container.sh"
" start``时重复构建过程，则可以键入以下命令来删除**isaaclab**镜像："

#: ../../source/deployment/run_docker_example.rst:134
msgid ""
"A subsequent run of ``docker image ls``` will show that the image tagged "
"**isaaclab** is now gone. We can repeat the process for the underlying "
"NVIDIA container if we wish to free up more space. If a more powerful method"
" of freeing resources from Docker is desired, please consult the "
"documentation for the `docker prune`_ commands."
msgstr ""
"接下来再次运行``docker image "
"ls```将显示标记为**isaaclab**的镜像现在已经消失。如果我们希望释放更多空间，可以对底层的NVIDIA容器执行相同的操作。如果需要一种更强大的从Docker释放资源的方法，请查阅`docker"
" prune`_命令的文档。"
