# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:4
msgid "From OmniIsaacGymEnvs"
msgstr "从 OmniIsaacGymEnvs"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:9
msgid ""
"`OmniIsaacGymEnvs`_ was a reinforcement learning framework using the Isaac "
"Sim platform. Features from OmniIsaacGymEnvs have been integrated into the "
"Isaac Lab framework. We have updated OmniIsaacGymEnvs to Isaac Sim version "
"4.0.0 to support the migration process to Isaac Lab. Moving forward, "
"OmniIsaacGymEnvs will be deprecated and future development will continue in "
"Isaac Lab."
msgstr ""
"`OmniIsaacGymEnvs`_ 是一个使用Isaac Sim平台的强化学习框架。来自OmniIsaacGymEnvs的功能已集成到Isaac "
"Lab框架中。我们已将OmniIsaacGymEnvs更新到Isaac Sim版本4.0.0，以支持迁移流程到Isaac "
"Lab。未来，OmniIsaacGymEnvs将被弃用，未来的开发将继续在Isaac Lab中进行。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:17
msgid "Task Config Setup"
msgstr "任务配置设置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:19
msgid ""
"In OmniIsaacGymEnvs, task config files were defined in ``.yaml`` format. "
"With Isaac Lab, configs are now specified using a specialized Python class "
":class:`~omni.isaac.lab.utils.configclass`. The "
":class:`~omni.isaac.lab.utils.configclass` module provides a wrapper on top "
"of Python's ``dataclasses`` module. Each environment should specify its own "
"config class annotated by ``@configclass`` that inherits from the "
":class:`~envs.DirectRLEnvCfg` class, which can include simulation "
"parameters, environment scene parameters, robot parameters, and task-"
"specific parameters."
msgstr ""
"在OmniIsaacGymEnvs中，任务配置文件是以``.yaml``格式定义的。在Isaac Lab中，现在使用一个专门的Python类 "
":class:`~omni.isaac.lab.utils.configclass` "
"来指定配置。:class:`~omni.isaac.lab.utils.configclass` "
"模块在Python的``dataclasses``模块之上提供了一个包装器。每个环境都应指定其自己的配置类，该类由``@configclass``注释，并且继承自:class:`~envs.DirectRLEnvCfg`类，可以包括模拟参数、环境场景参数、机器人参数和特定任务参数。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:26
msgid "Below is an example skeleton of a task config class:"
msgstr "以下是任务配置类的范例框架："

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:52
msgid "Simulation Config"
msgstr "模拟配置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:54
msgid ""
"Simulation related parameters are defined as part of the "
":class:`~omni.isaac.lab.sim.SimulationCfg` class, which is a "
":class:`~omni.isaac.lab.utils.configclass` module that holds simulation "
"parameters such as ``dt``, ``device``, and ``gravity``. Each task config "
"must have a variable named ``sim`` defined that holds the type "
":class:`~omni.isaac.lab.sim.SimulationCfg`."
msgstr ""
"与模拟相关的参数定义在:class:`~omni.isaac.lab.sim.SimulationCfg`类中，这是一个:class:`~omni.isaac.lab.utils.configclass`模块，包含模拟参数，如``dt``、``device``和``gravity``。每个任务配置必须有一个名为``sim``的变量来定义一个类型为:class:`~omni.isaac.lab.sim.SimulationCfg`的对象。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:59
msgid ""
"Simulation parameters for articulations and rigid bodies such as "
"``num_position_iterations``, ``num_velocity_iterations``, "
"``contact_offset``, ``rest_offset``, ``bounce_threshold_velocity``, "
"``max_depenetration_velocity`` can all be specified on a per-actor basis in "
"the config class for each individual articulation and rigid body."
msgstr ""
"对于关节和刚性体的模拟参数，如``num_position_iterations``、``num_velocity_iterations``、``contact_offset``、``rest_offset``、``bounce_threshold_velocity``、``max_depenetration_velocity``，都可以在每个独立关节和刚性体的配置类中指定。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:63
msgid ""
"When running simulation on the GPU, buffers in PhysX require pre-allocation "
"for computing and storing information such as contacts, collisions and "
"aggregate pairs. These buffers may need to be adjusted depending on the "
"complexity of the environment, the number of expected contacts and "
"collisions, and the number of actors in the environment. The "
":class:`~omni.isaac.lab.sim.PhysxCfg` class provides access for setting the "
"GPU buffer dimensions."
msgstr ""
"在GPU上运行模拟时，PhysX中的缓冲区需要进行预先分配，用于计算和存储接触、碰撞和聚合对等信息。这些缓冲区可能需要根据环境的复杂性、预期接触和碰撞的数量以及环境中的参与者数量进行调整。:class:`~omni.isaac.lab.sim.PhysxCfg`类提供了访问设置GPU缓冲区尺寸的功能。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:116
msgid ""
"Parameters such as ``add_ground_plane`` and ``add_distant_light`` are now "
"part of the task logic when creating the scene. ``enable_cameras`` is now a "
"command line argument ``--enable_cameras`` that can be passed directly to "
"the training script."
msgstr ""
"现在的参数，比如``add_ground_plane``和``add_distant_light``，都是在创建场景时的任务逻辑的一部分。``enable_cameras``现在是一个命令行参数``--enable_cameras``，可以直接传递给训练脚本。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:121
msgid "Scene Config"
msgstr "场景配置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:123
msgid ""
"The :class:`~omni.isaac.lab.scene.InteractiveSceneCfg` class can be used to "
"specify parameters related to the scene, such as the number of environments "
"and the spacing between environments. Each task config must have a variable "
"named ``scene`` defined that holds the type "
":class:`~omni.isaac.lab.scene.InteractiveSceneCfg`."
msgstr ""
":class:`~omni.isaac.lab.scene.InteractiveSceneCfg`类可以指定与场景相关的参数，比如环境的数量和环境之间的间距。每个任务配置必须有一个名为``scene``的变量来定义一个类型为:class:`~omni.isaac.lab.scene.InteractiveSceneCfg`的对象。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:138
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:473
msgid "Task Config"
msgstr "任务配置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:140
msgid ""
"Each environment should specify its own config class that holds task "
"specific parameters, such as the dimensions of the observation and action "
"buffers. Reward term scaling parameters can also be specified in the config "
"class."
msgstr "每个环境都应该指定自己的配置类，其中包括特定任务的参数，比如观察和动作缓冲区的尺寸。还可以在配置类中指定奖励项的缩放参数。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:143
msgid ""
"In Isaac Lab, the ``controlFrequencyInv`` parameter has been renamed to "
"``decimation``, which must be specified as a parameter in the config class."
msgstr "在Isaac Lab中，``controlFrequencyInv``参数被重命名为``decimation``，必须在配置类中指定。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:146
msgid ""
"In addition, the maximum episode length parameter (now ``episode_length_s``)"
" is in seconds instead of steps as it was in OmniIsaacGymEnvs. To convert "
"between step count to seconds, use the equation: ``episode_length_s = dt * "
"decimation * num_steps``."
msgstr ""
"此外，最大的episode长度参数（现在是``episode_length_s``）是以秒为单位，而不是像在OmniIsaacGymEnvs中的步数那样。要在步数和秒之间进行转换，使用以下公式:"
" ``episode_length_s = dt * decimation * num_steps``。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:150
msgid "The following parameters must be set for each environment config:"
msgstr "每个环境配置都必须设置以下参数："

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:162
msgid "RL Config Setup"
msgstr "强化学习配置设置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:164
msgid ""
"RL config files for the rl_games library can continue to be defined in "
"``.yaml`` files in Isaac Lab. Most of the content of the config file can be "
"copied directly from OmniIsaacGymEnvs. Note that in Isaac Lab, we do not use"
" hydra to resolve relative paths in config files. Please replace any "
"relative paths such as ``${....device}`` with the actual values of the "
"parameters."
msgstr ""
"在Isaac "
"Lab中，rl_games库的配置文件仍然可以在``.yaml``文件中定义。大部分配置文件的内容可以直接从OmniIsaacGymEnvs中复制过来。请注意，在Isaac"
" Lab中，我们不使用hydra来解析配置文件中的相对路径。请用实际参数值替换任何相对路径，比如``${....device}``。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:169
msgid ""
"Additionally, the observation and action clip ranges have been moved to the "
"RL config file. For any ``clipObservations`` and ``clipActions`` parameters "
"that were defined in the IsaacGymEnvs task config file, they should be moved"
" to the RL config file in Isaac Lab."
msgstr ""
"此外，观察和动作的剪切范围已经移到了RL配置文件中。对于在IsaacGymEnvs任务配置文件中定义的任何``clipObservations``和``clipActions``参数，现在应该将它们移动到Isaac"
" Lab的RL配置文件中。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:175
msgid "IsaacGymEnvs Task Config"
msgstr "IsaacGymEnvs任务配置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:175
msgid "Isaac Lab RL Config"
msgstr "Isaac Lab RL配置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:187
msgid "Environment Creation"
msgstr "环境创建"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:189
msgid ""
"In OmniIsaacGymEnvs, environment creation generally happened in the "
"``set_up_scene()`` API, which involved creating the initial environment, "
"cloning the environment, filtering collisions, adding the ground plane and "
"lights, and creating the ``View`` classes for the actors."
msgstr ""
"在OmniIsaacGymEnvs中，环境的创建通常在``set_up_scene()``API中进行，这涉及创建初始环境、克隆环境、过滤碰撞、添加地面和光线，并为参与者创建``View``类。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:193
msgid ""
"Similar functionality is performed in Isaac Lab in the ``_setup_scene()`` "
"API. The main difference is that the base class ``_setup_scene()`` no longer"
" performs operations for cloning the environment and adding ground plane and"
" lights. Instead, these operations should now be implemented in individual "
"tasks' ``_setup_scene`` implementations to provide more flexibility around "
"the scene setup process."
msgstr ""
"在Isaac "
"Lab中，类似的功能在``_setup_scene()``API中执行。主要区别在于基类``_setup_scene()``不再执行克隆环境和添加地面和光线的操作。相反，这些操作现在应该在各个任务的``_setup_scene``实现中实现，以提供更灵活的场景设置过程。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:199
msgid ""
"Also note that by defining an ``Articulation`` or ``RigidObject`` object, "
"the actors will be added to the scene by parsing the ``spawn`` parameter in "
"the actor config and a ``View`` class will automatically be created for the "
"actor. This avoids the need to separately define an ``ArticulationView`` or "
"``RigidPrimView`` object for the actors."
msgstr ""
"还要注意，通过定义``Articulation``或``RigidObject``对象，将根据actor配置中的``spawn``参数将actor添加到场景，并自动为actor创建``View``类。这避免了需要为actor单独定义``ArticulationView``或``RigidPrimView``对象的需要。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:206
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:332
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:348
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:436
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:478
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:569
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:622
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:661
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:699
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:756
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:810
msgid "OmniIsaacGymEnvs"
msgstr "OmniIsaacGymEnvs"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:206
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:332
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:348
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:436
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:478
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:569
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:622
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:699
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:756
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:810
msgid "Isaac Lab"
msgstr "Isaac Lab"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:226
msgid "Ground Plane"
msgstr "地面"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:228
msgid ""
"In addition to the above example, more sophisticated ground planes can be "
"defined using the :class:`~terrains.TerrainImporterCfg` class."
msgstr "除了上面的例子之外，更复杂的地面可以使用:class:`~terrains.TerrainImporterCfg`类进行定义。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:247
msgid ""
"The terrain can then be added to the scene in ``_setup_scene(self)`` by "
"referencing the ``TerrainImporterCfg`` object:"
msgstr "然后，地形可以通过引用``TerrainImporterCfg``对象在``_setup_scene(self)``中添加到场景中："

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:259
msgid "Actors"
msgstr "参与者"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:261
msgid ""
"In Isaac Lab, each Articulation and Rigid Body actor can have its own config"
" class. The :class:`~omni.isaac.lab.assets.ArticulationCfg` class can be "
"used to define parameters for articulation actors, including file path, "
"simulation parameters, actuator properties, and initial states."
msgstr ""
"在Isaac "
"Lab中，每个关节和刚体actor可以有自己的配置类。:class:`~omni.isaac.lab.assets.ArticulationCfg`类可用于定义关节actor的参数，包括文件路径、模拟参数、执行器属性和初始状态。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:305
msgid ""
"Within the :class:`~assets.ArticulationCfg`, the ``spawn`` attribute can be "
"used to add the robot to the scene by specifying the path to the robot file."
" In addition, the "
":class:`~omni.isaac.lab.sim.schemas.RigidBodyPropertiesCfg` class can be "
"used to specify simulation properties for the rigid bodies in the "
"articulation. Similarly, the "
":class:`~omni.isaac.lab.sim.schemas.ArticulationRootPropertiesCfg` class can"
" be used to specify simulation properties for the articulation. The joint "
"properties are now specified as part of the ``actuators`` dictionary using "
":class:`~actuators.ImplicitActuatorCfg`. Joints with the same properties can"
" be grouped into regex expressions or provided as a list of names or "
"expressions."
msgstr ""
"在:class:`~assets.ArticulationCfg`内部，``spawn``属性可以用于通过指定机器人文件的路径将机器人添加到场景。此外，:class:`~omni.isaac.lab.sim.schemas.RigidBodyPropertiesCfg`类可用于为关节中的刚体指定模拟属性。同样，:class:`~omni.isaac.lab.sim.schemas.ArticulationRootPropertiesCfg`类可以用于为关节指定模拟属性。使用:class:`~actuators.ImplicitActuatorCfg`，相同属性的关节可以被分组到正则表达式中，或者提供一个名称或表达式列表。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:313
msgid ""
"Actors are added to the scene by simply calling ``self.cartpole = "
"Articulation(self.cfg.robot_cfg)``, where ``self.cfg.robot_cfg`` is an "
":class:`~assets.ArticulationCfg` object. Once initialized, they should also "
"be added to the :class:`~scene.InteractiveScene` by calling "
"``self.scene.articulations[\"cartpole\"] = self.cartpole`` so that the "
":class:`~scene.InteractiveScene` can traverse through actors in the scene "
"for writing values to the simulation and resetting."
msgstr ""
"通过简单调用``self.cartpole = "
"Articulation(self.cfg.robot_cfg)``来将参与者添加到场景，其中``self.cfg.robot_cfg``是一个:class:`~assets.ArticulationCfg`对象。初始化后，它们也应该被添加到:class:`~scene.InteractiveScene`中，通过调用``self.scene.articulations[\"cartpole\"]"
" = "
"self.cartpole``，从而使:class:`~scene.InteractiveScene`能够遍历场景中的actors，以便向模拟中写入值并进行重置。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:321
msgid "Accessing States from Simulation"
msgstr "从模拟中获取状态"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:323
msgid ""
"APIs for accessing physics states in Isaac Lab require the creation of an "
":class:`~assets.Articulation` or :class:`~assets.RigidObject` object. "
"Multiple objects can be initialized for different articulations or rigid "
"bodies in the scene by defining corresponding "
":class:`~assets.ArticulationCfg` or :class:`~assets.RigidObjectCfg` config, "
"as outlined in the section above. This replaces the previously used "
":class:`~omni.isaac.core.articulations.ArticulationView` and "
":class:`omni.isaac.core.prims.RigidPrimView` classes used in "
"OmniIsaacGymEnvs."
msgstr ""
"在Isaac "
"Lab中，访问物理状态的API需要创建一个:class:`~assets.Articulation`或:class:`~assets.RigidObject`对象。可以通过定义对应的:class:`~assets.ArticulationCfg`或:class:`~assets.RigidObjectCfg`配置来初始化不同的关节或刚体对象。这取代了在OmniIsaacGymEnvs中使用的:class:`~omni.isaac.core.articulations.ArticulationView`和:class:`omni.isaac.core.prims.RigidPrimView`类。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:329
msgid "However, functionality between the classes are similar:"
msgstr "但是，这些类之间的功能是相似的:"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:340
msgid ""
"In Isaac Lab, :class:`~assets.Articulation` and :class:`~assets.RigidObject`"
" classes both have a ``data`` class. The data classes "
"(:class:`~assets.ArticulationData` and :class:`~assets.RigidObjectData`) "
"contain buffers that hold the states for the articulation and rigid objects "
"and provide a more performant way of retrieving states from the actors."
msgstr ""
"在Isaac "
"Lab中，:class:`~assets.Articulation`和:class:`~assets.RigidObject`类都有一个``data``类。data类（:class:`~assets.ArticulationData`和:class:`~assets.RigidObjectData`）包含了保存关节和刚体状态的缓冲区，并提供了一种更高效的方式从actors中检索状态。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:345
msgid ""
"Apart from some renamings of APIs, setting states for actors can also be "
"performed similarly between OmniIsaacGymEnvs and Isaac Lab."
msgstr "除了一些API的重命名，设置actors的状态也可以在OmniIsaacGymEnvs和Isaac Lab中类似地进行。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:357
msgid ""
"In Isaac Lab, ``root_pose`` and ``root_velocity`` have been combined into "
"single buffers and no longer split between ``root_position``, "
"``root_orientation``, ``root_linear_velocity`` and "
"``root_angular_velocity``."
msgstr ""
"在Isaac Lab中，``root_pose`` 和 ``root_velocity`` 已经合并为单个缓冲区，不再分为 "
"``root_position``、``root_orientation``、``root_linear_velocity`` 和 "
"``root_angular_velocity``。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:367
msgid "Creating a New Environment"
msgstr "创建一个新的环境"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:369
msgid ""
"Each environment in Isaac Lab should be in its own directory following this "
"structure:"
msgstr "Isaac Lab中的每个环境都应该按照以下结构放在自己的目录中:"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:380
msgid "``my_environment`` is the root directory of the task."
msgstr "``my_environment`` 是任务的根目录。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:381
msgid ""
"``my_environment/agents`` is the directory containing all RL config files "
"for the task. Isaac Lab supports multiple RL libraries that can each have "
"its own individual config file."
msgstr ""
"``my_environment/agents`` 是包含任务的所有RL配置文件的目录。Isaac "
"Lab支持多个RL库，每个库可以有自己独立的配置文件。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:383
msgid ""
"``my_environment/__init__.py`` is the main file that registers the "
"environment with the Gymnasium interface. This allows the training and "
"inferencing scripts to find the task by its name. The content of this file "
"should be as follow:"
msgstr ""
"``my_environment/__init__.py`` "
"是将环境注册到Gymnasium接口的主文件。这使得训练和推理脚本可以通过名称找到任务。此文件的内容应该如下:"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:408
msgid ""
"``my_environment/my_env.py`` is the main python script that implements the "
"task logic and task config class for the environment."
msgstr "``my_environment/my_env.py`` 是实现任务逻辑和环境的主要Python脚本。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:413
msgid "Task Logic"
msgstr "任务逻辑"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:415
#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:564
msgid ""
"The ``post_reset`` API in OmniIsaacGymEnvs is no longer required in Isaac "
"Lab. Everything that was previously done in ``post_reset`` can be done in "
"the ``__init__`` method after executing the base class's ``__init__``. At "
"this point, simulation has already started."
msgstr ""
"在Isaac "
"Lab中，不再需要``post_reset``API。以往在``post_reset``中所做的所有操作现在可以在执行基类的``__init__``方法后的``__init__``方法中完成。此时，模拟已经开始。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:419
msgid ""
"In OmniIsaacGymEnvs, due to limitations of the GPU APIs, resets could not be"
" performed based on states of the current step. Instead, resets have to be "
"performed at the beginning of the next time step. This restriction has been "
"eliminated in Isaac Lab, and thus, tasks follow the correct workflow of "
"applying actions, stepping simulation, collecting states, computing dones, "
"calculating rewards, performing resets, and finally computing observations. "
"This workflow is done automatically by the framework such that a "
"``post_physics_step`` API is not required in the task. However, individual "
"tasks can override the ``step()`` API to control the workflow."
msgstr ""
"在OmniIsaacGymEnvs中，由于GPU API的限制，重置不能根据当前步骤的状态进行。相反，重置必须在下一个时间步骤的开始时执行。在Isaac"
" "
"Lab中，这个限制已经被取消，因此任务遵循应用动作、模拟步进、收集状态、计算done、计算奖励、执行重置和最终计算观察结的正确工作流程。这个工作流程是由框架自动完成的，因此任务不需要``post_physics_step``API。但是，每个任务都可以覆盖``step()``API以控制工作流程。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:426
msgid ""
"In Isaac Lab, we also separate the ``pre_physics_step`` API for processing "
"actions from the policy with the ``apply_action`` API, which sets the "
"actions into the simulation. This provides more flexibility in controlling "
"when actions should be written to simulation when ``decimation`` is used. "
"The ``pre_physics_step`` method will be called once per step before stepping"
" simulation. The ``apply_actions`` method will be called ``decimation`` "
"number of times for each RL step, once before each simulation step call."
msgstr ""
"在Isaac实验室中，我们还将``pre_physics_step`` API与``apply_action`` "
"API分开处理，前者用于处理来自策略的动作，后者则将动作设置到模拟过程中。这样可以更灵活地控制在何时使用``decimation``时将动作写入模拟过程中。在每一步之前，``pre_physics_step``方法都将被调用一次。而``apply_actions``方法将在每个RL步骤之前调用``decimation``次，即在每次模拟调用之前调用一次。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:433
msgid "The ordering of the calls are as follow:"
msgstr "调用的顺序如下："

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:451
msgid ""
"With this approach, resets are performed based on actions from the current "
"step instead of the previous step. Observations will also be computed with "
"the correct states after resets."
msgstr "采用这种方法，重置是根据当前步骤的动作而不是上一步来执行的。重置之后还可以根据正确的状态计算观察值。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:454
msgid "We have also performed some renamings of APIs:"
msgstr "我们还对API进行了一些重命名："

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:456
msgid "``set_up_scene(self, scene)`` --> ``_setup_scene(self)``"
msgstr "``set_up_scene(self, scene)`` --> ``_setup_scene(self)``"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:457
msgid "``post_reset(self)`` --> ``__init__(...)``"
msgstr "``post_reset(self)`` --> ``__init__(...)``"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:458
msgid ""
"``pre_physics_step(self, actions)`` --> ``_pre_physics_step(self, actions)``"
" and ``_apply_action(self)``"
msgstr ""
"``pre_physics_step(self, actions)`` --> ``_pre_physics_step(self, actions)``"
" and ``_apply_action(self)``"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:459
msgid "``reset_idx(self, env_ids)`` --> ``_reset_idx(self, env_ids)``"
msgstr "``reset_idx(self, env_ids)`` --> ``_reset_idx(self, env_ids)``"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:460
msgid ""
"``get_observations(self)`` --> ``_get_observations(self)`` - "
"``_get_observations()`` should now return a dictionary ``{\"policy\": obs}``"
msgstr ""
"``get_observations(self)`` --> ``_get_observations(self)`` - "
"``_get_observations()``现在应该返回一个字典``{\"policy\": obs}``"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:461
msgid ""
"``calculate_metrics(self)`` --> ``_get_rewards(self)`` - ``_get_rewards()`` "
"should now return the reward buffer"
msgstr ""
"``calculate_metrics(self)`` --> ``_get_rewards(self)`` - "
"``_get_rewards()``现在应该返回奖励缓冲区"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:462
msgid ""
"``is_done(self)`` --> ``_get_dones(self)`` - ``_get_dones()`` should now "
"return 2 buffers: ``reset`` and ``time_out`` buffers"
msgstr ""
"``is_done(self)`` --> ``_get_dones(self)`` - "
"``_get_dones()``现在应该返回两个缓冲区：``reset`` 和 ``time_out`` 缓冲区"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:467
msgid "Putting It All Together"
msgstr "将所有内容整合在一起"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:469
msgid ""
"The Cartpole environment is shown here in completion to fully show the "
"comparison between the OmniIsaacGymEnvs implementation and the Isaac Lab "
"implementation."
msgstr "Cartpole环境在此处已经完全展示，以充分展示OmniIsaacGymEnvs实现和Isaac Lab实现之间的比较。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:475
msgid ""
"Task config in Isaac Lab can be split into the main task configuration class"
" and individual config objects for the actors."
msgstr "Isaac Lab中的任务配置可以分为主任务配置类和用于执行者的单独配置对象。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:562
msgid "Task Setup"
msgstr "任务设置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:614
msgid "Scene Setup"
msgstr "场景设置"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:616
msgid ""
"The ``set_up_scene`` method in OmniIsaacGymEnvs has been replaced by the "
"``_setup_scene`` API in the task class in Isaac Lab. Additionally, scene "
"cloning and collision filtering have been provided as APIs for the task "
"class to call when necessary. Similarly, adding ground plane and lights "
"should also be taken care of in the task class. Adding actors to the scene "
"has been replaced by ``self.scene.articulations[\"cartpole\"] = "
"self.cartpole``."
msgstr ""
"在OmniIsaacGymEnvs中的``set_up_scene``方法已经被Isaac "
"Lab的任务类中的``_setup_scene``API所取代。此外，场景克隆和碰撞筛选已经作为任务类调用的API提供。同样地，添加地平面和光源也应该由任务类负责。将演员添加到场景已经被``self.scene.articulations[\"cartpole\"]"
" = self.cartpole``取代。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:654
msgid "Pre-Physics Step"
msgstr "预物理步骤"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:656
msgid ""
"Note that resets are no longer performed in the ``pre_physics_step`` API. In"
" addition, the separation of the ``_pre_physics_step`` and ``_apply_action``"
" methods allow for more flexibility in processing the action buffer and "
"setting actions into simulation."
msgstr ""
"请注意，重置现在不再在``pre_physics_step`` "
"API中执行。此外，``_pre_physics_step``和``_apply_action``方法的分离允许在处理动作缓冲区和将动作设置到模拟中更灵活。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:661
msgid "IsaacLab"
msgstr "Isaac Lab"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:690
msgid "Dones and Resets"
msgstr "重置与完成"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:692
msgid ""
"In Isaac Lab, the ``dones`` are computed in the ``_get_dones()`` method and "
"should return two variables: ``resets`` and ``time_out``. The "
"``_reset_idx()`` method is also called after stepping simulation instead of "
"before, as it was done in OmniIsaacGymEnvs. The ``progress_buf`` tensor has "
"been renamed to ``episode_length_buf`` in Isaac Lab and the bookkeeping is "
"now done automatically by the framework. Task implementations no longer need"
" to increment or reset the ``episode_length_buf`` buffer."
msgstr ""
"在Isaac实验室中，``dones``是在``_get_dones()``方法中计算的，并应返回两个变量：``resets`` 和 "
"``time_out``。``_reset_idx()``方法也是在模拟后调用的，而不是像在OmniIsaacGymEnvs中那样是在之前。``progress_buf``张量在Isaac实验室中已被重命名为``episode_length_buf``，并且现在由框架自动完成簿记。任务实现不再需要增加或重置``episode_length_buf``缓冲区。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:749
msgid "Rewards"
msgstr "奖励"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:751
msgid ""
"In Isaac Lab, rewards are implemented in the ``_get_rewards`` API and should"
" return the reward buffer instead of assigning it directly to "
"``self.rew_buf``. Computation in the reward function can also be performed "
"using pytorch jit through defining functions with the ``@torch.jit.script`` "
"annotation."
msgstr ""
"在Isaac实验室中，奖励是在``_get_rewards`` "
"API中实现的，应该返回奖励缓冲区，而不是直接分配给``self.rew_buf``。奖励功能还可以通过定义带有``@torch.jit.script``注释的函数来使用pytorch"
" jit进行计算。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:803
msgid "Observations"
msgstr "观察"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:805
msgid ""
"In Isaac Lab, the ``_get_observations()`` API must return a dictionary with "
"the key ``policy`` that has the observation buffer as the value. When "
"working with asymmetric actor-critic states, the states for the critic "
"should have the key ``critic`` and be returned with the observation buffer "
"in the same dictionary."
msgstr ""
"在Isaac实验室中，``_get_observations()`` "
"API必须返回一个字典，其键为``policy``，值为观察缓冲区。当与不对称演员-"
"评论者状态一起使用时，评论者的状态应具有键``critic``，并与观察缓冲区一起返回到同一个字典中。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:834
msgid "Domain Randomization"
msgstr "域随机化"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:836
msgid ""
"In OmniIsaacGymEnvs, domain randomization was specified through the task "
"``.yaml`` config file. In Isaac Lab, the domain randomization configuration "
"uses the :class:`~omni.isaac.lab.utils.configclass` module to specify a "
"configuration class consisting of :class:`~managers.EventTermCfg` variables."
msgstr ""
"在OmniIsaacGymEnvs中，域随机化是通过任务``.yaml``配置文件指定的。在Isaac实验室中，域随机化配置使用:class:`~omni.isaac.lab.utils.configclass`模块来指定一个由:class:`~managers.EventTermCfg`变量组成的配置类。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:840
msgid "Below is an example of a configuration class for domain randomization:"
msgstr "以下是域随机化的配置类示例："

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:880
msgid ""
"Each ``EventTerm`` object is of the :class:`~managers.EventTermCfg` class "
"and takes in a ``func`` parameter for specifying the function to call during"
" randomization, a ``mode`` parameter, which can be ``startup``, ``reset`` or"
" ``interval``. THe ``params`` dictionary should provide the necessary "
"arguments to the function that is specified in the ``func`` parameter. "
"Functions specified as ``func`` for the ``EventTerm`` can be found in the "
":class:`~envs.mdp.events` module."
msgstr ""
"每个``EventTerm``对象都是:class:`~managers.EventTermCfg`类的对象，接受一个``func``参数来指定随机化时调用的函数，一个``mode``参数，可以是``startup``、``reset``或``interval``。"
" "
"``params``字典应该提供函数所需的参数。作为``EventTerm``的``func``指定的函数可以在:class:`~envs.mdp.events`模块中找到。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:886
msgid ""
"Note that as part of the ``\"asset_cfg\": SceneEntityCfg(\"robot\", "
"body_names=\".*\")`` parameter, the name of the actor ``\"robot\"`` is "
"provided, along with the body or joint names specified as a regex "
"expression, which will be the actors and bodies/joints that will have "
"randomization applied."
msgstr ""
"注意，作为``\"asset_cfg\"：SceneEntityCfg(\"robot\", "
"body_names=\".*\")``参数的一部分，“robot”角色的名称已经提供，以及作为正则表达式指定的身体或关节名称，这些将是将随机应用到的角色和身体/关节。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:890
msgid ""
"One difference with OmniIsaacGymEnvs is that ``interval`` randomization is "
"now specified as seconds instead of steps. When ``mode=\"interval\"``, the "
"``interval_range_s`` parameter must also be provided, which specifies the "
"range of seconds for which randomization should be applied. This range will "
"then be randomized to determine a specific time in seconds when the next "
"randomization will occur for the term. To convert between steps to seconds, "
"use the equation ``time_s = num_steps * (decimation * dt)``."
msgstr ""
"与OmniIsaacGymEnvs不同的一点是，``interval``随机化现在指定为秒而不是步数。当``mode=\"interval\"``时，还必须提供``interval_range_s``参数，该参数指定应该应用随机化的秒数范围。然后将对这个范围进行随机化，以确定术语的具体时间点。要在步数和秒之间转化，请使用方程``time_s"
" = num_steps * (decimation * dt)``。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:896
msgid ""
"Similar to OmniIsaacGymEnvs, randomization APIs are available for "
"randomizing articulation properties, such as joint stiffness and damping, "
"joint limits, rigid body materials, fixed tendon properties, as well as "
"rigid body properties, such as mass and rigid body materials. Randomization "
"of the physics scene gravity is also supported. Note that randomization of "
"scale is current not supported in Isaac Lab. To randomize scale, please set "
"up the scene in a way where each environment holds the actor at a different "
"scale."
msgstr ""
"与OmniIsaacGymEnvs一样，用于随机化构造性属性的随机化API现在可用，如关节刚度和阻尼、关节限制、刚性体材料、固定肌腱属性以及刚性体属性，比如质量和刚性体材料。还支持对物理场景重力进行随机化。需要注意的是，Isaac实验室目前不支持比例的随机化。要随机化比例，请以每个环境在不同比例下持有演员的方式设置场景。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:903
msgid ""
"Once the ``configclass`` for the randomization terms have been set up, the "
"class must be added to the base config class for the task and be assigned to"
" the variable ``events``."
msgstr "一旦随机化术语的``configclass``设置完成，该类必须被添加到任务的基本配置类中，并分配给变量``events``。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:914
msgid "Action and Observation Noise"
msgstr "动作和观察噪声"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:916
msgid ""
"Actions and observation noise can also be added using the "
":class:`~utils.configclass` module. Action and observation noise configs "
"must be added to the main task config using the ``action_noise_model`` and "
"``observation_noise_model`` variables:"
msgstr ""
"还可以使用:class:`~utils.configclass`模块添加动作和观测噪声。必须使用``action_noise_model``和``observation_noise_model``变量将动作和观测噪声配置添加到主任务配置中："

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:936
msgid ""
":class:`~.utils.noise.NoiseModelWithAdditiveBiasCfg` can be used to sample "
"both uncorrelated noise per step as well as correlated noise that is re-"
"sampled at reset time. The ``noise_cfg`` term specifies the Gaussian "
"distribution that will be sampled at each step for all environments. This "
"noise will be added to the corresponding actions and observations buffers at"
" every step. The ``bias_noise_cfg`` term specifies the Gaussian distribution"
" for the correlated noise that will be sampled at reset time for the "
"environments being reset. The same noise will be applied each step for the "
"remaining of the episode for the environments and resampled at the next "
"reset."
msgstr ""
":class:`~.utils.noise.NoiseModelWithAdditiveBiasCfg`可以用于对每步采样不相关的噪声以及在重置时重新采样相关噪声。``noise_cfg``项指定了将在每步对所有环境进行采样的高斯分布。此噪声将被添加到相应的动作和观察值缓冲区中的每一步。``bias_noise_cfg``项指定了在被重置的环境中在重置时间进行重新采样的相关噪声的高斯分布。相同噪声将在剩余的情节中的每一步被应用，并在下一次重置时被重新采样。"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:946
msgid "This replaces the following setup in OmniIsaacGymEnvs:"
msgstr "这取代了OmniIsaacGymEnvs中的以下设置："

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:976
msgid "Launching Training"
msgstr "启动训练"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:978
msgid "To launch a training in Isaac Lab, use the command:"
msgstr "要在Isaac实验室中启动训练，请使用以下命令："

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:985
msgid "Launching Inferencing"
msgstr "启动推理"

#: ../../source/migration/migrating_from_omniisaacgymenvs.rst:987
msgid "To launch inferencing in Isaac Lab, use the command:"
msgstr "要在Isaac实验室中启动推理，请使用以下命令："
