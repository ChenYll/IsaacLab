# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:4
msgid "Adding sensors on a robot"
msgstr "在机器人上添加传感器"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:9
msgid ""
"While the asset classes allow us to create and simulate the physical "
"embodiment of the robot, sensors help in obtaining information about the "
"environment. They typically update at a lower frequency than the simulation "
"and are useful for obtaining different proprioceptive and exteroceptive "
"information. For example, a camera sensor can be used to obtain the visual "
"information of the environment, and a contact sensor can be used to obtain "
"the contact information of the robot with the environment."
msgstr ""
"尽管资产类别允许我们创建和模拟机器人的物理实体，但传感器有助于获取有关环境的信息。它们的更新频率通常低于模拟，并且对于获取不同的本体感知和外部感知信息非常有用。例如，摄像头传感器可用于获取环境的视觉信息，接触传感器可用于获取机器人与环境的接触信息。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:16
msgid ""
"In this tutorial, we will see how to add different sensors to a robot. We "
"will use the ANYmal-C robot for this tutorial. The ANYmal-C robot is a "
"quadrupedal robot with 12 degrees of freedom. It has 4 legs, each with 3 "
"degrees of freedom. The robot has the following sensors:"
msgstr ""
"在本教程中，我们将看到如何向机器人添加不同的传感器。我们将在本教程中使用ANYmal-C机器人。ANYmal-"
"C机器人是一个具有12自由度的四足机器人。它有4条腿，每条腿有3个自由度。机器人具有以下传感器："

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:21
msgid "A camera sensor on the head of the robot which provides RGB-D images"
msgstr "机器人头部的摄像头传感器，可提供RGB-D图像"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:22
msgid "A height scanner sensor that provides terrain height information"
msgstr "提供地形高度信息的高度扫描传感器"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:23
msgid ""
"Contact sensors on the feet of the robot that provide contact information"
msgstr "机器人脚部的接触传感器，提供接触信息"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:25
msgid ""
"We continue this tutorial from the previous tutorial on :ref:`tutorial-"
"interactive-scene`, where we learned about the "
":class:`scene.InteractiveScene` class."
msgstr ""
"我们将从之前关于 :ref:`tutorial-interactive-scene` 的教程中继续本教程，那里我们了解 "
":class:`scene.InteractiveScene` 类。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:30
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:32
msgid ""
"The tutorial corresponds to the ``add_sensors_on_robot.py`` script in the "
"``source/standalone/tutorials/04_sensors`` directory."
msgstr ""
"教程对应于 ``source/standalone/tutorials/04_sensors`` 目录中的 ``add_sensors_on_robot.py` 脚本。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst
msgid "Code for add_sensors_on_robot.py"
msgstr "add_sensors_on_robot.py的代码"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:45
msgid "The Code Explained"
msgstr "解释代码"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:47
msgid ""
"Similar to the previous tutorials, where we added assets to the scene, the "
"sensors are also added to the scene using the scene configuration. All "
"sensors inherit from the :class:`sensors.SensorBase` class and are "
"configured through their respective config classes. Each sensor instance can"
" define its own update period, which is the frequency at which the sensor is"
" updated. The update period is specified in seconds through the "
":attr:`sensors.SensorBaseCfg.update_period` attribute."
msgstr ""
"与以前的教程类似，其中我们将资产添加到场景中，传感器也是使用场景配置添加到场景中的。所有传感器都继承自 :class:`sensors.SensorBase` 类，并通过其各自的config类进行配置。每个传感器实例可以定义其自己的更新周期，这是传感器更新的频率。更新周期以秒为单位通过 :attr:`sensors.SensorBaseCfg.update_period` 属性指定。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:53
msgid ""
"Depending on the specified path and the sensor type, the sensors are "
"attached to the prims in the scene. They may have an associated prim that is"
" created in the scene or they may be attached to an existing prim. For "
"instance, the camera sensor has a corresponding prim that is created in the "
"scene, whereas for the contact sensor, the activating the contact reporting "
"is a property on a rigid body prim."
msgstr ""
"根据指定的路径和传感器类型，传感器附加到场景中的prims。它们可能具有在场景中创建的关联prim，或者它们可能附加到现有prim。例如，摄像头传感器具有在场景中创建的相应prim，而对于接触传感器，激活接触报告是刚体prim的属性。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:58
msgid ""
"In the following, we introduce the different sensors we use in this tutorial"
" and how they are configured. For more description about them, please check "
"the :mod:`sensors` module."
msgstr "下面，我们介绍本教程中使用的不同传感器及其配置。有关它们的更多说明，请查看 :mod:`sensors` 模块。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:62
msgid "Camera sensor"
msgstr "摄像头传感器"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:64
msgid ""
"A camera is defined using the :class:`sensors.CameraCfg`. It is based on the"
" USD Camera sensor and the different data types are captured using Omniverse"
" Replicator API. Since it has a corresponding prim in the scene, the prims "
"are created in the scene at the specified prim path."
msgstr ""
"使用 :class:`sensors.CameraCfg` 定义摄像头。它基于USD摄像头传感器，使用Omniverse Replicator "
"API捕获不同的数据类型。由于它在场景中有相应的prim，因此prims会在指定的prim路径处创建在场景中。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:68
msgid ""
"The configuration of the camera sensor includes the following parameters:"
msgstr "摄像头传感器的配置包括以下参数："

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:70
msgid ""
":attr:`~sensors.CameraCfg.spawn`: The type of USD camera to create. This can"
" be either :class:`~sim.spawners.sensors.PinholeCameraCfg` or "
":class:`~sim.spawners.sensors.FisheyeCameraCfg`."
msgstr ""
":attr:`~sensors.CameraCfg.spawn`：要创建的USD摄像头的类型。这可以是 :class:`~sim.spawners.sensors.PinholeCameraCfg` 或 :class:`~sim.spawners.sensors.FisheyeCameraCfg` 。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:72
msgid ""
":attr:`~sensors.CameraCfg.offset`: The offset of the camera sensor from the "
"parent prim."
msgstr ":attr:`~sensors.CameraCfg.offset`：相机传感器相对于父Prim的偏移量。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:73
msgid ""
":attr:`~sensors.CameraCfg.data_types`: The data types to capture. This can "
"be ``rgb``, ``distance_to_image_plane``, ``normals``, or other types "
"supported by the USD Camera sensor."
msgstr ""
":attr:`~sensors.CameraCfg.data_types`：要捕获的数据类型。这可以是 ``rgb``、``distance_to_image_plane``、``normals`` 或USD摄像头传感器支持的其他类型。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:76
msgid ""
"To attach an RGB-D camera sensor to the head of the robot, we specify an "
"offset relative to the base frame of the robot. The offset is specified as a"
" translation and rotation relative to the base frame, and the "
":attr:`~sensors.CameraCfg.OffsetCfg.convention` in which the offset is "
"specified."
msgstr ""
"为了将RGB-"
"D摄像头传感器附加到机器人的头部，我们指定相对于机器人基本frame的偏移量。偏移量被指定为相对于基本frame的平移和旋转，并且指定偏移量的 :attr:`~sensors.CameraCfg.OffsetCfg.convention` 。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:80
msgid ""
"In the following, we show the configuration of the camera sensor used in "
"this tutorial. We set the update period to 0.1s, which means that the camera"
" sensor is updated at 10Hz. The prim path expression is set to "
"``{ENV_REGEX_NS}/Robot/base/front_cam`` where the ``{ENV_REGEX_NS}`` is the "
"environment namespace, ``\"Robot\"`` is the name of the robot, ``\"base\"`` "
"is the name of the prim to which the camera is attached, and "
"``\"front_cam\"`` is the name of the prim associated with the camera sensor."
msgstr ""
"接下来，我们展示本教程中使用的摄像头传感器的配置。我们将更新周期设置为0.1秒，这意味着摄像头传感器以10Hz更新。prim路径表达式设置为 ``{ENV_REGEX_NS}/Robot/base/front_cam``，其中 ``{ENV_REGEX_NS}`` 是环境命名空间，``\"Robot\"`` 是机器人的名称，``\"base\"`` 是连接相机的prim的名称，``\"front_cam\"`` 是与摄像头传感器关联的prim的名称。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:92
msgid "Height scanner"
msgstr "高度扫描器"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:94
msgid ""
"The height-scanner is implemented as a virtual sensor using the NVIDIA Warp "
"ray-casting kernels. Through the :class:`sensors.RayCasterCfg`, we can "
"specify the pattern of rays to cast and the meshes against which to cast the"
" rays. Since they are virtual sensors, there is no corresponding prim "
"created in the scene for them. Instead they are attached to a prim in the "
"scene, which is used to specify the location of the sensor."
msgstr ""
"高度扫描器实现为使用NVIDIA "
"Warp光线投射内核的虚拟传感器。通过 :class:`sensors.RayCasterCfg`，我们可以指定要投射的光线的模式以及要投射的mesh。由于它们是虚拟传感器，因此在场景中没有相应的prim。相反，它们附加到场景中的一个prim上，这用于指定传感器的位置。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:100
msgid ""
"For this tutorial, the ray-cast based height scanner is attached to the base"
" frame of the robot. The pattern of rays is specified using the "
":attr:`~sensors.RayCasterCfg.pattern` attribute. For a uniform grid pattern,"
" we specify the pattern using :class:`~sensors.patterns.GridPatternCfg`. "
"Since we only care about the height information, we do not need to consider "
"the roll and pitch of the robot. Hence, we set the "
":attr:`~sensors.RayCasterCfg.attach_yaw_only` to true."
msgstr ""
"对于本教程，基于射线的高度扫描器附加到机器人的基本frame。光线模式使用 :attr:`~sensors.RayCasterCfg.pattern` 属性指定。对于均匀网格模式，我们使用 :class:`~sensors.patterns.GridPatternCfg` 指定模式。由于我们只关心高度信息，因此我们不需要考虑机器人的横滚和俯仰。因此，我们将 :attr:`~sensors.RayCasterCfg.attach_yaw_only` 设置为true。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:106
msgid ""
"For the height-scanner, you can visualize the points where the rays hit the "
"mesh. This is done by setting the :attr:`~sensors.SensorBaseCfg.debug_vis` "
"attribute to true."
msgstr ""
"对于高度扫描器，可以通过将 :attr:`~sensors.SensorBaseCfg.debug_vis` 属性设置为true来可视化射线击中mesh的点。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:109
msgid "The entire configuration of the height-scanner is as follows:"
msgstr "高度扫描器的全部配置如下 :"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:117
msgid "Contact sensor"
msgstr "接触传感器"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:119
msgid ""
"Contact sensors wrap around the PhysX contact reporting API to obtain the "
"contact information of the robot with the environment. Since it relies of "
"PhysX, the contact sensor expects the contact reporting API to be enabled on"
" the rigid bodies of the robot. This can be done by setting the "
":attr:`~sim.spawners.RigidObjectSpawnerCfg.activate_contact_sensors` to true"
" in the asset configuration."
msgstr ""
"接触传感器利用PhysX接触报告API获取机器人与环境的接触信息。由于它依赖于PhysX，接触传感器希望在机器人的刚体上启用接触报告API。这可以通过在资产配置中设置 :attr:`~sim.spawners.RigidObjectSpawnerCfg.activate_contact_sensors` 为true来实现。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:124
msgid ""
"Through the :class:`sensors.ContactSensorCfg`, it is possible to specify the"
" prims for which we want to obtain the contact information. Additional flags"
" can be set to obtain more information about the contact, such as the "
"contact air time, contact forces between filtered prims, etc."
msgstr ""
"通过 :class:`sensors.ContactSensorCfg`，可以指定要获取接触信息的prims。可以设置附加标志以获取有关接触的更多信息，例如联系空气时间、过滤prims之间的接触力等。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:128
msgid ""
"In this tutorial, we attach the contact sensor to the feet of the robot. The"
" feet of the robot are named ``\"LF_FOOT\"``, ``\"RF_FOOT\"``, "
"``\"LH_FOOT\"``, and ``\"RF_FOOT\"``. We pass a Regex expression "
"``\".*_FOOT\"`` to simplify the prim path specification. This Regex "
"expression matches all prims that end with ``\"_FOOT\"``."
msgstr ""
"在本教程中，我们将接触传感器附加到机器人的脚部。机器人的脚部名称为 ``\"LF_FOOT\"`、``\"RF_FOOT\"、``\"LH_FOOT\"` 和"
" ``\"RF_FOOT\"`` 。我们将正则表达式 ``\".*_FOOT\"`` 传递以简化prim路径的指定。此正则表达式匹配以 "
"``\"_FOOT\"`` 结尾的所有prims。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:133
msgid ""
"We set the update period to 0 to update the sensor at the same frequency as "
"the simulation. Additionally, for contact sensors, we can specify the "
"history length of the contact information to store. For this tutorial, we "
"set the history length to 6, which means that the contact information for "
"the last 6 simulation steps is stored."
msgstr ""
"我们将更新周期设置为0，以便以与模拟相同的频率更新传感器。另外，对于接触传感器，我们可以指定要存储的接触信息的历史长度。对于本教程，我们将历史长度设置为6，这意味着将存储最后6个模拟步骤的接触信息。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:138
msgid "The entire configuration of the contact sensor is as follows:"
msgstr "接触传感器的全部配置如下 :"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:146
msgid "Running the simulation loop"
msgstr "运行模拟循环"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:148
msgid ""
"Similar to when using assets, the buffers and physics handles for the "
"sensors are initialized only when the simulation is played, i.e., it is "
"important to call ``sim.reset()`` after creating the scene."
msgstr "与使用资产时类似，只有在播放模拟时才初始化传感器的缓冲区和物理手柄，即创建场景后调用 ``sim.reset()`` 很重要。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:156
msgid ""
"Besides that, the simulation loop is similar to the previous tutorials. The "
"sensors are updated as part of the scene update and they internally handle "
"the updating of their buffers based on their update periods."
msgstr "除此之外，模拟循环与之前的教程类似。传感器作为场景更新的一部分进行更新，并且它们根据其更新周期内部处理其缓冲区的更新。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:160
msgid ""
"The data from the sensors can be accessed through their ``data`` attribute. "
"As an example, we show how to access the data for the different sensors "
"created in this tutorial:"
msgstr "传感器的数据可以通过它们的 ``data`` 属性访问。例如，我们展示了如何访问本教程中创建的不同传感器的数据 :"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:170
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:172
msgid ""
"Now that we have gone through the code, let's run the script and see the "
"result:"
msgstr "现在我们已经介绍了代码，让我们运行脚本并查看结果 :"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:179
msgid ""
"This command should open a stage with a ground plane, lights, and two "
"quadrupedal robots. Around the robots, you should see red spheres that "
"indicate the points where the rays hit the mesh. Additionally, you can "
"switch the viewport to the camera view to see the RGB image captured by the "
"camera sensor. Please check `here "
"<https://youtu.be/htPbcKkNMPs?feature=shared>`_ for more information on how "
"to switch the viewport to the camera view."
msgstr ""
"此命令应打开一个包含地面平面、灯光和两个四足机器人的舞台。您应该在机器人周围看到红色的球，这些球指示了射线击中mesh的点。另外，您可以切换视口到相机视图，以查看摄像头传感器捕获的RGB图像。有关如何将视口切换到相机视图，请参阅 ` 此处<https://youtu.be/htPbcKkNMPs?feature=shared>`_ 了解更多信息。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:185
msgid ""
"To stop the simulation, you can either close the window, or press ``Ctrl+C``"
" in the terminal."
msgstr "要停止模拟，您可以在终端中关闭窗口，或者按 ``Ctrl+C`` 。"

#: ../../source/tutorials/04_sensors/add_sensors_on_robot.rst:187
msgid ""
"While in this tutorial, we went over creating and using different sensors, "
"there are many more sensors available in the :mod:`sensors` module. We "
"include minimal examples of using these sensors in the "
"``source/standalone/tutorials/04_sensors`` directory. For completeness, "
"these scripts can be run using the following commands:"
msgstr ""
"在本教程中，我们已经介绍了创建和使用不同传感器，:mod:`sensors` 模块中还有许多传感器可用。我们在 ``source/standalone/tutorials/04_sensors`` 目录中包含了使用这些传感器的最小示例。为了使用完整，可以使用以下命令运行这些脚本："
