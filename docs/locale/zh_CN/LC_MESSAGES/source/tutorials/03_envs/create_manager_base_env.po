# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:5
msgid "Creating a Manager-Based Base Environment"
msgstr "创建基于管理器的基础环境"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:9
msgid ""
"Environments bring together different aspects of the simulation such as the "
"scene, observations and actions spaces, reset events etc. to create a "
"coherent interface for various applications. In Isaac Lab, manager-based "
"environments are implemented as :class:`envs.ManagerBasedEnv` and "
":class:`envs.ManagerBasedRLEnv` classes. The two classes are very similar, "
"but :class:`envs.ManagerBasedRLEnv` is useful for reinforcement learning "
"tasks and contains rewards, terminations, curriculum and command generation."
" The :class:`envs.ManagerBasedEnv` class is useful for traditional robot "
"control and doesn't contain rewards and terminations."
msgstr ""
"环境将模拟的不同方面（如场景、观察和行动空间、重置事件等）组合在一起，为各种应用程序创建一个连贯的接口。在Isaac "
"Lab中，基于管理器的环境实现为:class:`envs.ManagerBasedEnv`和:class:`envs.ManagerBasedRLEnv`类。这两个类非常相似，但是:class:`envs.ManagerBasedRLEnv`对于强化学习任务非常有用，包含奖励、终止、课程和指令生成。:class:`envs.ManagerBasedEnv`类对于传统机器人控制非常有用，不包含奖励和终止。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:18
msgid ""
"In this tutorial, we will look at the base class "
":class:`envs.ManagerBasedEnv` and its corresponding configuration class "
":class:`envs.ManagerBasedEnvCfg` for the manager-based workflow. We will use"
" the cartpole environment from earlier to illustrate the different "
"components in creating a new :class:`envs.ManagerBasedEnv` environment."
msgstr ""
"在本教程中，我们将查看:class:`envs.ManagerBasedEnv`的基类和其对应的配置类:class:`envs.ManagerBasedEnvCfg`，用于基于管理器的工作流程。我们将使用之前的cartpole环境来说明如何创建新的:class:`envs.ManagerBasedEnv`环境中的不同组件。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:26
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:28
msgid ""
"The tutorial corresponds to the ``create_cartpole_base_env`` script  in the "
"``source/standalone/tutorials/03_envs`` directory."
msgstr ""
"本教程对应于'dtand-alone/tutorials/03_envs'目录中的'create_cartpole_base_env'脚本。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst
msgid "Code for create_cartpole_base_env.py"
msgstr "create_cartpole_base_env.py的代码"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:41
msgid "The Code Explained"
msgstr "代码解释"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:43
msgid ""
"The base class :class:`envs.ManagerBasedEnv` wraps around many intricacies "
"of the simulation interaction and provides a simple interface for the user "
"to run the simulation and interact with it. It is composed of the following "
"components:"
msgstr ""
"基类:class:`envs.ManagerBasedEnv`包装了许多仿真交互的复杂性，并提供了一个简单的接口，供用户运行仿真并与之交互。它由以下组件组成:"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:47
msgid ""
":class:`scene.InteractiveScene` - The scene that is used for the simulation."
msgstr ":class:`scene.InteractiveScene`-用于仿真的场景。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:48
msgid ":class:`managers.ActionManager` - The manager that handles actions."
msgstr ":class:`managers.ActionManager`-处理操作的管理器。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:49
msgid ""
":class:`managers.ObservationManager` - The manager that handles "
"observations."
msgstr ":class:`managers.ObservationManager`-处理观察的管理器。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:50
msgid ""
":class:`managers.EventManager` - The manager that schedules operations (such"
" as domain randomization) at specified simulation events. For instance, at "
"startup, on resets, or periodic intervals."
msgstr ":class:`managers.EventManager`-在指定的仿真事件上安排操作（例如域随机化）。例如，启动时、重置时或定期间隔。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:53
msgid ""
"By configuring these components, the user can create different variations of"
" the same environment with minimal effort. In this tutorial, we will go "
"through the different components of the :class:`envs.ManagerBasedEnv` class "
"and how to configure them to create a new environment."
msgstr ""
"通过配置这些组件，用户可以轻松地创建相同环境的不同变体。在本教程中，我们将介绍:class:`envs.ManagerBasedEnv`类的不同组件和如何配置它们以创建新的环境。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:58
msgid "Designing the scene"
msgstr "设计场景"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:60
msgid ""
"The first step in creating a new environment is to configure its scene. For "
"the cartpole environment, we will be using the scene from the previous "
"tutorial. Thus, we omit the scene configuration here. For more details on "
"how to configure a scene, see :ref:`tutorial-interactive-scene`."
msgstr ""
"创建新环境的第一步是配置其场景。对于cartpole环境，我们将使用之前教程中的场景。因此，我们在这里省略了场景配置。有关如何配置场景的更多详细信息，请参见:ref:`tutorial-"
"interactive-scene`。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:66
msgid "Defining actions"
msgstr "定义行动"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:68
msgid ""
"In the previous tutorial, we directly input the action to the cartpole using"
" the :meth:`assets.Articulation.set_joint_effort_target` method. In this "
"tutorial, we will use the :class:`managers.ActionManager` to handle the "
"actions."
msgstr ""
"在上一个教程中，我们直接使用:meth:`assets.Articulation.set_joint_effort_target`方法将动作直接输入到cartpole。在本教程中，我们将使用:class:`managers.ActionManager`来处理这些动作。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:72
msgid ""
"The action manager can comprise of multiple :class:`managers.ActionTerm`. "
"Each action term is responsible for applying *control* over a specific "
"aspect of the environment. For instance, for robotic arm, we can have two "
"action terms -- one for controlling the joints of the arm, and the other for"
" controlling the gripper. This composition allows the user to define "
"different control schemes for different aspects of the environment."
msgstr ""
"动作管理器可以包含多个:class:`managers.ActionTerm`。每个动作期限负责在环境的特定方面上应用*控制*。例如，对于机器人臂来说，我们可以有两个行动期限"
" - 一个用于控制手臂的关节，另一个用于控制手爪。这种组合允许用户为不同方面的环境定义不同的控制方案。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:78
msgid ""
"In the cartpole environment, we want to control the force applied to the "
"cart to balance the pole. Thus, we will create an action term that controls "
"the force applied to the cart."
msgstr "在cartpole环境中，我们希望控制施加在小车上来平衡杆的力。因此，我们将创建一个行动期限，用于控制施加在小车上的力。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:86
msgid "Defining observations"
msgstr "定义观察"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:88
msgid ""
"While the scene defines the state of the environment, the observations "
"define the states that are observable by the agent. These observations are "
"used by the agent to make decisions on what actions to take. In Isaac Lab, "
"the observations are computed by the :class:`managers.ObservationManager` "
"class."
msgstr ""
"虽然场景定义了环境的状态，但观察定义了代理可以观察到的状态。这些观察由:class:`managers.ObservationManager`类计算。代理使用这些观察来决定采取哪些行动。在Isaac"
" Lab中，观察是由:class:`managers.ObservationManager`类计算的。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:93
msgid ""
"Similar to the action manager, the observation manager can comprise of "
"multiple observation terms. These are further grouped into observation "
"groups which are used to define different observation spaces for the "
"environment. For instance, for hierarchical control, we may want to define "
"two observation groups -- one for the low level controller and the other for"
" the high level controller. It is assumed that all the observation terms in "
"a group have the same dimensions."
msgstr ""
"与动作管理器类似，观察管理器可以包含多个观察期限。这些进一步分组成观察组，用于为环境定义不同的观察空间。例如，对于分层控制，我们可能想为低级控制器和高级控制器定义两个观察组。假定观察组中的所有观察期限具有相同的维度。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:99
msgid ""
"For this tutorial, we will only define one observation group named "
"``\"policy\"``. While not completely prescriptive, this group is a necessary"
" requirement for various wrappers in Isaac Lab. We define a group by "
"inheriting from the :class:`managers.ObservationGroupCfg` class. This class "
"collects different observation terms and help define common properties for "
"the group, such as enabling noise corruption or concatenating the "
"observations into a single tensor."
msgstr ""
"对于本教程，我们只定义一个名为\"policy\"的观察组。虽然不是完全规定性的，但这个组是Isaac "
"Lab中各种包装器的必要要求。我们通过从:class:`managers.ObservationGroupCfg`类继承来定义一个组。此类收集不同的观察期限，并帮助定义组的公共属性，例如启用噪声损坏或将观察结果连接到单个张量中。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:105
msgid ""
"The individual terms are defined by inheriting from the "
":class:`managers.ObservationTermCfg` class. This class takes in the "
":attr:`managers.ObservationTermCfg.func` that specifies the function or "
"callable class that computes the observation for that term. It includes "
"other parameters for defining the noise model, clipping, scaling, etc. "
"However, we leave these parameters to their default values for this "
"tutorial."
msgstr ""
"通过从:class:`managers.ObservationTermCfg`类继承来定义单个期限 "
"。此类接受定义了观察期限的函数或可调用类的:class:`managers.ObservationTermCfg.func`。它包括用于定义噪声模型、剪切、缩放等的其他参数。但是，我们在本教程中将这些参数保留到它们的默认值。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:116
msgid "Defining events"
msgstr "定义事件"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:118
msgid ""
"At this point, we have defined the scene, actions and observations for the "
"cartpole environment. The general idea for all these components is to define"
" the configuration classes and then pass them to the corresponding managers."
" The event manager is no different."
msgstr ""
"此时，我们已经为cartpole环境定义了场景、行动和观察。所有这些组件的一般思想是定义配置类，然后将它们传递给相应的管理器。事件管理器也不例外。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:122
msgid ""
"The :class:`managers.EventManager` class is responsible for events "
"corresponding to changes in the simulation state. This includes resetting "
"(or randomizing) the scene, randomizing physical properties (such as mass, "
"friction, etc.), and varying visual properties (such as colors, textures, "
"etc.). Each of these are specified through the "
":class:`managers.EventTermCfg` class, which takes in the "
":attr:`managers.EventTermCfg.func` that specifies the function or callable "
"class that performs the event."
msgstr ""
":class:`managers.EventManager`类负责对仿真状态更改所对应的事件。这包括重置（或随机化）场景、随机物理属性（例如质量、摩擦力等）以及更改视觉属性（例如颜色、纹理等）。每个事件都是通过:class:`managers.EventTermCfg`类指定的，它接受:class:`managers.EventTermCfg.func`，该属性指定执行事件的函数或可调用类。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:129
msgid ""
"Additionally, it expects the **mode** of the event. The mode specifies when "
"the event term should be applied. It is possible to specify your own mode. "
"For this, you'll need to adapt the :class:`~envs.ManagerBasedEnv` class. "
"However, out of the box, Isaac Lab provides three commonly used modes:"
msgstr ""
"另外，它期望事件的**模式**。模式指定何时应用事件期限。可以指定自己的模式。为此，您需要调整:class:`~envs.ManagerBasedEnv`类。但是，Isaac"
" Lab提供了三种常用模式:"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:133
msgid "``\"startup\"`` - Event that takes place only once at environment startup."
msgstr "\" startup \" - 只在环境启动时发生的事件。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:134
msgid "``\"reset\"`` - Event that occurs on environment termination and reset."
msgstr "\"reset\" - 环境终止和重置时出现的事件。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:135
msgid ""
"``\"interval\"`` - Event that are executed at a given interval, i.e., "
"periodically after a certain number of steps."
msgstr "\"间隔\" - 按给定间隔执行的事件，即在一定步数之后定期执行。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:137
msgid ""
"For this example, we define events that randomize the pole's mass on "
"startup. This is done only once since this operation is expensive and we "
"don't want to do it on every reset. We also create an event to randomize the"
" initial joint state of the cartpole and the pole at every reset."
msgstr ""
"对于此示例，我们定义了在启动时随机化杆的质量的事件。这仅在运行一次，因为此操作很昂贵，我们不希望在每次重置时都这样做。我们还创建了一个事件，将每次重置时的cartpole和杆的初始关节状态随机化。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:146
msgid "Tying it all together"
msgstr "将所有这些组件结合起来"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:148
msgid ""
"Having defined the scene and manager configurations, we can now define the "
"environment configuration through the :class:`envs.ManagerBasedEnvCfg` "
"class. This class takes in the scene, action, observation and event "
"configurations."
msgstr ""
"定义了场景和管理器配置之后，现在可以通过:class:`envs.ManagerBasedEnvCfg`类定义环境配置。该类接受场景、行动、观察和事件配置。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:152
msgid ""
"In addition to these, it also takes in the "
":attr:`envs.ManagerBasedEnvCfg.sim` which defines the simulation parameters "
"such as the timestep, gravity, etc. This is initialized to the default "
"values, but can be modified as needed. We recommend doing so by defining the"
" :meth:`__post_init__` method in the :class:`envs.ManagerBasedEnvCfg` class,"
" which is called after the configuration is initialized."
msgstr ""
"除这些配置之外，它还接受:class:`envs.ManagerBasedEnvCfg.sim`，该属性定义仿真参数，例如时间步长、重力等。这初始化为默认值，但可以根据需要进行修改。我们建议通过在:class:`envs.ManagerBasedEnvCfg`类中定义:meth:`__post_init__`方法来执行此操作，该方法在初始化配置后调用。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:162
msgid "Running the simulation"
msgstr "运行仿真"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:164
msgid ""
"Lastly, we revisit the simulation execution loop. This is now much simpler "
"since we have abstracted away most of the details into the environment "
"configuration. We only need to call the :meth:`envs.ManagerBasedEnv.reset` "
"method to reset the environment and :meth:`envs.ManagerBasedEnv.step` method"
" to step the environment. Both these functions return the observation and an"
" info dictionary which may contain additional information provided by the "
"environment. These can be used by an agent for decision-making."
msgstr ""
"最后，我们重新访问仿真执行循环。现在，由于我们已经将大部分细节抽象出到环境配置中，因此这非常简单。我们只需要调用:meth:`envs.ManagerBasedEnv.reset`方法重置环境，并调用:meth:`envs.ManagerBasedEnv.step`方法来步进环境。这些函数都返回观察和信息字典，其中可能包含环境提供的其他信息。这些都可以被代理用于决策制定。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:171
msgid ""
"The :class:`envs.ManagerBasedEnv` class does not have any notion of "
"terminations since that concept is specific for episodic tasks. Thus, the "
"user is responsible for defining the termination condition for the "
"environment. In this tutorial, we reset the simulation at regular intervals."
msgstr ""
":class:`envs.ManagerBasedEnv`类没有终止的概念，因为该概念特定于情节任务。因此，用户负责为环境定义终止条件。在本教程中，我们在定期间隔重置仿真。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:179
msgid ""
"An important thing to note above is that the entire simulation loop is "
"wrapped inside the :meth:`torch.inference_mode` context manager. This is "
"because the environment uses PyTorch operations under-the-hood and we want "
"to ensure that the simulation is not slowed down by the overhead of "
"PyTorch's autograd engine and gradients are not computed for the simulation "
"operations."
msgstr ""
"需要注意的重要事情是整个仿真循环都包装在:meth:`torch.inference_mode`上下文管理器中。这是因为环境在幕后使用了PyTorch操作，我们希望确保仿真不会被PyTorch的自动求导引擎减慢速度，并且不会为仿真操作计算梯度。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:187
msgid "The Code Execution"
msgstr "代码运行"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:189
msgid ""
"To run the base environment made in this tutorial, you can use the following"
" command:"
msgstr "要运行此教程中制作的基本环境，可以使用以下命令："

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:196
msgid ""
"This should open a stage with a ground plane, light source, and cartpoles. "
"The simulation should be playing with random actions on the cartpole. "
"Additionally, it opens a UI window on the bottom right corner of the screen "
"named ``\"Isaac Lab\"``. This window contains different UI elements that can"
" be used for debugging and visualization."
msgstr ""
"这应该会打开一个带有地面平面、光源和车杆的舞台。仿真应该在车杆上随机运动。此外，它还在屏幕右下角打开了一个名为\"Isaac "
"Lab\"的UI窗口。此窗口包含可以用于调试和可视化的不同UI元素。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:201
msgid ""
"To stop the simulation, you can either close the window, or press ``Ctrl+C``"
" in the terminal where you started the simulation."
msgstr "要停止仿真，可以关闭窗口，或在启动仿真的终端中按“Ctrl+C”。"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:204
msgid ""
"In this tutorial, we learned about the different managers that help define a"
" base environment. We include more examples of defining the base environment"
" in the ``source/standalone/tutorials/03_envs`` directory. For completeness,"
" they can be run using the following commands:"
msgstr ""
"在本教程中，我们了解了帮助定义基本环境的不同管理器。我们在'dtand-"
"alone/tutorials/03_envs'目录中包含了更多定义基本环境的示例。为了完整起见，它们可以使用以下命令运行:"

#: ../../source/tutorials/03_envs/create_manager_base_env.rst:217
msgid ""
"In the following tutorial, we will look at the "
":class:`envs.ManagerBasedRLEnv` class and how to use it to create a "
"Markovian Decision Process (MDP)."
msgstr ""
"在下一个教程中，我们将查看:class:`envs.ManagerBasedRLEnv`类，以及如何使用它来创建马尔可夫决策过程（MDP）。"
