# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/tutorials/01_assets/run_articulation.rst:4
msgid "Interacting with an articulation"
msgstr "与关节交互"

#: ../../source/tutorials/01_assets/run_articulation.rst:9
msgid ""
"This tutorial shows how to interact with an articulated robot in the "
"simulation. It is a continuation of the :ref:`tutorial-interact-rigid-"
"object` tutorial, where we learned how to interact with a rigid object. On "
"top of setting the root state, we will see how to set the joint state and "
"apply commands to the articulated robot."
msgstr ""
"本教程展示了如何与仿真中的关节机器人进行交互。这是 :ref:`tutorial-interact-rigid-object` "
"教程的延续，在那里我们学习了如何与刚体对象交互。除了设置根状态外，我们还将看到如何设置关节状态并向关节机器人应用命令。"

#: ../../source/tutorials/01_assets/run_articulation.rst:16
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/01_assets/run_articulation.rst:18
msgid ""
"The tutorial corresponds to the ``run_articulation.py`` script in the "
"``source/standalone/tutorials/01_assets`` directory."
msgstr ""
"该教程对应于``source/standalone/tutorials/01_assets``目录中的``run_articulation.py``脚本。"

#: ../../source/tutorials/01_assets/run_articulation.rst
msgid "Code for run_articulation.py"
msgstr "run_articulation.py的代码"

#: ../../source/tutorials/01_assets/run_articulation.rst:31
msgid "The Code Explained"
msgstr "代码解释"

#: ../../source/tutorials/01_assets/run_articulation.rst:34
msgid "Designing the scene"
msgstr "设计场景"

#: ../../source/tutorials/01_assets/run_articulation.rst:36
msgid ""
"Similar to the previous tutorial, we populate the scene with a ground plane "
"and a distant light. Instead of spawning rigid objects, we now spawn a cart-"
"pole articulation from its USD file. The cart-pole is a simple robot "
"consisting of a cart and a pole attached to it. The cart is free to move "
"along the x-axis, and the pole is free to rotate about the cart. The USD "
"file for the cart-pole contains the robot's geometry, joints, and other "
"physical properties."
msgstr ""
"与上一个教程类似，我们用地平面和远距离光线填充场景。现在，我们不再生成刚性对象，而是从其USD文件中生成一个小车-杆关节。小车-"
"杆是一个简单的机器人，由一个小车和一个牢固装配在其上的杆组成。小车可以沿x轴自由移动，并且杆可以围绕小车自由旋转。小车-"
"杆的USD文件包含了机器人的几何、关节和其他物理特性。"

#: ../../source/tutorials/01_assets/run_articulation.rst:42
msgid ""
"For the cart-pole, we use its pre-defined configuration object, which is an "
"instance of the :class:`assets.ArticulationCfg` class. This class contains "
"information about the articulation's spawning strategy, default initial "
"state, actuator models for different joints, and other meta-information. A "
"deeper-dive into how to create this configuration object is provided in the "
":ref:`how-to-write-articulation-config` tutorial."
msgstr ""
"对于小车-杆，我们使用其预定义的配置对象，这个对象是 :class:`assets.ArticulationCfg` "
"类的一个实例。这个类包含关于关节机器人生成策略、默认初始状态、不同关节的执行器模型以及其他元信息。如何创建此配置对象的更深入了解可以在 "
":ref:`how-to-write-articulation-config` 教程中找到。"

#: ../../source/tutorials/01_assets/run_articulation.rst:47
msgid ""
"As seen in the previous tutorial, we can spawn the articulation into the "
"scene in a similar fashion by creating an instance of the "
":class:`assets.Articulation` class by passing the configuration object to "
"its constructor."
msgstr ""
"与以前的教程类似，我们可以通过创建 :class:`assets.Articulation` "
"类的一个实例，并将配置对象传递给其构造函数来以相似的方式将关节机器人生成到场景中。"

#: ../../source/tutorials/01_assets/run_articulation.rst:57
msgid "Running the simulation loop"
msgstr "运行模拟循环"

#: ../../source/tutorials/01_assets/run_articulation.rst:59
msgid ""
"Continuing from the previous tutorial, we reset the simulation at regular "
"intervals, set commands to the articulation, step the simulation, and update"
" the articulation's internal buffers."
msgstr "继续从上一个教程，我们会定期重置模拟，设置关节机器人的命令，为模拟迈出一步，并更新关节机器人的内部缓冲。"

#: ../../source/tutorials/01_assets/run_articulation.rst:63
msgid "Resetting the simulation"
msgstr "重置模拟"

#: ../../source/tutorials/01_assets/run_articulation.rst:65
msgid ""
"Similar to a rigid object, an articulation also has a root state. This state"
" corresponds to the root body in the articulation tree. On top of the root "
"state, an articulation also has joint states. These states correspond to the"
" joint positions and velocities."
msgstr ""
"与刚性对象类似，关节机器人也有一个根状态。这个状态对应于关节机器人树中的根体。除了根状态外，关节机器人还有关节状态。这些状态对应于关节的位置和速度。"

#: ../../source/tutorials/01_assets/run_articulation.rst:69
msgid ""
"To reset the articulation, we first set the root state by calling the "
":meth:`Articulation.write_root_state_to_sim` method. Similarly, we set the "
"joint states by calling the :meth:`Articulation.write_joint_state_to_sim` "
"method. Finally, we call the :meth:`Articulation.reset` method to reset any "
"internal buffers and caches."
msgstr ""
"为了重置关节机器人，我们首先调用 :meth:`Articulation.write_root_state_to_sim` "
"方法设置根状态。类似地，我们通过调用 :meth:`Articulation.write_joint_state_to_sim` "
"方法设置关节状态。最后，我们调用 :meth:`Articulation.reset` 方法来重置任何内部缓冲区和缓存。"

#: ../../source/tutorials/01_assets/run_articulation.rst:79
msgid "Stepping the simulation"
msgstr "推进模拟"

#: ../../source/tutorials/01_assets/run_articulation.rst:81
msgid "Applying commands to the articulation involves two steps:"
msgstr "将命令应用到关节机器人包括两个步骤："

#: ../../source/tutorials/01_assets/run_articulation.rst:83
msgid ""
"*Setting the joint targets*: This sets the desired joint position, velocity,"
" or effort targets for the articulation."
msgstr "*设置关节目标*：这将为关节机器人设置所需的关节位置、速度或力矩目标。"

#: ../../source/tutorials/01_assets/run_articulation.rst:84
msgid ""
"*Writing the data to the simulation*: Based on the articulation's "
"configuration, this step handles any :ref:`actuation conversions <feature-"
"actuators>` and writes the converted values to the PhysX buffer."
msgstr ""
"*将数据写入模拟*：根据关节机器人的配置，这一步处理任何 :ref:`执行转换 <feature-actuators>  ` "
"并将转换值写入PhysX缓冲区。"

#: ../../source/tutorials/01_assets/run_articulation.rst:87
msgid ""
"In this tutorial, we control the articulation using joint effort commands. "
"For this to work, we need to set the articulation's stiffness and damping "
"parameters to zero. This is done a-priori inside the cart-pole's pre-defined"
" configuration object."
msgstr ""
"在本教程中，我们使用关节力矩命令来控制关节机器人。为了使其正常工作，我们需要将关节机器人的刚度和阻尼参数设置为零。这在小车-"
"杆的预定义配置对象内部预先完成。"

#: ../../source/tutorials/01_assets/run_articulation.rst:91
msgid ""
"At every step, we randomly sample joint efforts and set them to the "
"articulation by calling the :meth:`Articulation.set_joint_effort_target` "
"method. After setting the targets, we call the "
":meth:`Articulation.write_data_to_sim` method to write the data to the PhysX"
" buffer. Finally, we step the simulation."
msgstr ""
"在每一步中，我们通过调用 :meth:`Articulation.set_joint_effort_target` "
"方法随机抽样关节努力并将其设置到关节机器人上。设置完目标后，我们通过调用 :meth:`Articulation.write_data_to_sim` "
"方法将数据写入PhysX缓冲区。最后，我们迈出模拟的一步。"

#: ../../source/tutorials/01_assets/run_articulation.rst:103
msgid "Updating the state"
msgstr "更新状态"

#: ../../source/tutorials/01_assets/run_articulation.rst:105
msgid ""
"Every articulation class contains a :class:`assets.ArticulationData` object."
" This stores the state of the articulation. To update the state inside the "
"buffer, we call the :meth:`assets.Articulation.update` method."
msgstr ""
"每个关节机器人类都包含一个 :class:`assets.ArticulationData` "
"对象。这个对象存储关节机器人的状态。为了在缓冲区内更新状态，我们调用 :meth:`assets.Articulation.update` 方法。"

#: ../../source/tutorials/01_assets/run_articulation.rst:115
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/tutorials/01_assets/run_articulation.rst:117
msgid ""
"To run the code and see the results, let's run the script from the terminal:"
msgstr "要运行代码并查看结果，让我们从终端运行脚本："

#: ../../source/tutorials/01_assets/run_articulation.rst:124
msgid ""
"This command should open a stage with a ground plane, lights, and two cart-"
"poles that are moving around randomly. To stop the simulation, you can "
"either close the window, press the ``STOP`` button in the UI, or press "
"``Ctrl+C`` in the terminal."
msgstr ""
"这个命令应该打开一个带有地平面、灯光和随机移动的两个小车-杆的场景。要停止模拟，您可以关闭窗口，按UI中的“停止”按钮，或在终端中按“Ctrl+C”。"

#: ../../source/tutorials/01_assets/run_articulation.rst:128
msgid ""
"In this tutorial, we learned how to create and interact with a simple "
"articulation. We saw how to set the state of an articulation (its root and "
"joint state) and how to apply commands to it. We also saw how to update its "
"buffers to read the latest state from the simulation."
msgstr ""
"在本教程中，我们学会了如何创建和与简单的关节机器人交互。我们看到了如何设置关节机器人的状态（其根和关节状态），以及如何应用命令。我们还学会了如何更新其缓冲区来读取来自模拟的最新状态。"

#: ../../source/tutorials/01_assets/run_articulation.rst:132
msgid ""
"In addition to this tutorial, we also provide a few other scripts that spawn"
" different robots.These are included in the ``source/standalone/demos`` "
"directory. You can run these scripts as:"
msgstr ""
"除了这个教程，我们还提供了一些其他脚本，用于生成不同的机器人。这些包含在``source/standalone/demos``目录中。您可以运行这些脚本如下："
