# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:5
msgid "Interacting with a rigid object"
msgstr "与刚性物体交互"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:9
msgid ""
"In the previous tutorials, we learned the essential workings of the "
"standalone script and how to spawn different objects (or *prims*) into the "
"simulation. This tutorial shows how to create and interact with a rigid "
"object. For this, we will use the :class:`assets.RigidObject` class provided"
" in Isaac Lab."
msgstr ""
"在以前的教程中，我们学习了独立脚本的基本工作原理以及如何将不同的对象（或*基元*）生成到模拟中。本教程展示了如何创建和与刚性物体交互。为此，我们将使用Isaac实验室提供的:class:`assets.RigidObject`类。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:14
msgid "The Code"
msgstr "代码"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:16
msgid ""
"The tutorial corresponds to the ``run_rigid_object.py`` script in the "
"``source/standalone/tutorials/01_assets`` directory."
msgstr ""
"本教程对应于``source/standalone/tutorials/01_assets``目录中的``run_rigid_object.py``脚本。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst
msgid "Code for run_rigid_object.py"
msgstr "run_rigid_object.py的代码"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:28
msgid "The Code Explained"
msgstr "代码解释"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:30
msgid ""
"In this script, we split the ``main`` function into two separate functions, "
"which highlight the two main steps of setting up any simulation in the "
"simulator:"
msgstr "在这个脚本中，我们将``main``函数分成了两个单独的函数，这突出显示了在模拟器中设置任何模拟的两个主要步骤："

#: ../../source/tutorials/01_assets/run_rigid_object.rst:33
msgid ""
"**Design scene**: As the name suggests, this part is responsible for adding "
"all the prims to the scene."
msgstr "**设计场景**：顾名思义，这部分负责将所有基元添加到场景中。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:34
msgid ""
"**Run simulation**: This part is responsible for stepping the simulator, "
"interacting with the prims in the scene, e.g., changing their poses, and "
"applying any commands to them."
msgstr "**运行模拟**：这部分负责让模拟器步进，与场景中的基元交互，例如改变它们的姿态，并对它们应用任何命令。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:37
msgid ""
"A distinction between these two steps is necessary because the second step "
"only happens after the first step is complete and the simulator is reset. "
"Once the simulator is reset (which automatically plays the simulation), no "
"new (physics-enabled) prims should be added to the scene as it may lead to "
"unexpected behaviors. However, the prims can be interacted with through "
"their respective handles."
msgstr ""
"这两个步骤之间的区别是必要的，因为第二步只有在第一步完成并重新设置模拟器后才会发生。一旦模拟器被重置（这会自动播放模拟），就不应该再向场景中添加新的（启用了物理的）基元，因为这可能导致意外的行为。但是，可以通过它们各自的句柄与基元进行交互。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:44
msgid "Designing the scene"
msgstr "设计场景"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:46
msgid ""
"Similar to the previous tutorial, we populate the scene with a ground plane "
"and a light source. In addition, we add a rigid object to the scene using "
"the :class:`assets.RigidObject` class. This class is responsible for "
"spawning the prims at the input path and initializes their corresponding "
"rigid body physics handles."
msgstr ""
"与以前的教程类似，我们用地平面和光源装饰了场景。此外，我们还使用:class:`assets.RigidObject`类向场景中添加了一个刚性物体。该类负责在输入路径处生成基元，并初始化相应的刚性物体的物理句柄。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:50
msgid ""
"In this tutorial, we create a conical rigid object using the spawn "
"configuration similar to the rigid cone in the :ref:`Spawn Objects "
"<tutorial-spawn-prims>` tutorial. The only difference is that now we wrap "
"the spawning configuration into the :class:`assets.RigidObjectCfg` class. "
"This class contains information about the asset's spawning strategy, default"
" initial state, and other meta-information. When this class is passed to the"
" :class:`assets.RigidObject` class, it spawns the object and initializes the"
" corresponding physics handles when the simulation is played."
msgstr ""
"在本教程中，我们使用与:ref:`生成物体<tutorial-spawn-"
"prims>`教程中刚性圆锥相似的生成配置创建了一个圆锥形的刚性物体。唯一的区别是现在我们将生成配置封装到:class:`assets.RigidObjectCfg`类中。该类包含有关资产生成策略、默认初始状态和其他元信息的信息。当此类被传递给:class:`assets.RigidObject`类时，它会在播放模拟时生成对象并初始化相应的物理句柄。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:57
msgid ""
"As an example on spawning the rigid object prim multiple times, we create "
"its parent Xform prims, ``/World/Origin{i}``, that correspond to different "
"spawn locations. When the regex expression ``/World/Origin*/Cone`` is passed"
" to the :class:`assets.RigidObject` class, it spawns the rigid object prim "
"at each of the ``/World/Origin{i}`` locations. For instance, if "
"``/World/Origin1`` and ``/World/Origin2`` are present in the scene, the "
"rigid object prims are spawned at the locations ``/World/Origin1/Cone`` and "
"``/World/Origin2/Cone`` respectively."
msgstr ""
"作为多次生成刚性物体基元的一个例子，我们创建了它的父级Xform基元，``/World/Origin{i}``，它对应于不同的生成位置。当正则表达式``/World/Origin*/Cone``被传递给:class:`assets.RigidObject`类时，它会在每个``/World/Origin{i}``位置生成刚性物体基元。例如，如果``/World/Origin1``和``/World/Origin2``存在于场景中，则刚性物体基元会分别生成在位置``/World/Origin1/Cone``和``/World/Origin2/Cone``。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:69
msgid ""
"Since we want to interact with the rigid object, we pass this entity back to"
" the main function. This entity is then used to interact with the rigid "
"object in the simulation loop. In later tutorials, we will see a more "
"convenient way to handle multiple scene entities using the "
":class:`scene.InteractiveScene` class."
msgstr ""
"由于我们想要与刚性物体交互，我们将这个实体传递回主函数。然后在模拟循环中用它来与刚性物体交互。在以后的教程中，我们将看到使用:class:`scene.InteractiveScene`类来处理多个场景实体的更方便的方法。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:80
msgid "Running the simulation loop"
msgstr "运行模拟循环"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:82
msgid ""
"We modify the simulation loop to interact with the rigid object to include "
"three steps -- resetting the simulation state at fixed intervals, stepping "
"the simulation, and updating the internal buffers of the rigid object. For "
"the convenience of this tutorial, we extract the rigid object's entity from "
"the scene dictionary and store it in a variable."
msgstr ""
"我们修改了与刚性物体交互的模拟循环，包括三个步骤--"
"在固定的时间间隔重置模拟状态，模拟步进和更新刚性物体的内部缓冲区。为了本教程的方便，我们从场景字典中提取了刚性物体的实体并将其存储在一个变量中。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:88
msgid "Resetting the simulation state"
msgstr "重置模拟状态"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:90
msgid ""
"To reset the simulation state of the spawned rigid object prims, we need to "
"set their pose and velocity. Together they define the root state of the "
"spawned rigid objects. It is important to note that this state is defined in"
" the **simulation world frame**, and not of their parent Xform prim. This is"
" because the physics engine only understands the world frame and not the "
"parent Xform prim's frame. Thus, we need to transform desired state of the "
"rigid object prim into the world frame before setting it."
msgstr ""
"要重置生成的刚性物体基元的模拟状态，我们需要设置它们的姿态和速度。它们一起定义了生成的刚性物体的根状态。重要的是要注意，这个状态是在**模拟世界坐标系**中定义的，而不是它们父级Xform基元的坐标系。这是因为物理引擎只理解世界坐标系，而不理解父级Xform基元的坐标系。因此，我们需要将刚性物体基元的期望状态转换到世界坐标系，然后再设置它。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:96
msgid ""
"We use the :attr:`assets.RigidObject.data.default_root_state` attribute to "
"get the default root state of the spawned rigid object prims. This default "
"state can be configured from the :attr:`assets.RigidObjectCfg.init_state` "
"attribute, which we left as identity in this tutorial. We then randomize the"
" translation of the root state and set the desired state of the rigid object"
" prim using the :meth:`assets.RigidObject.write_root_state_to_sim` method. "
"As the name suggests, this method writes the root state of the rigid object "
"prim into the simulation buffer."
msgstr ""
"我们使用:attr:`assets.RigidObject.data.default_root_state`属性获取生成的刚性物体基元的默认根状态。这个默认状态可以从:attr:`assets.RigidObjectCfg.init_state`属性中配置，我们在本教程中将它设置为单位。然后我们随机化根状态的平移，并使用:meth:`assets.RigidObject.write_root_state_to_sim`方法设置刚性物体基元的期望状态。顾名思义，这个方法将刚性物体基元的根状态写入模拟缓冲区中。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:108
msgid "Stepping the simulation"
msgstr "模拟步进"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:110
msgid ""
"Before stepping the simulation, we perform the "
":meth:`assets.RigidObject.write_data_to_sim` method. This method writes "
"other data, such as external forces, into the simulation buffer. In this "
"tutorial, we do not apply any external forces to the rigid object, so this "
"method is not necessary. However, it is included for completeness."
msgstr ""
"在模拟步进之前，我们执行:meth:`assets.RigidObject.write_data_to_sim`方法。这个方法将其他数据，例如外部力，写入模拟缓冲区中。在本教程中，我们没有对刚性物体施加任何外部力，所以这个方法是不必要的。但是它包含在这里是为了完整起见。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:120
msgid "Updating the state"
msgstr "更新状态"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:122
msgid ""
"After stepping the simulation, we update the internal buffers of the rigid "
"object prims to reflect their new state inside the "
":class:`assets.RigidObject.data` attribute. This is done using the "
":meth:`assets.RigidObject.update` method."
msgstr ""
"模拟步进后，我们使用:meth:`assets.RigidObject.update`方法更新刚性物体基元的内部缓冲区，以反映它们在:class:`assets.RigidObject.data`属性中的新状态。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:132
msgid "The Code Execution"
msgstr "代码执行"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:134
msgid ""
"Now that we have gone through the code, let's run the script and see the "
"result:"
msgstr "现在我们已经浏览了代码，让我们运行脚本并查看结果："

#: ../../source/tutorials/01_assets/run_rigid_object.rst:141
msgid ""
"This should open a stage with a ground plane, lights, and several green "
"cones. The cones must be dropping from a random height and settling on to "
"the ground. To stop the simulation, you can either close the window, or "
"press the ``STOP`` button in the UI, or press ``Ctrl+C`` in the terminal"
msgstr ""
"这应该会打开一个包含地平面、灯光和几个绿色圆锥的阶段。圆锥必须从随机高度掉落并落到地面上。要停止模拟，可以关闭窗口，或者在UI中按下``STOP``按钮，或者在终端中按下``Ctrl+C``。"

#: ../../source/tutorials/01_assets/run_rigid_object.rst:145
msgid ""
"This tutorial showed how to spawn rigid objects and wrap them in a "
":class:`RigidObject` class to initialize their physics handles which allows "
"setting and obtaining their state. In the next tutorial, we will see how to "
"interact with an articulated object which is a collection of rigid objects "
"connected by joints."
msgstr ""
"本教程演示了如何生成刚性物体，并将它们封装在一个:class:`RigidObject`类中以初始化它们的物理句柄，从而允许设置和获取它们的状态。在下一个教程中，我们将看到如何与由关节连接的刚性物体集合（关节对象）进行交互。"
