# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/how-to/wrap_rl_env.rst:5
msgid "Wrapping environments"
msgstr "封装环境"

#: ../../source/how-to/wrap_rl_env.rst:9
msgid ""
"Environment wrappers are a way to modify the behavior of an environment "
"without modifying the environment itself. This can be used to apply "
"functions to modify observations or rewards, record videos, enforce time "
"limits, etc. A detailed description of the API is available in the "
":class:`gymnasium.Wrapper` class."
msgstr ""
"环境包装器是一种可以修改环境行为而不必修改环境本身的方式。这可以用于应用函数来修改观察或奖励，记录视频，强制时间限制等。API的详细说明可在 "
":class:`gymnasium.Wrapper` 类中找到。"

#: ../../source/how-to/wrap_rl_env.rst:13
msgid ""
"At present, all RL environments inheriting from the "
":class:`~envs.ManagerBasedRLEnv` class are compatible with "
":class:`gymnasium.Wrapper`, since the base class implements the "
":class:`gymnasium.Env` interface. In order to wrap an environment, you need "
"to first initialize the base environment. After that, you can wrap it with "
"as many wrappers as you want by calling ``env = wrapper(env, *args, "
"**kwargs)`` repeatedly."
msgstr ""
"目前，所有继承 :class:`~envs.ManagerBasedRLEnv` 类的 RL 环境都与 "
":class:`gymnasium.Wrapper` 兼容，因为基类实现了 :class:`gymnasium.Env` "
"接口。为了包装环境，您需要先初始化基础环境。之后，您可以通过反复调用“env = wrapper (env，*args，**kwargs)”来封装它。"

#: ../../source/how-to/wrap_rl_env.rst:18
msgid ""
"For example, here is how you would wrap an environment to enforce that reset"
" is called before step or render:"
msgstr "例如，下面是如何包装环境以强制在 step 或 render 之前调用 reset："

#: ../../source/how-to/wrap_rl_env.rst:46
msgid "Wrapper for recording videos"
msgstr "记录视频的包装器"

#: ../../source/how-to/wrap_rl_env.rst:48
msgid ""
"The :class:`gymnasium.wrappers.RecordVideo` wrapper can be used to record "
"videos of the environment. The wrapper takes a ``video_dir`` argument, which"
" specifies where to save the videos. The videos are saved in `mp4 "
"<https://en.wikipedia.org/wiki/MP4_file_format>`__ format at specified "
"intervals for specified number of environment steps or episodes."
msgstr ""
"使用 :class:`gymnasium.wrappers.RecordVideo` "
"包装器可以记录环境的视频。包装器接受一个“video_dir”参数，该参数指定视频保存的位置。视频以每个指定的环境步骤或情节的指定间隔保存为 `mp4 "
"<https://en.wikipedia.org/wiki/MP4_file_format>`__ 格式。"

#: ../../source/how-to/wrap_rl_env.rst:53
msgid ""
"To use the wrapper, you need to first install ``ffmpeg``. On Ubuntu, you can"
" install it by running:"
msgstr "要使用该包装器，您需要首先安装“ffmpeg”。在 Ubuntu 上，您可以通过运行以下命令来安装它："

#: ../../source/how-to/wrap_rl_env.rst:61
msgid ""
"By default, when running an environment in headless mode, the Omniverse "
"viewport is disabled. This is done to improve performance by avoiding "
"unnecessary rendering."
msgstr "默认情况下，在无头模式下运行环境时，Omniverse 视口被禁用。这样做是为了通过避免不必要的渲染来提高性能。"

#: ../../source/how-to/wrap_rl_env.rst:64
msgid ""
"We notice the following performance in different rendering modes with the  "
"``Isaac-Reach-Franka-v0`` environment using an RTX 3090 GPU:"
msgstr "我们使用 RTX 3090 GPU，在不同渲染模式下观察到以下性能："

#: ../../source/how-to/wrap_rl_env.rst:67
msgid "No GUI execution without off-screen rendering enabled: ~65,000 FPS"
msgstr "未启用离屏渲染的无GUI执行：~65,000 FPS"

#: ../../source/how-to/wrap_rl_env.rst:68
msgid "No GUI execution with off-screen enabled: ~57,000 FPS"
msgstr "启用离屏渲染的无GUI执行：~57,000 FPS"

#: ../../source/how-to/wrap_rl_env.rst:69
msgid "GUI execution with full rendering: ~13,000 FPS"
msgstr "全渲染执行：~13,000 FPS"

#: ../../source/how-to/wrap_rl_env.rst:72
msgid ""
"The viewport camera used for rendering is the default camera in the scene "
"called ``\"/OmniverseKit_Persp\"``. The camera's pose and image resolution "
"can be configured through the :class:`~envs.ViewerCfg` class."
msgstr ""
"用于渲染的视口摄像机是场景中名为“/OmniverseKit_Persp”的默认摄像机。摄像机的姿态和图像分辨率可以通过 "
":class:`~envs.ViewerCfg` 类进行配置。"

#: ../../source/how-to/wrap_rl_env.rst
msgid "Default parameters of the ViewerCfg class:"
msgstr "ViewerCfg 类的默认参数："

#: ../../source/how-to/wrap_rl_env.rst:85
msgid ""
"After adjusting the parameters, you can record videos by wrapping the "
"environment with the :class:`gymnasium.wrappers.RecordVideo` wrapper and "
"enabling the off-screen rendering flag. Additionally, you need to specify "
"the render mode of the environment as ``\"rgb_array\"``."
msgstr ""
"调整完参数后，您可以通过使用 :class:`gymnasium.wrappers.RecordVideo` "
"包装器以及启用离屏渲染标志来记录视频。此外，您需要将环境的渲染模式指定为“rgb_array”。"

#: ../../source/how-to/wrap_rl_env.rst:89
msgid ""
"As an example, the following code records a video of the ``Isaac-Reach-"
"Franka-v0`` environment for 200 steps, and saves it in the ``videos`` folder"
" at a step interval of 1500 steps."
msgstr ""
"例如，以下代码将记录“Isaac-Reach-"
"Franka-v0”环境的200个步骤的视频，并将其保存在“videos”文件夹中，步骤间隔为1500个步骤。"

#: ../../source/how-to/wrap_rl_env.rst:124
msgid "Wrapper for learning frameworks"
msgstr "用于学习框架的包装器"

#: ../../source/how-to/wrap_rl_env.rst:126
msgid ""
"Every learning framework has its own API for interacting with environments. "
"For example, the `Stable-Baselines3`_ library uses the `gym.Env "
"<https://gymnasium.farama.org/api/env/>`_ interface to interact with "
"environments. However, libraries like `RL-Games`_, `RSL-RL`_ or `SKRL`_ use "
"their own API for interfacing with a learning environments. Since there is "
"no one-size-fits-all solution, we do not base the "
":class:`~envs.ManagerBasedRLEnv` class on any particular learning "
"framework's environment definition. Instead, we implement wrappers to make "
"it compatible with the learning framework's environment definition."
msgstr ""
"每个学习框架都有自己的 API 与环境进行交互。例如，`Stable-Baselines3`_ 库使用 `gym.Env "
"<https://gymnasium.farama.org/api/env/>`_ 接口与环境进行交互。但是，像 `RL-Games`, `RSL-"
"RL` 或 `SKRL` 这样的库使用自己的 API "
"与学习环境进行接口。由于没有一种适用于所有情况的解决方案，我们不基于任何特定的学习框架的环境定义来构建 "
":class:`~envs.ManagerBasedRLEnv` 类。相反，我们实现包装器，使其与学习框架的环境定义兼容。"

#: ../../source/how-to/wrap_rl_env.rst:134
msgid ""
"As an example of how to use the RL task environment with Stable-Baselines3:"
msgstr "以下是如何使用 Stable-Baselines3 来使用 RL 任务环境的示例："

#: ../../source/how-to/wrap_rl_env.rst:148
msgid ""
"Wrapping the environment with the respective learning framework's wrapper "
"should happen in the end, i.e. after all other wrappers have been applied. "
"This is because the learning framework's wrapper modifies the interpretation"
" of environment's APIs which may no longer be compatible with "
":class:`gymnasium.Env`."
msgstr ""
"将环境包装到相应的学习框架的包装器中应在最后进行，即在应用所有其他包装器之后。这是因为学习框架的包装器修改了环境 API 的解释，这些解释可能不再与 "
":class:`gymnasium.Env` 兼容。"

#: ../../source/how-to/wrap_rl_env.rst:154
msgid "Adding new wrappers"
msgstr "添加新的包装器"

#: ../../source/how-to/wrap_rl_env.rst:156
msgid ""
"All new wrappers should be added to the "
":mod:`omni.isaac.lab_tasks.utils.wrappers` module. They should check that "
"the underlying environment is an instance of "
":class:`omni.isaac.lab.envs.ManagerBasedRLEnv` before applying the wrapper. "
"This can be done by using the :func:`unwrapped` property."
msgstr ""
"所有新的包装器都应添加到 :mod:`omni.isaac.lab_tasks.utils.wrappers` "
"模块。在应用包装器之前，它们应检查基础环境是否是 :class:`omni.isaac.lab.envs.ManagerBasedRLEnv` "
"的实例。这可以通过使用 :func:`unwrapped` 属性来完成。"

#: ../../source/how-to/wrap_rl_env.rst:160
msgid ""
"We include a set of wrappers in this module that can be used as a reference "
"to implement your own wrappers. If you implement a new wrapper, please "
"consider contributing it to the framework by opening a pull request."
msgstr ""
"我们在此模块中包含了一组包装器，可以用作实现自己的包装器的参考。如果您实现了新的包装器，请考虑通过打开 pull request 来将其贡献给框架。"
