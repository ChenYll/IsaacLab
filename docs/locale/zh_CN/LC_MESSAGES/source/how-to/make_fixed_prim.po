# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/how-to/make_fixed_prim.rst:2
msgid "Making a physics prim fixed in the simulation"
msgstr "在模拟中固定物理原语"

#: ../../source/how-to/make_fixed_prim.rst:6
msgid ""
"When a USD prim has physics schemas applied on it, it is affected by physics"
" simulation. This means that the prim can move, rotate, and collide with "
"other prims in the simulation world. However, there are cases where it is "
"desirable to make certain prims static in the simulation world, i.e. the "
"prim should still participate in collisions but its position and orientation"
" should not change."
msgstr ""
"当 USD "
"原语应用了物理模式，它就会受到模拟中的物理影响。这意味着原语可以在模拟世界中移动、旋转并与其他原语发生碰撞。然而，并非所有情况下都希望在模拟世界中使特定原语静止，即原语应仍参与碰撞，但其位置和方向不应更改。"

#: ../../source/how-to/make_fixed_prim.rst:11
msgid ""
"The following sections describe how to spawn a prim with physics schemas and"
" make it static in the simulation world."
msgstr "以下部分描述了如何生成具有物理模式的原语并使其静止在模拟世界中。"

#: ../../source/how-to/make_fixed_prim.rst:14
msgid "Static colliders"
msgstr "静态碰撞器"

#: ../../source/how-to/make_fixed_prim.rst:16
msgid ""
"Static colliders are prims that are not affected by physics but can collide "
"with other prims in the simulation world. These don't have any rigid body "
"properties applied on them. However, this also means that they can't be "
"accessed using the physics tensor API (i.e., through the "
":class:`assets.RigidObject` class)."
msgstr ""
"静态碰撞器是不受物理影响但可以在模拟世界中与其他原语发生碰撞的原语。它们没有任何刚体属性应用在它们身上。然而，这也意味着它们无法使用物理张量 API "
"进行访问（即通过 :class:`assets.RigidObject` 类）。"

#: ../../source/how-to/make_fixed_prim.rst:20
msgid ""
"For instance, to spawn a cone static in the simulation world, the following "
"code can be used:"
msgstr "例如，要在模拟世界中生成一个静态的锥体，可以使用以下代码："

#: ../../source/how-to/make_fixed_prim.rst:38
msgid "Rigid object"
msgstr "刚体对象"

#: ../../source/how-to/make_fixed_prim.rst:40
msgid ""
"Rigid objects (i.e. object only has a single body) can be made static by "
"setting the parameter "
":attr:`sim.schemas.RigidBodyPropertiesCfg.kinematic_enabled` as True. This "
"will make the object kinematic and it will not be affected by physics."
msgstr ""
"通过将参数 :attr:`sim.schemas.RigidBodyPropertiesCfg.kinematic_enabled` 设置为 "
"True，可以使刚体对象（即只有一个刚体的对象）静止。这将使对象静态，并且不受物理影响。"

#: ../../source/how-to/make_fixed_prim.rst:44
msgid ""
"For instance, to spawn a cone static in the simulation world but with rigid "
"body schema on it, the following code can be used:"
msgstr "例如，要在模拟世界中生成一个带有刚体模式但是静态的锥体，可以使用以下代码："

#: ../../source/how-to/make_fixed_prim.rst:65
msgid "Articulation"
msgstr "关节"

#: ../../source/how-to/make_fixed_prim.rst:67
msgid ""
"Fixing the root of an articulation requires having a fixed joint to the root"
" rigid body link of the articulation. This can be achieved by setting the "
"parameter :attr:`sim.schemas.ArticulationRootPropertiesCfg.fix_root_link` as"
" True. Based on the value of this parameter, the following cases are "
"possible:"
msgstr ""
"固定关节于关节的根刚体链接需要将参数 "
":attr:`sim.schemas.ArticulationRootPropertiesCfg.fix_root_link` 设置为 "
"True。根据此参数的值，以下情况是可能的："

#: ../../source/how-to/make_fixed_prim.rst:71
msgid "If set to :obj:`None`, the root link is not modified."
msgstr "如果设置为 :obj:`None`，则不会修改根链接。"

#: ../../source/how-to/make_fixed_prim.rst:72
msgid ""
"If the articulation already has a fixed root link, this flag will enable or "
"disable the fixed joint."
msgstr "如果关节已经有了固定的根链接，此标志将启用或禁用固定关节。"

#: ../../source/how-to/make_fixed_prim.rst:73
msgid ""
"If the articulation does not have a fixed root link, this flag will create a"
" fixed joint between the world frame and the root link. The joint is created"
" with the name \"FixedJoint\" under the root link."
msgstr "如果关节没有固定的根链接，此标志将在世界框架和根链接之间创建一个固定关节。该关节在根链接下以“FixedJoint”的名称创建。"

#: ../../source/how-to/make_fixed_prim.rst:76
msgid ""
"For instance, to spawn an ANYmal robot and make it static in the simulation "
"world, the following code can be used:"
msgstr "例如，要生成一个ANYmal机器人并使其在模拟世界中静止，可以使用以下代码："

#: ../../source/how-to/make_fixed_prim.rst:107
msgid ""
"This will create a fixed joint between the world frame and the root link of "
"the ANYmal robot at the prim path ``\"/World/ANYmal/base/FixedJoint\"`` "
"since the root link is at the path ``\"/World/ANYmal/base\"``."
msgstr ""
"这将在原语路径``\"/World/ANYmal/base/FixedJoint\"``和根链接``\"/World/ANYmal/base\"``处创建一个固定的关节。"

#: ../../source/how-to/make_fixed_prim.rst:112
msgid "Further notes"
msgstr "进一步说明"

#: ../../source/how-to/make_fixed_prim.rst:114
msgid ""
"Given the flexibility of USD asset designing the following possible "
"scenarios are usually encountered:"
msgstr "鉴于 USD 资产设计的灵活性，通常会遇到以下可能的情况："

#: ../../source/how-to/make_fixed_prim.rst:116
msgid ""
"**Articulation root schema on the rigid body prim without a fixed joint**:"
msgstr "**在没有固定关节的刚体原语上的关节根模式**："

#: ../../source/how-to/make_fixed_prim.rst:118
msgid ""
"This is the most common and recommended scenario for floating-base "
"articulations. The root prim has both the rigid body and the articulation "
"root properties. In this case, the articulation root is parsed as a "
"floating-base with the root prim of the articulation ``Link0Xform``."
msgstr ""
"这是浮动基座关节的最常见和推荐的情况。根原语既具有刚体属性，也具有关节根属性。在这种情况下，关节根被解析为具有关节根原语“Link0Xform”的浮动基座。"

#: ../../source/how-to/make_fixed_prim.rst:127
msgid "**Articulation root schema on the parent prim with a fixed joint**:"
msgstr "**在具有固定关节的父原语上的关节根模式**："

#: ../../source/how-to/make_fixed_prim.rst:129
msgid ""
"This is the expected arrangement for fixed-base articulations. The root prim"
" has only the rigid body properties and the articulation root properties are"
" applied to its parent prim. In this case, the articulation root is parsed "
"as a fixed-base with the root prim of the articulation ``Link0Xform``."
msgstr ""
"这是固定基座关节的预期安排。根原语只具有刚体属性，关节根属性应用于其父原语。在这种情况下，关节根被解析为具有关节根原语“Link0Xform”的固定基座。"

#: ../../source/how-to/make_fixed_prim.rst:139
msgid "**Articulation root schema on the parent prim without a fixed joint**:"
msgstr "**在没有固定关节的父原语上的关节根模式**："

#: ../../source/how-to/make_fixed_prim.rst:141
msgid ""
"This is a scenario where the root prim has only the rigid body properties "
"and the articulation root properties are applied to its parent prim. "
"However, the fixed joint is not created between the world frame and the root"
" link. In this case, the articulation is parsed as a floating-base system. "
"However, the PhysX parser uses its own heuristic (such as alphabetical "
"order) to determine the root prim of the articulation. It may select the "
"root prim at ``Link0Xform`` or choose another prim as the root prim."
msgstr ""
"这是根原语只具有刚体属性，而关节根属性应用于其父原语的情况。但是，不会在世界框架和根链接之间创建固定关节。在这种情况下，关节被解析为浮动基座系统。但是，PhysX"
" 解析器使用自己的启发式方法（如字母顺序）来确定关节根原语。它可以选择``Link0Xform``的根原语，也可以选择另一个原语作为根原语。"

#: ../../source/how-to/make_fixed_prim.rst:152
msgid ""
"**Articulation root schema on the rigid body prim with a fixed joint**:"
msgstr "**在具有固定关节的刚体原语上的关节根模式**："

#: ../../source/how-to/make_fixed_prim.rst:154
msgid ""
"While this is a valid scenario, it is not recommended as it may lead to "
"unexpected behavior. In this case, the articulation is still parsed as a "
"floating-base system. However, the fixed joint, created between the world "
"frame and the root link, is considered as a part of the maximal coordinate "
"tree. This is different from PhysX considering the articulation as a fixed-"
"base system. Hence, the simulation may not behave as expected."
msgstr ""
"虽然这是一个有效的情况，但不建议这样做，因为这可能导致意外行为。在这种情况下，关节仍然被解析为浮动基座系统。但在世界框架和根链接之间创建的固定关节被视为最大坐标树的一部分。这与"
" PhysX 将关节解析为固定基座系统不同。因此，模拟可能不会如预期那样执行。"

#: ../../source/how-to/make_fixed_prim.rst:165
msgid ""
"For floating base articulations, the root prim usually has both the rigid "
"body and the articulation root properties. However, directly connecting this"
" prim to the world frame will cause the simulation to consider the fixed "
"joint as a part of the maximal coordinate tree. This is different from PhysX"
" considering the articulation as a fixed-base system."
msgstr ""
"对于浮动基座关节，根原语通常同时具有刚体和关节根属性。然而，直接连接此原语到世界框架将导致模拟将固定关节视为最大坐标树的一部分。这与 PhysX "
"将关节视为固定基座系统是不同的。"

#: ../../source/how-to/make_fixed_prim.rst:170
msgid ""
"Internally, when the parameter "
":attr:`sim.schemas.ArticulationRootPropertiesCfg.fix_root_link` is set to "
"True and the articulation is detected as a floating-base system, the fixed "
"joint is created between the world frame the root rigid body link of the "
"articulation. However, to make the PhysX parser consider the articulation as"
" a fixed-base system, the articulation root properties are removed from the "
"root rigid body prim and applied to its parent prim instead."
msgstr ""
"在内部，在将参数 :attr:`sim.schemas.ArticulationRootPropertiesCfg.fix_root_link` 设置为"
" True 并且检测到关节为浮动基座系统时，固定关节将在关节的根刚体链接和世界框架之间创建。然而，为了使 PhysX "
"解析器将关节解析为固定基座系统，关节根属性会从根刚体原语中删除，并应用在其父原语身上。"

#: ../../source/how-to/make_fixed_prim.rst:178
msgid ""
"In future release of Isaac Sim, an explicit flag will be added to the "
"articulation root schema from PhysX to toggle between fixed-base and "
"floating-base systems. This will resolve the need of the above workaround."
msgstr ""
"在 Isaac Sim 的将来版本中，将添加一个明确的标志到来自 PhysX "
"的关节根模式中，以在固定基座系统和浮动基座系统之间切换。这将解决上述问题的需要。"
