# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Ziqi Fan <fanziqi614@gmail.com>\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Language: zh_CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.15.0\n"

#: ../../source/how-to/write_articulation_cfg.rst:5
msgid "Writing an Asset Configuration"
msgstr "编写资产配置"

#: ../../source/how-to/write_articulation_cfg.rst:9
msgid ""
"This guide walks through the process of creating an "
":class:`~assets.ArticulationCfg`. The :class:`~assets.ArticulationCfg` is a "
"configuration object that defines the properties of an "
":class:`~assets.Articulation` in Isaac Lab."
msgstr ""
"本指南介绍了创建:class:`~assets.ArticulationCfg`的过程。:class:`~assets.ArticulationCfg`是一个配置对象，定义了Isaac"
" Lab中:class:`~assets.Articulation`的属性。"

#: ../../source/how-to/write_articulation_cfg.rst:15
msgid ""
"While we only cover the creation of an :class:`~assets.ArticulationCfg` in "
"this guide, the process is similar for creating any other asset "
"configuration object."
msgstr "虽然本指南只涵盖了创建:class:`~assets.ArticulationCfg`的过程，但是对于创建任何其他资产配置对象的过程类似。"

#: ../../source/how-to/write_articulation_cfg.rst:18
msgid ""
"We will use the Cartpole example to demonstrate how to create an "
":class:`~assets.ArticulationCfg`. The Cartpole is a simple robot that "
"consists of a cart with a pole attached to it. The cart is free to move "
"along a rail, and the pole is free to rotate about the cart."
msgstr ""
"我们将使用Cartpole示例来演示如何创建:class:`~assets.ArticulationCfg`。Cartpole是一个简单的机器人，由一个带有杆的小车组成。小车可以沿着轨道自由移动，杆可以围绕小车自由旋转。"

#: ../../source/how-to/write_articulation_cfg.rst
msgid "Code for Cartpole configuration"
msgstr "Cartpole配置代码"

#: ../../source/how-to/write_articulation_cfg.rst:31
msgid "Defining the spawn configuration"
msgstr "定义生成配置"

#: ../../source/how-to/write_articulation_cfg.rst:33
msgid ""
"As explained in :ref:`tutorial-spawn-prims` tutorials, the spawn "
"configuration defines the properties of the assets to be spawned. This "
"spawning may happen procedurally, or through an existing asset file (e.g. "
"USD or URDF). In this example, we will spawn the Cartpole from a USD file."
msgstr ""
"如：ref:`tutorial-spawn-"
"prims`教程中所述，生成配置定义要生成的资产的属性。这种生成可以通过过程方式进行，也可以通过已存在的资产文件（例如USD或URDF）进行。在本示例中，我们将从一个USD文件中生成Cartpole。"

#: ../../source/how-to/write_articulation_cfg.rst:38
msgid ""
"When spawning an asset from a USD file, we define its "
":class:`~sim.spawners.from_files.UsdFileCfg`. This configuration object "
"takes in the following parameters:"
msgstr ""
"从USD文件生成资产时，我们定义其:class:`~sim.spawners.from_files.UsdFileCfg`。此配置对象接受以下参数："

#: ../../source/how-to/write_articulation_cfg.rst:41
msgid ""
":class:`~sim.spawners.from_files.UsdFileCfg.usd_path`: The USD file path to "
"spawn from"
msgstr ":class:`~sim.spawners.from_files.UsdFileCfg.usd_path`：要生成的USD文件路径"

#: ../../source/how-to/write_articulation_cfg.rst:42
msgid ""
":class:`~sim.spawners.from_files.UsdFileCfg.rigid_props`: The properties of "
"the articulation's root"
msgstr ":class:`~sim.spawners.from_files.UsdFileCfg.rigid_props`：关节根部的属性"

#: ../../source/how-to/write_articulation_cfg.rst:43
msgid ""
":class:`~sim.spawners.from_files.UsdFileCfg.articulation_props`: The "
"properties of all the articulation's links"
msgstr ""
":class:`~sim.spawners.from_files.UsdFileCfg.articulation_props`：所有关节链接的属性"

#: ../../source/how-to/write_articulation_cfg.rst:45
msgid ""
"The last two parameters are optional. If not specified, they are kept at "
"their default values in the USD file."
msgstr "最后两个参数是可选的。如果未指定，则会保留在USD文件中的默认值。"

#: ../../source/how-to/write_articulation_cfg.rst:52
msgid ""
"To import articulation from a URDF file instead of a USD file, you can "
"replace the :class:`~sim.spawners.from_files.UsdFileCfg` with a "
":class:`~sim.spawners.from_files.UrdfFileCfg`. For more details, please "
"check the API documentation."
msgstr ""
"要从URDF文件导入关节而不是从USD文件，可以将:class:`~sim.spawners.from_files.UsdFileCfg`替换为:class:`~sim.spawners.from_files.UrdfFileCfg`。更多详情，请查看API文档。"

#: ../../source/how-to/write_articulation_cfg.rst:58
msgid "Defining the initial state"
msgstr "定义初始状态"

#: ../../source/how-to/write_articulation_cfg.rst:60
msgid ""
"Every asset requires defining their initial or *default* state in the "
"simulation through its configuration. This configuration is stored into the "
"asset's default state buffers that can be accessed when the asset's state "
"needs to be reset."
msgstr "每个资产都需要通过其配置定义其模拟中的初始或*默认*状态。此配置存储到资产的默认状态缓冲区中，可以在资产状态需要重置时访问。"

#: ../../source/how-to/write_articulation_cfg.rst:65
msgid ""
"The initial state of an asset is defined w.r.t. its local environment frame."
" This then needs to be transformed into the global simulation frame when "
"resetting the asset's state. For more details, please check the "
":ref:`tutorial-interact-articulation` tutorial."
msgstr ""
"资产的初始状态是相对于其本地环境框架定义的。然后在重置资产状态时需要将其转换为全局模拟框架。更多详情，请查看：ref:`tutorial-"
"interact-articulation` 教程。"

#: ../../source/how-to/write_articulation_cfg.rst:70
msgid ""
"For an articulation, the :class:`~assets.ArticulationCfg.InitialStateCfg` "
"object defines the initial state of the root of the articulation and the "
"initial state of all its joints. In this example, we will spawn the Cartpole"
" at the origin of the XY plane at a Z height of 2.0 meters. Meanwhile, the "
"joint positions and velocities are set to 0.0."
msgstr ""
"对于关节，:class:`~assets.ArticulationCfg.InitialStateCfg`对象定义了关节根部的初始状态和所有关节的初始状态。在本示例中，我们将在XY平面的原点处生成Cartpole，高度为2.0米。同时，关节位置和速度设置为0.0。"

#: ../../source/how-to/write_articulation_cfg.rst:81
msgid "Defining the actuator configuration"
msgstr "定义执行器配置"

#: ../../source/how-to/write_articulation_cfg.rst:83
msgid ""
"Actuators are a crucial component of an articulation. Through this "
"configuration, it is possible to define the type of actuator model to use. "
"We can use the internal actuator model provided by the physics engine (i.e. "
"the implicit actuator model), or use a custom actuator model which is "
"governed by a user-defined system of equations (i.e. the explicit actuator "
"model). For more details on actuators, see :ref:`feature-actuators`."
msgstr ""
"执行器是关节的重要组件。通过此配置，可以定义要使用的执行器模型类型。可以使用物理引擎提供的内部执行器模型（即隐式执行器模型），也可以使用由用户定义的方程系统控制的自定义执行器模型（即显式执行器模型）。有关执行器的更多详情，请参见：ref:`feature-"
"actuators`。"

#: ../../source/how-to/write_articulation_cfg.rst:89
msgid ""
"The cartpole's articulation has two actuators, one corresponding to its each"
" joint: ``cart_to_pole`` and ``slider_to_cart``. We use two different "
"actuator models for these actuators as an example. However, since they are "
"both using the same actuator model, it is possible to combine them into a "
"single actuator model."
msgstr ""
"cartpole的关节有两个执行器，分别对应于它的每个关节：“cart_to_pole”和“slider_to_cart”。我们以此为例使用了两种不同的执行器模型。但是，由于它们都使用相同的执行器模型，可以将它们合并为一个单一的执行器模型。"

#: ../../source/how-to/write_articulation_cfg.rst
msgid "Actuator model configuration with separate actuator models"
msgstr "使用独立执行器模型的执行器模型配置"

#: ../../source/how-to/write_articulation_cfg.rst
msgid "Actuator model configuration with a single actuator model"
msgstr "使用单一执行器模型的执行器模型配置"
