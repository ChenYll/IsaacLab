# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/tutorials/00_sim/launch_app.rst:2
msgid "Deep-dive into AppLauncher"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:6
msgid "In this tutorial, we will dive into the :class:`app.AppLauncher` class to configure the simulator using CLI arguments and environment variables (envars). Particularly, we will demonstrate how to use :class:`~app.AppLauncher` to enable livestreaming and configure the :class:`omni.isaac.kit.SimulationApp` instance it wraps, while also allowing user-provided options."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:11
msgid "The :class:`~app.AppLauncher` is a wrapper for :class:`~omni.isaac.kit.SimulationApp` to simplify its configuration. The :class:`~omni.isaac.kit.SimulationApp` has many extensions that must be loaded to enable different capabilities, and some of these extensions are order- and inter-dependent. Additionally, there are startup options such as ``headless`` which must be set at instantiation time, and which have an implied relationship with some extensions, e.g. the livestreaming extensions. The :class:`~app.AppLauncher` presents an interface that can handle these extensions and startup options in a portable manner across a variety of use cases. To achieve this, we offer CLI and envar flags which can be merged with user-defined CLI args, while passing forward arguments intended for :class:`~omni.isaac.kit.SimulationApp`."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:23
msgid "The Code"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:25
msgid "The tutorial corresponds to the ``launch_app.py`` script in the ``source/standalone/tutorials/00_sim`` directory."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:0
msgid "Code for launch_app.py"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:37
msgid "The Code Explained"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:40
msgid "Adding arguments to the argparser"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:42
msgid ":class:`~app.AppLauncher` is designed to be compatible with custom CLI args that users need for their own scripts, while still providing a portable CLI interface."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:45
msgid "In this tutorial, a standard :class:`argparse.ArgumentParser` is instantiated and given the script-specific ``--size`` argument, as well as the arguments ``--height`` and ``--width``. The latter are ingested by :class:`~omni.isaac.kit.SimulationApp`."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:49
msgid "The argument ``--size`` is not used by :class:`~app.AppLauncher`, but will merge seamlessly with the :class:`~app.AppLauncher` interface. In-script arguments can be merged with the :class:`~app.AppLauncher` interface via the :meth:`~app.AppLauncher.add_app_launcher_args` method, which will return a modified :class:`~argparse.ArgumentParser` with the :class:`~app.AppLauncher` arguments appended. This can then be processed into an :class:`argparse.Namespace` using the standard :meth:`argparse.ArgumentParser.parse_args` method and passed directly to :class:`~app.AppLauncher` for instantiation."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:62
msgid "The above only illustrates only one of several ways of passing arguments to :class:`~app.AppLauncher`. Please consult its documentation page to see further options."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:66
msgid "Understanding the output of --help"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:68
msgid "While executing the script, we can pass the ``--help`` argument and see the combined outputs of the custom arguments and those from :class:`~app.AppLauncher`."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:102
msgid "This readout details the ``--size``, ``--height``, and ``--width`` arguments defined in the script directly, as well as the :class:`~app.AppLauncher` arguments."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:105
msgid "The ``[INFO]`` messages preceding the help output also reads out which of these arguments are going to be interpreted as arguments to the :class:`~omni.isaac.kit.SimulationApp` instance which the :class:`~app.AppLauncher` class wraps. In this case, it is ``--height`` and ``--width``. These are classified as such because they match the name and type of an argument which can be processed by :class:`~omni.isaac.kit.SimulationApp`. Please refer to the `specification`_ for such arguments for more examples."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:113
msgid "Using environment variables"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:115
msgid "As noted in the help message, the :class:`~app.AppLauncher` arguments (``--livestream``, ``--headless``) have corresponding environment variables (envar) as well. These are detailed in :mod:`omni.isaac.lab.app` documentation. Providing any of these arguments through CLI is equivalent to running the script in a shell environment where the corresponding envar is set."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:120
msgid "The support for :class:`~app.AppLauncher` envars are simply a convenience to provide session-persistent configurations, and can be set in the user's ``${HOME}/.bashrc`` for persistent settings between sessions. In the case where these arguments are provided from the CLI, they will override their corresponding envar, as we will demonstrate later in this tutorial."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:125
msgid "These arguments can be used with any script that starts the simulation using :class:`~app.AppLauncher`, with one exception, ``--enable_cameras``. This setting sets the rendering pipeline to use the offscreen renderer. However, this setting is only compatible with the :class:`omni.isaac.lab.sim.SimulationContext`. It will not work with Isaac Sim's :class:`omni.isaac.core.simulation_context.SimulationContext` class. For more information on this flag, please see the :class:`~app.AppLauncher` API documentation."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:133
msgid "The Code Execution"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:135
msgid "We will now run the example script:"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:141
msgid "This will spawn a 0.5m\\ :sup:`3` volume cuboid in the simulation. No GUI will appear, equivalent to if we had passed the ``--headless`` flag because headlessness is implied by our ``LIVESTREAM`` envar. If a visualization is desired, we could get one via Isaac's `Native Livestreaming`_. Streaming is currently the only supported method of visualization from within the container. The process can be killed by pressing ``Ctrl+C`` in the launching terminal."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:148
msgid "Now, let's look at how :class:`~app.AppLauncher` handles conflicting commands:"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:155
msgid "This will cause the same behavior as in the previous run, because although we have set ``LIVESTREAM=0`` in our envars, CLI args such as ``--livestream`` take precedence in determining behavior. The process can be killed by pressing ``Ctrl+C`` in the launching terminal."
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:159
msgid "Finally, we will examine passing arguments to :class:`~omni.isaac.kit.SimulationApp` through :class:`~app.AppLauncher`:"
msgstr ""

#: ../../source/tutorials/00_sim/launch_app.rst:167
msgid "This will cause the same behavior as before, but now the viewport will be rendered at 1920x1080p resolution. This can be useful when we want to gather high-resolution video, or we can specify a lower resolution if we want our simulation to be more performant. The process can be killed by pressing ``Ctrl+C`` in the launching terminal."
msgstr ""
