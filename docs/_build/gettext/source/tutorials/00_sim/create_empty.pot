# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/tutorials/00_sim/create_empty.rst:2
msgid "Creating an empty scene"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:6
msgid "This tutorial shows how to launch and control Isaac Sim simulator from a standalone Python script. It sets up an empty scene in Isaac Lab and introduces the two main classes used in the framework, :class:`app.AppLauncher` and :class:`sim.SimulationContext`."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:10
msgid "Please review `Isaac Sim Interface`_ and `Isaac Sim Workflows`_ prior to beginning this tutorial to get an initial understanding of working with the simulator."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:15
msgid "The Code"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:17
msgid "The tutorial corresponds to the ``create_empty.py`` script in the ``source/standalone/tutorials/00_sim`` directory."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:0
msgid "Code for create_empty.py"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:29
msgid "The Code Explained"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:32
msgid "Launching the simulator"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:34
msgid "The first step when working with standalone Python scripts is to launch the simulation application. This is necessary to do at the start since various dependency modules of Isaac Sim are only available after the simulation app is running."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:38
msgid "This can be done by importing the :class:`app.AppLauncher` class. This utility class wraps around :class:`omni.isaac.kit.SimulationApp` class to launch the simulator. It provides mechanisms to configure the simulator using command-line arguments and environment variables."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:42
msgid "For this tutorial, we mainly look at adding the command-line options to a user-defined :class:`argparse.ArgumentParser`. This is done by passing the parser instance to the :meth:`app.AppLauncher.add_app_launcher_args` method, which appends different parameters to it. These include launching the app headless, configuring different Livestream options, and enabling off-screen rendering."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:54
msgid "Importing python modules"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:56
msgid "Once the simulation app is running, it is possible to import different Python modules from Isaac Sim and other libraries. Here we import the following module:"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:59
msgid ":mod:`omni.isaac.lab.sim`: A sub-package in Isaac Lab for all the core simulator-related operations."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:68
msgid "Configuring the simulation context"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:70
msgid "When launching the simulator from a standalone script, the user has complete control over playing, pausing and stepping the simulator. All these operations are handled through the **simulation context**. It takes care of various timeline events and also configures the `physics scene`_ for simulation."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:75
msgid "In Isaac Lab, the :class:`sim.SimulationContext` class inherits from Isaac Sim's :class:`omni.isaac.core.simulation_context.SimulationContext` to allow configuring the simulation through Python's ``dataclass`` object and handle certain intricacies of the simulation stepping."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:79
msgid "For this tutorial, we set the physics and rendering time step to 0.01 seconds. This is done by passing these quantities to the :class:`sim.SimulationCfg`, which is then used to create an instance of the simulation context."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:89
msgid "Following the creation of the simulation context, we have only configured the physics acting on the simulated scene. This includes the device to use for simulation, the gravity vector, and other advanced solver parameters. There are now two main steps remaining to run the simulation:"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:93
msgid "Designing the simulation scene: Adding sensors, robots and other simulated objects"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:94
msgid "Running the simulation loop: Stepping the simulator, and setting and getting data from the simulator"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:96
msgid "In this tutorial, we look at Step 2 first for an empty scene to focus on the simulation control first. In the following tutorials, we will look into Step 1 and working with simulation handles for interacting with the simulator."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:101
msgid "Running the simulation"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:103
msgid "The first thing, after setting up the simulation scene, is to call the :meth:`sim.SimulationContext.reset` method. This method plays the timeline and initializes the physics handles in the simulator. It must always be called the first time before stepping the simulator. Otherwise, the simulation handles are not initialized properly."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:110
msgid ":meth:`sim.SimulationContext.reset` is different from :meth:`sim.SimulationContext.play` method as the latter only plays the timeline and does not initializes the physics handles."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:113
msgid "After playing the simulation timeline, we set up a simple simulation loop where the simulator is stepped repeatedly while the simulation app is running. The method :meth:`sim.SimulationContext.step` takes in as argument :attr:`render`, which dictates whether the step includes updating the rendering-related events or not. By default, this flag is set to True."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:124
msgid "Exiting the simulation"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:126
msgid "Lastly, the simulation application is stopped and its window is closed by calling :meth:`omni.isaac.kit.SimulationApp.close` method."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:136
msgid "The Code Execution"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:138
msgid "Now that we have gone through the code, let's run the script and see the result:"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:145
msgid "The simulation should be playing, and the stage should be rendering. To stop the simulation, you can either close the window, or press ``Ctrl+C`` in the terminal."
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:148
msgid "Passing ``--help`` to the above script will show the different command-line arguments added earlier by the :class:`app.AppLauncher` class. To run the script headless, you can execute the following:"
msgstr ""

#: ../../source/tutorials/00_sim/create_empty.rst:157
msgid "Now that we have a basic understanding of how to run a simulation, let's move on to the following tutorial where we will learn how to add assets to the stage."
msgstr ""
