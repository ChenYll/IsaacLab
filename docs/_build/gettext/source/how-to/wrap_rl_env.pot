# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/how-to/wrap_rl_env.rst:5
msgid "Wrapping environments"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:9
msgid "Environment wrappers are a way to modify the behavior of an environment without modifying the environment itself. This can be used to apply functions to modify observations or rewards, record videos, enforce time limits, etc. A detailed description of the API is available in the :class:`gymnasium.Wrapper` class."
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:13
msgid "At present, all RL environments inheriting from the :class:`~envs.ManagerBasedRLEnv` class are compatible with :class:`gymnasium.Wrapper`, since the base class implements the :class:`gymnasium.Env` interface. In order to wrap an environment, you need to first initialize the base environment. After that, you can wrap it with as many wrappers as you want by calling ``env = wrapper(env, *args, **kwargs)`` repeatedly."
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:18
msgid "For example, here is how you would wrap an environment to enforce that reset is called before step or render:"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:46
msgid "Wrapper for recording videos"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:48
msgid "The :class:`gymnasium.wrappers.RecordVideo` wrapper can be used to record videos of the environment. The wrapper takes a ``video_dir`` argument, which specifies where to save the videos. The videos are saved in `mp4 <https://en.wikipedia.org/wiki/MP4_file_format>`__ format at specified intervals for specified number of environment steps or episodes."
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:53
msgid "To use the wrapper, you need to first install ``ffmpeg``. On Ubuntu, you can install it by running:"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:61
msgid "By default, when running an environment in headless mode, the Omniverse viewport is disabled. This is done to improve performance by avoiding unnecessary rendering."
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:64
msgid "We notice the following performance in different rendering modes with the  ``Isaac-Reach-Franka-v0`` environment using an RTX 3090 GPU:"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:67
msgid "No GUI execution without off-screen rendering enabled: ~65,000 FPS"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:68
msgid "No GUI execution with off-screen enabled: ~57,000 FPS"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:69
msgid "GUI execution with full rendering: ~13,000 FPS"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:72
msgid "The viewport camera used for rendering is the default camera in the scene called ``\"/OmniverseKit_Persp\"``. The camera's pose and image resolution can be configured through the :class:`~envs.ViewerCfg` class."
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:0
msgid "Default parameters of the ViewerCfg class:"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:85
msgid "After adjusting the parameters, you can record videos by wrapping the environment with the :class:`gymnasium.wrappers.RecordVideo` wrapper and enabling the off-screen rendering flag. Additionally, you need to specify the render mode of the environment as ``\"rgb_array\"``."
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:89
msgid "As an example, the following code records a video of the ``Isaac-Reach-Franka-v0`` environment for 200 steps, and saves it in the ``videos`` folder at a step interval of 1500 steps."
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:124
msgid "Wrapper for learning frameworks"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:126
msgid "Every learning framework has its own API for interacting with environments. For example, the `Stable-Baselines3`_ library uses the `gym.Env <https://gymnasium.farama.org/api/env/>`_ interface to interact with environments. However, libraries like `RL-Games`_, `RSL-RL`_ or `SKRL`_ use their own API for interfacing with a learning environments. Since there is no one-size-fits-all solution, we do not base the :class:`~envs.ManagerBasedRLEnv` class on any particular learning framework's environment definition. Instead, we implement wrappers to make it compatible with the learning framework's environment definition."
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:134
msgid "As an example of how to use the RL task environment with Stable-Baselines3:"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:148
msgid "Wrapping the environment with the respective learning framework's wrapper should happen in the end, i.e. after all other wrappers have been applied. This is because the learning framework's wrapper modifies the interpretation of environment's APIs which may no longer be compatible with :class:`gymnasium.Env`."
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:154
msgid "Adding new wrappers"
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:156
msgid "All new wrappers should be added to the :mod:`omni.isaac.lab_tasks.utils.wrappers` module. They should check that the underlying environment is an instance of :class:`omni.isaac.lab.envs.ManagerBasedRLEnv` before applying the wrapper. This can be done by using the :func:`unwrapped` property."
msgstr ""

#: ../../source/how-to/wrap_rl_env.rst:160
msgid "We include a set of wrappers in this module that can be used as a reference to implement your own wrappers. If you implement a new wrapper, please consider contributing it to the framework by opening a pull request."
msgstr ""
