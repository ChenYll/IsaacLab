# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 12:43+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/setup/sample.rst:2
msgid "Running Existing Scripts"
msgstr ""

#: ../../source/setup/sample.rst:5
msgid "Showroom"
msgstr ""

#: ../../source/setup/sample.rst:7
msgid "The main core interface extension in Isaac Lab ``omni.isaac.lab`` provides the main modules for actuators, objects, robots and sensors. We provide a list of demo scripts and tutorials. These showcase how to use the provided interfaces within a code in a minimal way."
msgstr ""

#: ../../source/setup/sample.rst:12
msgid "A few quick showroom scripts to run and checkout:"
msgstr ""

#: ../../source/setup/sample.rst:14
msgid "Spawn different quadrupeds and make robots stand using position commands:"
msgstr ""

#: ../../source/setup/sample.rst:20
msgid "Spawn different arms and apply random joint position commands:"
msgstr ""

#: ../../source/setup/sample.rst:26
msgid "Spawn different hands and command them to open and close:"
msgstr ""

#: ../../source/setup/sample.rst:32
msgid "Spawn procedurally generated terrains with different configurations:"
msgstr ""

#: ../../source/setup/sample.rst:38
msgid "Spawn multiple markers that are useful for visualizations:"
msgstr ""

#: ../../source/setup/sample.rst:45
msgid "Workflows"
msgstr ""

#: ../../source/setup/sample.rst:47
msgid "With Isaac Lab, we also provide a suite of benchmark environments included in the ``omni.isaac.lab_tasks`` extension. We use the OpenAI Gym registry to register these environments. For each environment, we provide a default configuration file that defines the scene, observations, rewards and action spaces."
msgstr ""

#: ../../source/setup/sample.rst:52
msgid "The list of environments available registered with OpenAI Gym can be found by running:"
msgstr ""

#: ../../source/setup/sample.rst:60
msgid "Basic agents"
msgstr ""

#: ../../source/setup/sample.rst:62
msgid "These include basic agents that output zero or random agents. They are useful to ensure that the environments are configured correctly."
msgstr ""

#: ../../source/setup/sample.rst:65
msgid "Zero-action agent on the Cart-pole example"
msgstr ""

#: ../../source/setup/sample.rst:71
msgid "Random-action agent on the Cart-pole example:"
msgstr ""

#: ../../source/setup/sample.rst:79
msgid "State machine"
msgstr ""

#: ../../source/setup/sample.rst:81
msgid "We include examples on hand-crafted state machines for the environments. These help in understanding the environment and how to use the provided interfaces. The state machines are written in `warp <https://github.com/NVIDIA/warp>`__ which allows efficient execution for large number of environments using CUDA kernels."
msgstr ""

#: ../../source/setup/sample.rst:92
msgid "Teleoperation"
msgstr ""

#: ../../source/setup/sample.rst:94
msgid "We provide interfaces for providing commands in SE(2) and SE(3) space for robot control. In case of SE(2) teleoperation, the returned command is the linear x-y velocity and yaw rate, while in SE(3), the returned command is a 6-D vector representing the change in pose."
msgstr ""

#: ../../source/setup/sample.rst:99
msgid "To play inverse kinematics (IK) control with a keyboard device:"
msgstr ""

#: ../../source/setup/sample.rst:105
msgid "The script prints the teleoperation events configured. For keyboard, these are as follows:"
msgstr ""

#: ../../source/setup/sample.rst:121
msgid "Imitation Learning"
msgstr ""

#: ../../source/setup/sample.rst:123
msgid "Using the teleoperation devices, it is also possible to collect data for learning from demonstrations (LfD). For this, we support the learning framework `Robomimic <https://robomimic.github.io/>`__ (Linux only) and allow saving data in `HDF5 <https://robomimic.github.io/docs/tutorials/dataset_contents.html#viewing-hdf5-dataset-structure>`__ format."
msgstr ""

#: ../../source/setup/sample.rst:130
msgid "Collect demonstrations with teleoperation for the environment ``Isaac-Lift-Cube-Franka-IK-Rel-v0``:"
msgstr ""

#: ../../source/setup/sample.rst:140
msgid "Split the dataset into train and validation set:"
msgstr ""

#: ../../source/setup/sample.rst:151
msgid "Train a BC agent for ``Isaac-Lift-Cube-Franka-IK-Rel-v0`` with `Robomimic <https://robomimic.github.io/>`__:"
msgstr ""

#: ../../source/setup/sample.rst:158
msgid "Play the learned model to visualize results:"
msgstr ""

#: ../../source/setup/sample.rst:165
msgid "Reinforcement Learning"
msgstr ""

#: ../../source/setup/sample.rst:167
msgid "We provide wrappers to different reinforcement libraries. These wrappers convert the data from the environments into the respective libraries function argument and return types."
msgstr ""

#: ../../source/setup/sample.rst:170
msgid "Training an agent with `Stable-Baselines3 <https://stable-baselines3.readthedocs.io/en/master/index.html>`__ on ``Isaac-Cartpole-v0``:"
msgstr ""

#: ../../source/setup/sample.rst:184
msgid "Training an agent with `SKRL <https://skrl.readthedocs.io>`__ on ``Isaac-Reach-Franka-v0``:"
msgstr ""

#: ../../source/setup/sample.rst:0
msgid "PyTorch"
msgstr ""

#: ../../source/setup/sample.rst:0
msgid "JAX"
msgstr ""

#: ../../source/setup/sample.rst:213
msgid "Training an agent with `RL-Games <https://github.com/Denys88/rl_games>`__ on ``Isaac-Ant-v0``:"
msgstr ""

#: ../../source/setup/sample.rst:225
msgid "Training an agent with `RSL-RL <https://github.com/leggedrobotics/rsl_rl>`__ on ``Isaac-Reach-Franka-v0``:"
msgstr ""

#: ../../source/setup/sample.rst:237
msgid "All the scripts above log the training progress to `Tensorboard`_ in the ``logs`` directory in the root of the repository. The logs directory follows the pattern ``logs/<library>/<task>/<date-time>``, where ``<library>`` is the name of the learning framework, ``<task>`` is the task name, and ``<date-time>`` is the timestamp at which the training script was executed."
msgstr ""

#: ../../source/setup/sample.rst:242
msgid "To view the logs, run:"
msgstr ""
