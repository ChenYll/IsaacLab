# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 12:43+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/setup/developer.rst:2
msgid "Developer's Guide"
msgstr ""

#: ../../source/setup/developer.rst:4
msgid "For development, we suggest using `Microsoft Visual Studio Code (VSCode) <https://code.visualstudio.com/>`__. This is also suggested by NVIDIA Omniverse and there exists tutorials on how to `debug Omniverse extensions <https://www.youtube.com/watch?v=Vr1bLtF1f4U&ab_channel=NVIDIAOmniverse>`__ using VSCode."
msgstr ""

#: ../../source/setup/developer.rst:12
msgid "Setting up Visual Studio Code"
msgstr ""

#: ../../source/setup/developer.rst:14
msgid "The following is only applicable for Isaac Sim installed via the Omniverse Launcher. The ``Isaac Lab`` repository includes the VSCode settings to easily allow setting up your development environment. These are included in the ``.vscode`` directory and include the following files:"
msgstr ""

#: ../../source/setup/developer.rst:32
msgid "To setup the IDE, please follow these instructions:"
msgstr ""

#: ../../source/setup/developer.rst:34
msgid "Open the ``Isaac Lab`` directory on Visual Studio Code IDE"
msgstr ""

#: ../../source/setup/developer.rst:35
msgid "Run VSCode `Tasks <https://code.visualstudio.com/docs/editor/tasks>`__, by pressing ``Ctrl+Shift+P``, selecting ``Tasks: Run Task`` and running the ``setup_python_env`` in the drop down menu."
msgstr ""

#: ../../source/setup/developer.rst:0
msgid "VSCode Tasks"
msgstr ""

#: ../../source/setup/developer.rst:44
msgid "If everything executes correctly, it should create the following files:"
msgstr ""

#: ../../source/setup/developer.rst:46
msgid "``.vscode/launch.json``: Contains the launch configurations for debugging python code."
msgstr ""

#: ../../source/setup/developer.rst:47
msgid "``.vscode/settings.json``: Contains the settings for the python interpreter and the python environment."
msgstr ""

#: ../../source/setup/developer.rst:49
msgid "For more information on VSCode support for Omniverse, please refer to the following links:"
msgstr ""

#: ../../source/setup/developer.rst:52
msgid "`Isaac Sim VSCode support <https://docs.omniverse.nvidia.com/app_isaacsim/app_isaacsim/manual_standalone_python.html#isaac-sim-python-vscode>`__"
msgstr ""

#: ../../source/setup/developer.rst:53
msgid "`Debugging with VSCode <https://docs.omniverse.nvidia.com/isaacsim/latest/advanced_tutorials/tutorial_advanced_python_debugging.html>`__"
msgstr ""

#: ../../source/setup/developer.rst:57
msgid "Configuring the python interpreter"
msgstr ""

#: ../../source/setup/developer.rst:59
msgid "In the provided configuration, we set the default python interpreter to use the python executable provided by Omniverse. This is specified in the ``.vscode/settings.json`` file:"
msgstr ""

#: ../../source/setup/developer.rst:69
msgid "If you want to use a different python interpreter (for instance, from your conda environment), you need to change the python interpreter used by selecting and activating the python interpreter of your choice in the bottom left corner of VSCode, or opening the command palette (``Ctrl+Shift+P``) and selecting ``Python: Select Interpreter``."
msgstr ""

#: ../../source/setup/developer.rst:74
msgid "For more information on how to set python interpreter for VSCode, please refer to the `VSCode documentation <https://code.visualstudio.com/docs/python/environments#_working-with-python-interpreters>`_."
msgstr ""

#: ../../source/setup/developer.rst:78
msgid "Repository organization"
msgstr ""

#: ../../source/setup/developer.rst:80
msgid "The ``Isaac Lab`` repository is structured as follows:"
msgstr ""

#: ../../source/setup/developer.rst:105
msgid "The ``source`` directory contains the source code for all ``Isaac Lab`` *extensions* and *standalone applications*. The two are the different development workflows supported in `Isaac Sim <https://docs.omniverse.nvidia.com/isaacsim/latest/introductory_tutorials/tutorial_intro_workflows.html>`__. These are described in the following sections."
msgstr ""

#: ../../source/setup/developer.rst:111
msgid "Extensions"
msgstr ""

#: ../../source/setup/developer.rst:113
msgid "Extensions are the recommended way to develop applications in Isaac Sim. They are modularized packages that formulate the Omniverse ecosystem. Each extension provides a set of functionalities that can be used by other extensions or standalone applications. A folder is recognized as an extension if it contains an ``extension.toml`` file in the ``config`` directory. More information on extensions can be found in the `Omniverse documentation <https://docs.omniverse.nvidia.com/kit/docs/kit-manual/latest/guide/extensions_basic.html>`__."
msgstr ""

#: ../../source/setup/developer.rst:120
msgid "Isaac Lab in itself provides extensions for robot learning. These are written into the ``source/extensions`` directory. Each extension is written as a python package and follows the following structure:"
msgstr ""

#: ../../source/setup/developer.rst:139
msgid "The ``config/extension.toml`` file contains the metadata of the extension. This includes the name, version, description, dependencies, etc. This information is used by Omniverse to load the extension. The ``docs`` directory contains the documentation for the extension with more detailed information about the extension and a CHANGELOG file that contains the changes made to the extension in each version."
msgstr ""

#: ../../source/setup/developer.rst:145
msgid "The ``<extension-name>`` directory contains the main python package for the extension. It may also contains the ``scripts`` directory for keeping python-based applications that are loaded into Omniverse when then extension is enabled using the `Extension Manager <https://docs.omniverse.nvidia.com/kit/docs/kit-manual/latest/guide/extensions_basic.html>`__."
msgstr ""

#: ../../source/setup/developer.rst:150
msgid "More specifically, when an extension is enabled, the python module specified in the ``config/extension.toml`` file is loaded and scripts that contains children of the :class:`omni.ext.IExt` class are executed."
msgstr ""

#: ../../source/setup/developer.rst:172
msgid "While loading extensions into Omniverse happens automatically, using the python package in standalone applications requires additional steps. To simplify the build process and avoiding the need to understand the `premake <https://premake.github.io/>`__ build system used by Omniverse, we directly use the `setuptools <https://setuptools.readthedocs.io/en/latest/>`__ python package to build the python module provided by the extensions. This is done by the ``setup.py`` file in the extension directory."
msgstr ""

#: ../../source/setup/developer.rst:181
msgid "The ``setup.py`` file is not required for extensions that are only loaded into Omniverse using the `Extension Manager <https://docs.omniverse.nvidia.com/prod_extensions/prod_extensions/ext_extension-manager.html>`__."
msgstr ""

#: ../../source/setup/developer.rst:184
msgid "Lastly, the ``tests`` directory contains the unit tests for the extension. These are written using the `unittest <https://docs.python.org/3/library/unittest.html>`__ framework. It is important to note that Omniverse also provides a similar `testing framework <https://docs.omniverse.nvidia.com/kit/docs/kit-manual/104.0/guide/testing_exts_python.html>`__. However, it requires going through the build process and does not support testing of the python module in standalone applications."
msgstr ""

#: ../../source/setup/developer.rst:192
msgid "Extension Dependency Management"
msgstr ""

#: ../../source/setup/developer.rst:194
msgid "Certain extensions may have dependencies which need to be installed before the extension can be run. While Python dependencies can be expressed via the ``INSTALL_REQUIRES`` array in ``setup.py``, we need a separate installation pipeline to handle non-Python dependencies. We have therefore created an additional setup procedure, ``python tools/install_deps.py {dep_type} {extensions_dir}``, which scans the ``extension.toml`` file of the directories under the ``{extensions_dir}`` (such as ``${ISAACLAB_PATH}/source/extensions``) for ``apt`` and ``rosdep`` dependencies."
msgstr ""

#: ../../source/setup/developer.rst:200
msgid "This example ``extension.toml`` has both ``apt_deps`` and ``ros_ws`` specified, so both ``apt`` and ``rosdep`` packages will be installed if ``python tools/install_deps.py all ${ISAACLAB_PATH}/source/extensions`` is passed:"
msgstr ""

#: ../../source/setup/developer.rst:210
msgid "From the ``apt_deps`` in the above example, the package ``example_package`` would be installed via ``apt``. From the ``ros_ws``, a ``rosdep install --from-paths {ros_ws}/src --ignore-src`` command will be called. This will install all the `ROS package.xml dependencies <https://docs.ros.org/en/humble/Tutorials/Intermediate/Rosdep.html>`__ in the directory structure below. Currently the ROS distro is assumed to be ``humble``."
msgstr ""

#: ../../source/setup/developer.rst:215
msgid "``apt`` deps are automatically installed this way during the build process of the ``Dockerfile.base``, and ``rosdep`` deps during the build process of ``Dockerfile.ros2``."
msgstr ""

#: ../../source/setup/developer.rst:220
msgid "Standalone applications"
msgstr ""

#: ../../source/setup/developer.rst:222
msgid "In a typical Omniverse workflow, the simulator is launched first, after which the extensions are enabled that load the python module and run the python application. While this is a recommended workflow, it is not always possible to use this workflow. For example, for robot learning, it is essential to have complete control over simulation stepping and all the other functionalities instead of asynchronously waiting for the simulator to step. In such cases, it is necessary to write a standalone application that launches the simulator using :class:`~omni.isaac.lab.app.AppLauncher` and allows complete control over the simulation through the :class:`~omni.isaac.lab.sim.SimulationContext` class."
msgstr ""

#: ../../source/setup/developer.rst:260
msgid "The ``source/standalone`` directory contains various standalone applications designed using the extensions provided by ``Isaac Lab``. These applications are written in python and are structured as follows:"
msgstr ""

#: ../../source/setup/developer.rst:263
msgid "**demos**: Contains various demo applications that showcase the core framework ``omni.isaac.lab``."
msgstr ""

#: ../../source/setup/developer.rst:264
msgid "**environments**: Contains applications for running environments defined in ``omni.isaac.lab_tasks`` with different agents. These include a random policy, zero-action policy, teleoperation or scripted state machines."
msgstr ""

#: ../../source/setup/developer.rst:266
msgid "**tools**: Contains applications for using the tools provided by the framework. These include converting assets, generating datasets, etc."
msgstr ""

#: ../../source/setup/developer.rst:268
msgid "**tutorials**: Contains step-by-step tutorials for using the APIs provided by the framework."
msgstr ""

#: ../../source/setup/developer.rst:269
msgid "**workflows**: Contains applications for using environments with various learning-based frameworks. These include different reinforcement learning or imitation learning libraries."
msgstr ""
