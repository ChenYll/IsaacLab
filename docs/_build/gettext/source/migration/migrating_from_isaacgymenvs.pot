# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/migration/migrating_from_isaacgymenvs.rst:4
msgid "From IsaacGymEnvs"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:9
msgid "`IsaacGymEnvs`_ was a reinforcement learning framework designed for the `Isaac Gym Preview Release`_. As both IsaacGymEnvs and the Isaac Gym Preview Release are now deprecated, the following guide walks through the key differences between IsaacGymEnvs and Isaac Lab, as well as differences in APIs between Isaac Gym Preview Release and Isaac Sim."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:16
msgid "Task Config Setup"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:18
msgid "In IsaacGymEnvs, task config files were defined in ``.yaml`` format. With Isaac Lab, configs are now specified using a specialized Python class :class:`~omni.isaac.lab.utils.configclass`. The :class:`~omni.isaac.lab.utils.configclass` module provides a wrapper on top of Python's ``dataclasses`` module. Each environment should specify its own config class annotated by ``@configclass`` that inherits from :class:`~envs.DirectRLEnvCfg`, which can include simulation parameters, environment scene parameters, robot parameters, and task-specific parameters."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:24
msgid "Below is an example skeleton of a task config class:"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:50
msgid "Simulation Config"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:52
msgid "Simulation related parameters are defined as part of the :class:`~omni.isaac.lab.sim.SimulationCfg` class, which is a :class:`~omni.isaac.lab.utils.configclass` module that holds simulation parameters such as ``dt``, ``device``, and ``gravity``. Each task config must have a variable named ``sim`` defined that holds the type :class:`~omni.isaac.lab.sim.SimulationCfg`."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:57
msgid "In Isaac Lab, the use of ``substeps`` has been replaced by a combination of the simulation ``dt`` and the ``decimation`` parameters. For example, in IsaacGymEnvs, having ``dt=1/60`` and ``substeps=2`` is equivalent to taking 2 simulation steps with ``dt=1/120``, but running the task step at ``1/60`` seconds. The ``decimation`` parameter is a task parameter that controls the number of simulation steps to take for each task (or RL) step, replacing the ``controlFrequencyInv`` parameter in IsaacGymEnvs. Thus, the same setup in Isaac Lab will become ``dt=1/120`` and ``decimation=2``."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:64
msgid "In Isaac Sim, physx simulation parameters such as ``num_position_iterations``, ``num_velocity_iterations``, ``contact_offset``, ``rest_offset``, ``bounce_threshold_velocity``, ``max_depenetration_velocity`` can all be specified on a per-actor basis. These parameters have been moved from the physx simulation config to each individual articulation and rigid body config."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:69
msgid "When running simulation on the GPU, buffers in PhysX require pre-allocation for computing and storing information such as contacts, collisions and aggregate pairs. These buffers may need to be adjusted depending on the complexity of the environment, the number of expected contacts and collisions, and the number of actors in the environment. The :class:`~omni.isaac.lab.sim.PhysxCfg` class provides access for setting the GPU buffer dimensions."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:104
msgid "Scene Config"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:106
msgid "The :class:`~omni.isaac.lab.scene.InteractiveSceneCfg` class can be used to specify parameters related to the scene, such as the number of environments and the spacing between environments. Each task config must have a variable named ``scene`` defined that holds the type :class:`~omni.isaac.lab.scene.InteractiveSceneCfg`."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:121
#: ../../source/migration/migrating_from_isaacgymenvs.rst:542
msgid "Task Config"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:123
msgid "Each environment should specify its own config class that holds task specific parameters, such as the dimensions of the observation and action buffers. Reward term scaling parameters can also be specified in the config class."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:126
msgid "The following parameters must be set for each environment config:"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:136
msgid "Note that the maximum episode length parameter (now ``episode_length_s``) is in seconds instead of steps as it was in IsaacGymEnvs. To convert between step count to seconds, use the equation: ``episode_length_s = dt * decimation * num_steps``"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:142
msgid "RL Config Setup"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:144
msgid "RL config files for the rl_games library can continue to be defined in ``.yaml`` files in Isaac Lab. Most of the content of the config file can be copied directly from IsaacGymEnvs. Note that in Isaac Lab, we do not use hydra to resolve relative paths in config files. Please replace any relative paths such as ``${....device}`` with the actual values of the parameters."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:149
msgid "Additionally, the observation and action clip ranges have been moved to the RL config file. For any ``clipObservations`` and ``clipActions`` parameters that were defined in the IsaacGymEnvs task config file, they should be moved to the RL config file in Isaac Lab."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:155
msgid "IsaacGymEnvs Task Config"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:155
msgid "Isaac Lab RL Config"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:167
msgid "Environment Creation"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:169
msgid "In IsaacGymEnvs, environment creation generally included four components: creating the sim object with ``create_sim()``, creating the ground plane, importing the assets from MJCF or URDF files, and finally creating the environments by looping through each environment and adding actors into the environments."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:173
msgid "Isaac Lab no longer requires calling the ``create_sim()`` method to retrieve the sim object. Instead, the simulation context is retrieved automatically by the framework. It is also no longer required to use the ``sim`` as an argument for the simulation APIs."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:177
msgid "In replacement of ``create_sim()``, tasks can implement the ``_setup_scene()`` method in Isaac Lab. This method can be used for adding actors into the scene, adding ground plane, cloning the actors, and adding any other optional objects into the scene, such as lights."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:182
#: ../../source/migration/migrating_from_isaacgymenvs.rst:399
#: ../../source/migration/migrating_from_isaacgymenvs.rst:419
#: ../../source/migration/migrating_from_isaacgymenvs.rst:501
#: ../../source/migration/migrating_from_isaacgymenvs.rst:545
#: ../../source/migration/migrating_from_isaacgymenvs.rst:601
#: ../../source/migration/migrating_from_isaacgymenvs.rst:643
#: ../../source/migration/migrating_from_isaacgymenvs.rst:740
#: ../../source/migration/migrating_from_isaacgymenvs.rst:775
#: ../../source/migration/migrating_from_isaacgymenvs.rst:828
#: ../../source/migration/migrating_from_isaacgymenvs.rst:855
msgid "IsaacGymEnvs"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:182
#: ../../source/migration/migrating_from_isaacgymenvs.rst:399
#: ../../source/migration/migrating_from_isaacgymenvs.rst:419
#: ../../source/migration/migrating_from_isaacgymenvs.rst:501
#: ../../source/migration/migrating_from_isaacgymenvs.rst:545
#: ../../source/migration/migrating_from_isaacgymenvs.rst:601
#: ../../source/migration/migrating_from_isaacgymenvs.rst:643
#: ../../source/migration/migrating_from_isaacgymenvs.rst:775
#: ../../source/migration/migrating_from_isaacgymenvs.rst:828
#: ../../source/migration/migrating_from_isaacgymenvs.rst:855
msgid "Isaac Lab"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:202
msgid "Ground Plane"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:204
msgid "In Isaac Lab, most of the environment creation process has been simplified into configs with the :class:`~omni.isaac.lab.utils.configclass` module."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:206
msgid "The ground plane can be defined using the :class:`~terrains.TerrainImporterCfg` class."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:225
msgid "The terrain can then be added to the scene in ``_setup_scene(self)`` by referencing the ``TerrainImporterCfg`` object:"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:237
msgid "Actors"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:239
msgid "Isaac Lab and Isaac Sim both use the `USD (Universal Scene Description) <https://github.com/PixarAnimationStudios/OpenUSD>`_ library for describing the scene. Assets defined in MJCF and URDF formats can be imported to USD using importer tools described in the `Importing a New Asset <../how-to/import_new_asset.html>`_ tutorial."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:243
msgid "Each Articulation and Rigid Body actor can also have its own config class. The :class:`~omni.isaac.lab.assets.ArticulationCfg` class can be used to define parameters for articulation actors, including file path, simulation parameters, actuator properties, and initial states."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:287
msgid "Within the :class:`~assets.ArticulationCfg`, the ``spawn`` attribute can be used to add the robot to the scene by specifying the path to the robot file. In addition, :class:`~omni.isaac.lab.sim.schemas.RigidBodyPropertiesCfg` can be used to specify simulation properties for the rigid bodies in the articulation. Similarly, the :class:`~omni.isaac.lab.sim.schemas.ArticulationRootPropertiesCfg` class can be used to specify simulation properties for the articulation. Joint properties are now specified as part of the ``actuators`` dictionary using :class:`~actuators.ImplicitActuatorCfg`. Joints with the same properties can be grouped into regex expressions or provided as a list of names or expressions."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:295
msgid "Actors are added to the scene by simply calling ``self.cartpole = Articulation(self.cfg.robot_cfg)``, where ``self.cfg.robot_cfg`` is an :class:`~assets.ArticulationCfg` object. Once initialized, they should also be added to the :class:`~scene.InteractiveScene` by calling ``self.scene.articulations[\"cartpole\"] = self.cartpole`` so that the :class:`~scene.InteractiveScene` can traverse through actors in the scene for writing values to the simulation and resetting."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:302
msgid "Simulation Parameters for Actors"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:304
msgid "Some simulation parameters related to Rigid Bodies and Articulations may have different default values between Isaac Gym Preview Release and Isaac Sim. It may be helpful to double check the USD assets to ensure that the default values are applicable for the asset."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:309
msgid "For instance, the following parameters in the ``RigidBodyAPI`` could be different between Isaac Gym Preview Release and Isaac Sim:"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:316
msgid "RigidBodyAPI Parameter"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:317
#: ../../source/migration/migrating_from_isaacgymenvs.rst:345
msgid "Default Value in Isaac Sim"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:318
msgid "Default Value in Isaac Gym Preview Release"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:319
msgid "Linear Damping"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:320
#: ../../source/migration/migrating_from_isaacgymenvs.rst:321
msgid "0.00"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:322
msgid "Angular Damping"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:323
msgid "0.05"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:324
msgid "0.0"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:325
msgid "Max Linear Velocity"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:326
#: ../../source/migration/migrating_from_isaacgymenvs.rst:332
msgid "inf"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:327
msgid "1000"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:328
msgid "Max Angular Velocity"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:329
msgid "5729.58008 (degree/s)"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:330
msgid "64.0 (rad/s)"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:331
msgid "Max Contact Impulse"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:333
msgid "1e32"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:335
msgid "Articulation parameters for the ``JointAPI`` and ``DriveAPI`` could be altered as well. Note that the Isaac Sim UI assumes the unit of angle to be degrees. It is particularly worth noting that the ``Damping`` and ``Stiffness`` parameters in the ``DriveAPI`` have the unit of ``1/deg`` in the Isaac Sim UI but ``1/rad`` in Isaac Gym Preview Release."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:344
msgid "Joint Parameter"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:346
msgid "Default Value in Isaac Gym Preview Releases"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:347
msgid "Maximum Joint Velocity"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:348
msgid "1000000.0 (deg)"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:349
msgid "100.0 (rad)"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:353
msgid "Cloner"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:355
msgid "Isaac Sim introduced a concept of ``Cloner``, which is a class designed for replication during the scene creation process. In IsaacGymEnvs, scenes had to be created by looping through the number of environments. Within each iteration, actors were added to each environment and their handles had to be cached. Isaac Lab eliminates the need for looping through the environments by using the ``Cloner`` APIs. The scene creation process is as follow:"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:361
msgid "Construct a single environment (what the scene would look like if number of environments = 1)"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:362
msgid "Call ``clone_environments()`` to replicate the single environment"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:363
msgid "Call ``filter_collisions()`` to filter out collision between environments (if required)"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:377
msgid "Accessing States from Simulation"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:379
msgid "APIs for accessing physics states in Isaac Lab require the creation of an :class:`~assets.Articulation` or :class:`~assets.RigidObject` object. Multiple objects can be initialized for different articulations or rigid bodies in the scene by defining corresponding :class:`~assets.ArticulationCfg` or :class:`~assets.RigidObjectCfg` config  as outlined in the section above. This approach eliminates the need of retrieving body handles to slice states for specific bodies in the scene."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:392
msgid "We have also removed ``acquire`` and ``refresh`` APIs in Isaac Lab. Physics states can be directly applied or retrieved using APIs defined for the articulations and rigid objects."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:395
msgid "APIs provided in Isaac Lab no longer require explicit wrapping and un-wrapping of underlying buffers. APIs can now work with tensors directly for reading and writing data."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:408
msgid "Note some naming differences between APIs in Isaac Gym Preview Release and Isaac Lab. Most ``dof`` related APIs have been named to ``joint`` in Isaac Lab. APIs in Isaac Lab also no longer follow the explicit ``_tensors`` or ``_tensor_indexed`` suffixes in naming. Indexed versions of APIs now happen implicitly through the optional ``indices`` parameter."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:413
msgid "Most APIs in Isaac Lab also provide the option to specify an ``indices`` parameter, which can be used when reading or writing data for a subset of environments. Note that when setting states with the ``indices`` parameter, the shape of the states buffer should match with the dimension of the ``indices`` list."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:430
msgid "Quaternion Convention"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:432
msgid "Isaac Lab and Isaac Sim both adopt ``wxyz`` as the quaternion convention. However, the quaternion convention used in Isaac Gym Preview Release was ``xyzw``. Remember to switch all quaternions to use the ``xyzw`` convention when working indexing rotation data. Similarly, please ensure all quaternions are in ``wxyz`` before passing them to Isaac Lab APIs."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:439
msgid "Articulation Joint Order"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:441
msgid "Physics simulation in Isaac Sim and Isaac Lab assumes a breadth-first ordering for the joints in a given kinematic tree. However, Isaac Gym Preview Release assumed a depth-first ordering for joints in the kinematic tree. This means that indexing joints based on their ordering may be different in IsaacGymEnvs and Isaac Lab."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:446
msgid "In Isaac Lab, the list of joint names can be retrieved with ``Articulation.data.joint_names``, which will also correspond to the ordering of the joints in the Articulation."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:451
msgid "Creating a New Environment"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:453
msgid "Each environment in Isaac Lab should be in its own directory following this structure:"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:464
msgid "``my_environment`` is the root directory of the task."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:465
msgid "``my_environment/agents`` is the directory containing all RL config files for the task. Isaac Lab supports multiple RL libraries that can each have its own individual config file."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:466
msgid "``my_environment/__init__.py`` is the main file that registers the environment with the Gymnasium interface. This allows the training and inferencing scripts to find the task by its name. The content of this file should be as follow:"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:489
msgid "``my_environment/my_env.py`` is the main python script that implements the task logic and task config class for the environment."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:493
msgid "Task Logic"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:495
msgid "In Isaac Lab, the ``post_physics_step`` function has been moved to the framework in the base class. Tasks are not required to implement this method, but can choose to override it if a different workflow is desired."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:498
msgid "By default, Isaac Lab follows the following flow in logic:"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:516
msgid "In Isaac Lab, we also separate the ``pre_physics_step`` API for processing actions from the policy with the ``apply_action`` API, which sets the actions into the simulation. This provides more flexibility in controlling when actions should be written to simulation when ``decimation`` is used. ``pre_physics_step`` will be called once per step before stepping simulation. ``apply_actions`` will be called ``decimation`` number of times for each RL step, once before each simulation step call."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:522
msgid "With this approach, resets are performed based on actions from the current step instead of the previous step. Observations will also be computed with the correct states after resets."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:525
msgid "We have also performed some renamings of APIs:"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:527
msgid "``create_sim(self)`` --> ``_setup_scene(self)``"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:528
msgid "``pre_physics_step(self, actions)`` --> ``_pre_physics_step(self, actions)`` and ``_apply_action(self)``"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:529
msgid "``reset_idx(self, env_ids)`` --> ``_reset_idx(self, env_ids)``"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:530
msgid "``compute_observations(self)`` --> ``_get_observations(self)`` - ``_get_observations()`` should now return a dictionary ``{\"policy\": obs}``"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:531
msgid "``compute_reward(self)`` --> ``_get_rewards(self)`` - ``_get_rewards()`` should now return the reward buffer"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:532
msgid "``post_physics_step(self)`` --> moved to the base class"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:533
msgid "In addition, Isaac Lab requires the implementation of ``_is_done(self)``, which should return two buffers: the ``reset`` buffer and the ``time_out`` buffer."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:537
msgid "Putting It All Together"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:539
msgid "The Cartpole environment is shown here in completion to fully show the comparison between the IsaacGymEnvs implementation and the Isaac Lab implementation."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:595
msgid "Task Setup"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:597
msgid "Isaac Lab no longer requires pre-initialization of buffers through the ``acquire_*`` APIs that were used in IsaacGymEnvs. It is also no longer necessary to ``wrap`` and ``unwrap`` tensors."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:636
msgid "Scene Setup"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:638
msgid "Scene setup is now done through the ``Cloner`` API and by specifying actor attributes in config objects. This eliminates the need to loop through the number of environments to set up the environments and avoids the need to set simulation parameters for actors in the task implementation."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:731
msgid "Pre and Post Physics Step"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:733
msgid "In IsaacGymEnvs, due to limitations of the GPU APIs, observations had stale data when environments had to perform resets. This restriction has been eliminated in Isaac Lab, and thus, tasks follow the correct workflow of applying actions, stepping simulation, collecting states, computing dones, calculating rewards, performing resets, and finally computing observations. This workflow is done automatically by the framework such that a ``post_physics_step`` API is not required in the task. However, individual tasks can override the ``step()`` API to control the workflow."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:740
msgid "IsaacLab"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:768
msgid "Dones and Resets"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:770
msgid "In Isaac Lab, ``dones`` are computed in the ``_get_dones()`` method and should return two variables: ``resets`` and ``time_out``. Tracking of the ``progress_buf`` has been moved to the base class and is now automatically incremented and reset by the framework. The ``progress_buf`` variable has also been renamed to ``episode_length_buf``."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:821
msgid "Observations"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:823
msgid "In Isaac Lab, the ``_get_observations()`` API should now return a dictionary containing the ``policy`` key with the observation buffer as the value. For asymmetric policies, the dictionary should also include a ``critic`` key that holds the state buffer."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:848
msgid "Rewards"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:850
msgid "In Isaac Lab, the reward method ``_get_rewards`` should return the reward buffer as a return value. Similar to IsaacGymEnvs, computations in the reward function can also be performed using pytorch jit by adding the ``@torch.jit.script`` annotation."
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:903
msgid "Launching Training"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:905
msgid "To launch a training in Isaac Lab, use the command:"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:912
msgid "Launching Inferencing"
msgstr ""

#: ../../source/migration/migrating_from_isaacgymenvs.rst:914
msgid "To launch inferencing in Isaac Lab, use the command:"
msgstr ""
