# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/refs/troubleshooting.rst:2
msgid "Tricks and Troubleshooting"
msgstr ""

#: ../../source/refs/troubleshooting.rst:6
msgid "The following lists some of the common tricks and troubleshooting methods that we use in our common workflows. Please also check the `troubleshooting page on Omniverse <https://docs.omniverse.nvidia.com/kit/docs/kit-manual/latest/guide/linux_troubleshooting.html>`__ for more assistance."
msgstr ""

#: ../../source/refs/troubleshooting.rst:13
msgid "Checking the internal logs from the simulator"
msgstr ""

#: ../../source/refs/troubleshooting.rst:15
msgid "When running the simulator from a standalone script, it logs warnings and errors to the terminal. At the same time, it also logs internal messages to a file. These are useful for debugging and understanding the internal state of the simulator. Depending on your system, the log file can be found in the locations listed `here <https://docs.omniverse.nvidia.com/isaacsim/latest/installation/install_faq.html#common-path-locations>`_."
msgstr ""

#: ../../source/refs/troubleshooting.rst:20
msgid "To obtain the exact location of the log file, you need to check the first few lines of the terminal output when you run the standalone script. The log file location is printed at the start of the terminal output. For example:"
msgstr ""

#: ../../source/refs/troubleshooting.rst:32
msgid "In the above example, the log file is located at ``.../logs/Kit/Isaac-Sim/2023.1/kit_20240328_183346.log``, ``...`` is the path to the user's log directory. The log file is named ``kit_20240328_183346.log``"
msgstr ""

#: ../../source/refs/troubleshooting.rst:35
msgid "You can open this file to check the internal logs from the simulator. Also when reporting issues, please include this log file to help us debug the issue."
msgstr ""

#: ../../source/refs/troubleshooting.rst:40
msgid "Using CPU Scaling Governor for performance"
msgstr ""

#: ../../source/refs/troubleshooting.rst:42
msgid "By default on many systems, the CPU frequency governor is set to “powersave” mode, which sets the CPU to lowest static frequency. To increase the maximum performance, we recommend setting the CPU frequency governor to “performance” mode. For more details, please check the the link `here <https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/power_management_guide/cpufreq_governors>`__."
msgstr ""

#: ../../source/refs/troubleshooting.rst:50
msgid "We advice not to set the governor to “performance” mode on a system with poor cooling (such as laptops), since it may cause the system to overheat."
msgstr ""

#: ../../source/refs/troubleshooting.rst:53
msgid "To view existing ``scaling_governor`` value per CPU:"
msgstr ""

#: ../../source/refs/troubleshooting.rst:59
msgid "To change the governor to “performance” mode for each CPU:"
msgstr ""

#: ../../source/refs/troubleshooting.rst:67
msgid "Observing long load times at the start of the simulation"
msgstr ""

#: ../../source/refs/troubleshooting.rst:69
msgid "The first time you run the simulator, it will take a long time to load up. This is because the simulator is compiling shaders and loading assets. Subsequent runs should be faster to start up, but may still take some time."
msgstr ""

#: ../../source/refs/troubleshooting.rst:73
msgid "Please note that once the Isaac Sim app loads, the environment creation time may scale linearly with the number of environments. Please expect a longer load time if running with thousands of environments or if each environment contains a larger number of assets. We are continually working on improving the time needed for this."
msgstr ""

#: ../../source/refs/troubleshooting.rst:78
msgid "When an instance of Isaac Sim is already running, launching another Isaac Sim instance in a different process may appear to hang at startup for the first time. Please be patient and give it some time as the second process will take longer to start up due to slower shader compilation."
msgstr ""

#: ../../source/refs/troubleshooting.rst:84
msgid "Receiving a “PhysX error” when running simulation on GPU"
msgstr ""

#: ../../source/refs/troubleshooting.rst:86
msgid "When using the GPU pipeline, the buffers used for the physics simulation are allocated on the GPU only once at the start of the simulation. This means that they do not grow dynamically as the number of collisions or objects in the scene changes. If the number of collisions or objects in the scene exceeds the size of the buffers, the simulation will fail with an error such as the following:"
msgstr ""

#: ../../source/refs/troubleshooting.rst:96
msgid "In this case, you need to increase the size of the buffers passed to the :class:`~omni.isaac.lab.sim.SimulationContext` class. The size of the buffers can be increased by setting the :attr:`~omni.isaac.lab.sim.PhysxCfg.gpu_found_lost_pairs_capacity` parameter in the :class:`~omni.isaac.lab.sim.PhysxCfg` class. For example, to increase the size of the buffers to 4096, you can use the following code:"
msgstr ""

#: ../../source/refs/troubleshooting.rst:110
msgid "Please see the documentation for :class:`~omni.isaac.lab.sim.SimulationCfg` for more details on the parameters that can be used to configure the simulation."
msgstr ""

#: ../../source/refs/troubleshooting.rst:115
msgid "Preventing memory leaks in the simulator"
msgstr ""

#: ../../source/refs/troubleshooting.rst:117
msgid "Memory leaks in the Isaac Sim simulator can occur when C++ callbacks are registered with Python objects. This happens when callback functions within classes maintain references to the Python objects they are associated with. As a result, Python's garbage collection is unable to reclaim memory associated with these objects, preventing the corresponding C++ objects from being destroyed. Over time, this can lead to memory leaks and increased resource usage."
msgstr ""

#: ../../source/refs/troubleshooting.rst:123
msgid "To prevent memory leaks in the Isaac Sim simulator, it is essential to use weak references when registering callbacks with the simulator. This ensures that Python objects can be garbage collected when they are no longer needed, thereby avoiding memory leaks. The `weakref <https://docs.python.org/3/library/weakref.html>`_ module from the Python standard library can be employed for this purpose."
msgstr ""

#: ../../source/refs/troubleshooting.rst:129
msgid "For example, consider a class with a callback function ``on_event_callback`` that needs to be registered with the simulator. If you use a strong reference to the ``MyClass`` object when passing the callback, the reference count of the ``MyClass`` object will be incremented. This prevents the ``MyClass`` object from being garbage collected when it is no longer needed, i.e., the ``__del__`` destructor will not be called."
msgstr ""

#: ../../source/refs/troubleshooting.rst:154
msgid "To fix this issue, it's crucial to employ weak references when registering the callback. While this approach adds some verbosity to the code, it ensures that the ``MyClass`` object can be garbage collected when no longer in use. Here's the modified code:"
msgstr ""

#: ../../source/refs/troubleshooting.rst:178
msgid "In this revised code, the weak reference ``weakref.proxy(self)`` is used when registering the callback, allowing the ``MyClass`` object to be properly garbage collected."
msgstr ""

#: ../../source/refs/troubleshooting.rst:181
msgid "By following this pattern, you can prevent memory leaks and maintain a more efficient and stable simulation."
msgstr ""

#: ../../source/refs/troubleshooting.rst:185
msgid "Understanding the error logs from crashes"
msgstr ""

#: ../../source/refs/troubleshooting.rst:187
msgid "Many times the simulator crashes due to a bug in the implementation. This swamps the terminal with exceptions, some of which are coming from the python interpreter calling ``__del__()`` destructor of the simulation application. These typically look like the following:"
msgstr ""

#: ../../source/refs/troubleshooting.rst:229
msgid "This is a known error with running standalone scripts with the Isaac Sim simulator. Please scroll above the exceptions thrown with ``registry`` to see the actual error log."
msgstr ""

#: ../../source/refs/troubleshooting.rst:233
msgid "In the above case, the actual error is:"
msgstr ""
