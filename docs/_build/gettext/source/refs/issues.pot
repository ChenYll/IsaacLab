# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/refs/issues.rst:2
msgid "Known Issues"
msgstr ""

#: ../../source/refs/issues.rst:6
msgid "Please also refer to the `Omniverse Isaac Sim documentation`_ for known issues and workarounds."
msgstr ""

#: ../../source/refs/issues.rst:9
msgid "Stale values after resetting the environment"
msgstr ""

#: ../../source/refs/issues.rst:11
msgid "When resetting the environment, some of the data fields of assets and sensors are not updated. These include the poses of links in a kinematic chain, the camera images, the contact sensor readings, and the lidar point clouds. This is a known issue which has to do with the way the PhysX and rendering engines work in Omniverse."
msgstr ""

#: ../../source/refs/issues.rst:16
msgid "Many physics engines do a simulation step as a two-level call: ``forward()`` and ``simulate()``, where the kinematic and dynamic states are updated, respectively. Unfortunately, PhysX has only a single ``step()`` call where the two operations are combined. Due to computations through GPU kernels, it is not so straightforward for them to split these operations. Thus, at the moment, it is not possible to set the root and/or joint states and do a forward call to update the kinematic states of links. This affects both initialization as well as episodic resets."
msgstr ""

#: ../../source/refs/issues.rst:23
msgid "Similarly for RTX rendering related sensors (such as cameras), the sensor data is not updated immediately after setting the state of the sensor. The rendering engine update is bundled with the simulator's ``step()`` call which only gets called when the simulation is stepped forward. This means that the sensor data is not updated immediately after a reset and it will hold outdated values."
msgstr ""

#: ../../source/refs/issues.rst:29
msgid "While the above is erroneous, there is currently no direct workaround for it. From our experience in using IsaacGym, the reset values affect the agent learning critically depending on how frequently the environment terminates. Eventually if the agent is learning successfully, this number drops and does not affect the performance that critically."
msgstr ""

#: ../../source/refs/issues.rst:34
msgid "We have made a feature request to the respective Omniverse teams to have complete control over stepping different parts of the simulation app. However, at this point, there is no set timeline for this feature request."
msgstr ""

#: ../../source/refs/issues.rst:40
msgid "Non-determinism in physics simulation"
msgstr ""

#: ../../source/refs/issues.rst:42
msgid "Due to GPU work scheduling, there's a possibility that runtime changes to simulation parameters may alter the order in which operations take place. This occurs because environment updates can happen while the GPU is occupied with other tasks. Due to the inherent nature of floating-point numeric storage, any modification to the execution ordering can result in minor changes in the least significant bits of output data. These changes may lead to divergent execution over the course of simulating thousands of environments and simulation frames."
msgstr ""

#: ../../source/refs/issues.rst:49
msgid "An illustrative example of this issue is observed with the runtime domain randomization of object's physics materials. This process can introduce both determinancy and simulation issues when executed on the GPU due to the way these parameters are passed from the CPU to the GPU in the lower-level APIs. Consequently, it is strongly advised to perform this operation only at setup time, before the environment stepping commences."
msgstr ""

#: ../../source/refs/issues.rst:55
msgid "For more information, please refer to the `PhysX Determinism documentation`_."
msgstr ""

#: ../../source/refs/issues.rst:57
msgid "In addition, due to floating point precision, states across different environments in the simulation may be non-deterministic when the same set of actions are applied to the same initial states. This occurs as environments are placed further apart from the world origin at (0, 0, 0). As actors get placed at different origins in the world, floating point errors may build up and result in slight variance in results even when starting from the same initial states. One possible workaround for this issue is to place all actors/environments at the world origin at (0, 0, 0) and filter out collisions between the environments. Note that this may induce a performance degradation of around 15-50%, depending on the complexity of actors and environment."
msgstr ""

#: ../../source/refs/issues.rst:69
msgid "Blank initial frames from the camera"
msgstr ""

#: ../../source/refs/issues.rst:71
msgid "When using the :class:`omni.isaac.lab.sensors.Camera` sensor in standalone scripts, the first few frames may be blank. This is a known issue with the simulator where it needs a few steps to load the material textures properly and fill up the render targets."
msgstr ""

#: ../../source/refs/issues.rst:75
msgid "A hack to work around this is to add the following after initializing the camera sensor and setting its pose:"
msgstr ""

#: ../../source/refs/issues.rst:90
msgid "Using instanceable assets for markers"
msgstr ""

#: ../../source/refs/issues.rst:92
msgid "When using `instanceable assets`_ for markers, the markers do not work properly, since Omniverse does not support instanceable assets when using the :class:`UsdGeom.PointInstancer` schema. This is a known issue and will hopefully be fixed in a future release."
msgstr ""

#: ../../source/refs/issues.rst:96
msgid "If you use an instanceable assets for markers, the marker class removes all the physics properties of the asset. This is then replicated across other references of the same asset since physics properties of instanceable assets are stored in the instanceable asset's USD file and not in its stage reference's USD file."
msgstr ""

#: ../../source/refs/issues.rst:106
msgid "Exiting the process"
msgstr ""

#: ../../source/refs/issues.rst:108
msgid "When exiting a process with ``Ctrl+C``, occasionally the below error may appear:"
msgstr ""

#: ../../source/refs/issues.rst:114
msgid "This is due to the termination occurring in the middle of a physics event call and should not affect the functionality of Isaac Lab. It is safe to ignore the error message and continue with terminating the process. On Windows systems, please use ``Ctrl+Break`` or ``Ctrl+fn+B`` to terminate the process."
msgstr ""
