# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/deployment/run_docker_example.rst:2
msgid "Running an example with Docker"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:4
msgid "From the root of the ``Isaac Lab`` repository,  the ``docker`` directory contains all the Docker relevant files. These include the three files (**Dockerfile**, **docker-compose.yaml**, **.env**) which are used by Docker, and an additional script that we use to interface with them, **container.sh**."
msgstr ""

#: ../../source/deployment/run_docker_example.rst:8
msgid "In this tutorial, we will learn how to use the Isaac Lab Docker container for development. For a detailed description of the Docker setup, including installation and obtaining access to an Isaac Sim image, please reference the :ref:`deployment-docker`. For a description of Docker in general, please refer to `their official documentation <https://docs.docker.com/get-started/overview/>`_."
msgstr ""

#: ../../source/deployment/run_docker_example.rst:14
msgid "Building the Container"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:16
msgid "To build the Isaac Lab container from the root of the Isaac Lab repository, we will run the following:"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:24
msgid "The terminal will first pull the base IsaacSim image, build the Isaac Lab image's additional layers on top of it, and run the Isaac Lab container. This should take several minutes upon the first build but will be shorter in subsequent runs as Docker's caching prevents repeated work. If we run the command ``docker container ls`` on the terminal, the output will list the containers that are running on the system. If everything has been set up correctly, a container with the ``NAME`` **isaaclab** should appear, similar to below:"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:36
msgid "Once the container is up and running, we can enter it from our terminal."
msgstr ""

#: ../../source/deployment/run_docker_example.rst:43
msgid "On entering the Isaac Lab container, we are in the terminal as the superuser, ``root``. This environment contains a copy of the Isaac Lab repository, but also has access to the directories and libraries of Isaac Sim. We can run experiments from this environment using a few convenient aliases that have been put into the ``root`` **.bashrc**. For instance, we have made the **isaaclab.sh** script usable from anywhere by typing its alias ``isaaclab``."
msgstr ""

#: ../../source/deployment/run_docker_example.rst:48
msgid "Additionally in the container, we have `bind mounted`_ the ``IsaacLab/source`` directory from the host machine. This means that if we modify files under this directory from an editor on the host machine, the changes are reflected immediately within the container without requiring us to rebuild the Docker image."
msgstr ""

#: ../../source/deployment/run_docker_example.rst:52
msgid "We will now run a sample script from within the container to demonstrate how to extract artifacts from the Isaac Lab Docker container."
msgstr ""

#: ../../source/deployment/run_docker_example.rst:56
msgid "The Code"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:58
msgid "The tutorial corresponds to the ``log_time.py`` script in the ``IsaacLab/source/standalone/tutorials/00_sim`` directory."
msgstr ""

#: ../../source/deployment/run_docker_example.rst:0
msgid "Code for log_time.py"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:70
msgid "The Code Explained"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:72
msgid "The Isaac Lab Docker container has several `volumes`_ to facilitate persistent storage between the host computer and the container. One such volume is the ``/workspace/isaaclab/logs`` directory. The ``log_time.py`` script designates this directory as the location to which a ``log.txt`` should be written:"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:82
msgid "As the comments note, :func:`os.path.abspath()` will prepend ``/workspace/isaaclab`` because in the Docker container all python execution is done through ``/workspace/isaaclab/isaaclab.sh``. The output will be a file, ``log.txt``, with the ``sim_time`` written on a newline at every simulation step:"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:93
msgid "Executing the Script"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:95
msgid "We will execute the script to produce a log, adding a ``--headless`` flag to our execution to prevent a GUI:"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:102
msgid "Now ``log.txt`` will have been produced at ``/workspace/isaaclab/logs/docker_tutorial``. If we exit the container by typing ``exit``, we will return to ``IsaacLab/docker`` in our host terminal environment. We can then enter the following command to retrieve our logs from the Docker container and put them on our host machine:"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:111
msgid "We will see a terminal readout reporting the artifacts we have retrieved from the container. If we navigate to ``/isaaclab/docker/artifacts/logs/docker_tutorial``, we will see a copy of the ``log.txt`` file which was produced by the script above."
msgstr ""

#: ../../source/deployment/run_docker_example.rst:115
msgid "Each of the directories under ``artifacts`` corresponds to Docker `volumes`_ mapped to directories within the container and the ``container.sh copy`` command copies them from those `volumes`_ to these directories."
msgstr ""

#: ../../source/deployment/run_docker_example.rst:118
msgid "We could return to the Isaac Lab Docker terminal environment by running ``container.sh enter`` again, but we have retrieved our logs and wish to go inspect them. We can stop the Isaac Lab Docker container with the following command:"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:126
msgid "This will bring down the Docker Isaac Lab container. The image will persist and remain available for further use, as will the contents of any `volumes`_. If we wish to free up the disk space taken by the image, (~20.1GB), and do not mind repeating the build process when we next run ``./container.sh start``, we may enter the following command to delete the **isaaclab** image:"
msgstr ""

#: ../../source/deployment/run_docker_example.rst:134
msgid "A subsequent run of ``docker image ls``` will show that the image tagged **isaaclab** is now gone. We can repeat the process for the underlying NVIDIA container if we wish to free up more space. If a more powerful method of freeing resources from Docker is desired, please consult the documentation for the `docker prune`_ commands."
msgstr ""
