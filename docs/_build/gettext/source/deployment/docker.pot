# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022-2024, The Isaac Lab Project Developers.
# This file is distributed under the same license as the Isaac Lab package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Isaac Lab 1.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-07-04 11:04+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/deployment/docker.rst:5
msgid "Docker Guide"
msgstr ""

#: ../../source/deployment/docker.rst:9
msgid "Due to the dependency on Isaac Sim docker image, by running this container you are implicitly agreeing to the `NVIDIA Omniverse EULA`_. If you do not agree to the EULA, do not run this container."
msgstr ""

#: ../../source/deployment/docker.rst:13
msgid "Setup Instructions"
msgstr ""

#: ../../source/deployment/docker.rst:17
msgid "The following steps are taken from the NVIDIA Omniverse Isaac Sim documentation on `container installation`_. They have been added here for the sake of completeness."
msgstr ""

#: ../../source/deployment/docker.rst:22
msgid "Docker and Docker Compose"
msgstr ""

#: ../../source/deployment/docker.rst:24
msgid "We have tested the container using Docker Engine version 26.0.0 and Docker Compose version 2.25.0 We recommend using these versions or newer."
msgstr ""

#: ../../source/deployment/docker.rst:27
msgid "To install Docker, please follow the instructions for your operating system on the `Docker website`_."
msgstr ""

#: ../../source/deployment/docker.rst:28
msgid "To install Docker Compose, please follow the instructions for your operating system on the `docker compose`_ page."
msgstr ""

#: ../../source/deployment/docker.rst:29
msgid "Follow the post-installation steps for Docker on the `post-installation steps`_ page. These steps allow you to run Docker without using ``sudo``."
msgstr ""

#: ../../source/deployment/docker.rst:31
msgid "To build and run GPU-accelerated containers, you also need install the `NVIDIA Container Toolkit`_. Please follow the instructions on the `Container Toolkit website`_ for installation steps."
msgstr ""

#: ../../source/deployment/docker.rst:36
msgid "Due to limitations with `snap <https://snapcraft.io/docs/home-outside-home>`_, please make sure the Isaac Lab directory is placed under the ``/home`` directory tree when using docker."
msgstr ""

#: ../../source/deployment/docker.rst:41
msgid "Obtaining the Isaac Sim Container"
msgstr ""

#: ../../source/deployment/docker.rst:43
msgid "Get access to the `Isaac Sim container`_ by joining the NVIDIA Developer Program credentials."
msgstr ""

#: ../../source/deployment/docker.rst:44
msgid "Generate your `NGC API key`_ to access locked container images from NVIDIA GPU Cloud (NGC)."
msgstr ""

#: ../../source/deployment/docker.rst:46
msgid "This step requires you to create an NGC account if you do not already have one."
msgstr ""

#: ../../source/deployment/docker.rst:47
msgid "You would also need to install the NGC CLI to perform operations from the command line."
msgstr ""

#: ../../source/deployment/docker.rst:48
msgid "Once you have your generated API key and have installed the NGC CLI, you need to log in to NGC from the terminal."
msgstr ""

#: ../../source/deployment/docker.rst:55
msgid "Use the command line to pull the Isaac Sim container image from NGC."
msgstr ""

#: ../../source/deployment/docker.rst:61
msgid "For the username, enter ``$oauthtoken`` exactly as shown. It is a special username that is used to authenticate with NGC."
msgstr ""

#: ../../source/deployment/docker.rst:71
msgid "Directory Organization"
msgstr ""

#: ../../source/deployment/docker.rst:73
msgid "The root of the Isaac Lab repository contains the ``docker`` directory that has various files and scripts needed to run Isaac Lab inside a Docker container. A subset of these are summarized below:"
msgstr ""

#: ../../source/deployment/docker.rst:76
msgid "``Dockerfile.base``: Defines the isaaclab image by overlaying Isaac Lab dependencies onto the Isaac Sim Docker image. ``Dockerfiles`` which end with something else, (i.e. ``Dockerfile.ros2``) build an `image_extension <#isaac-lab-image-extensions>`_."
msgstr ""

#: ../../source/deployment/docker.rst:78
msgid "``docker-compose.yaml``: Creates mounts to allow direct editing of Isaac Lab code from the host machine that runs the container. It also creates several named volumes such as ``isaac-cache-kit`` to store frequently re-used resources compiled by Isaac Sim, such as shaders, and to retain logs, data, and documents."
msgstr ""

#: ../../source/deployment/docker.rst:81
msgid "``base.env``: Stores environment variables required for the ``base`` build process and the container itself. ``.env`` files which end with something else (i.e. ``.env.ros2``) define these for `image_extension <#isaac-lab-image-extensions>`_."
msgstr ""

#: ../../source/deployment/docker.rst:83
msgid "``container.sh``: A script that wraps the ``docker compose`` command to build the image and run the container."
msgstr ""

#: ../../source/deployment/docker.rst:86
msgid "Running the Container"
msgstr ""

#: ../../source/deployment/docker.rst:90
msgid "The docker container copies all the files from the repository into the container at the location ``/workspace/isaaclab`` at build time. This means that any changes made to the files in the container would not normally be reflected in the repository after the image has been built, i.e. after ``./container.sh start`` is run."
msgstr ""

#: ../../source/deployment/docker.rst:94
msgid "For a faster development cycle, we mount the following directories in the Isaac Lab repository into the container so that you can edit their files from the host machine:"
msgstr ""

#: ../../source/deployment/docker.rst:97
msgid "``source``: This is the directory that contains the Isaac Lab source code."
msgstr ""

#: ../../source/deployment/docker.rst:98
msgid "``docs``: This is the directory that contains the source code for Isaac Lab documentation. This is overlaid except for the ``_build`` subdirectory where build artifacts are stored."
msgstr ""

#: ../../source/deployment/docker.rst:102
msgid "The script ``container.sh`` wraps around three basic ``docker compose`` commands. Each can accept an `image_extension argument <#isaac-lab-image-extensions>`_, or else they will default to image_extension ``base``:"
msgstr ""

#: ../../source/deployment/docker.rst:105
msgid "``start``: This builds the image and brings up the container in detached mode (i.e. in the background)."
msgstr ""

#: ../../source/deployment/docker.rst:106
msgid "``enter``: This begins a new bash process in an existing isaaclab container, and which can be exited without bringing down the container."
msgstr ""

#: ../../source/deployment/docker.rst:108
msgid "``copy``: This copies the ``logs``, ``data_storage`` and ``docs/_build`` artifacts, from the ``isaac-lab-logs``, ``isaac-lab-data`` and ``isaac-lab-docs`` volumes respectively, to the ``docker/artifacts`` directory. These artifacts persist between docker container instances and are shared between image extensions."
msgstr ""

#: ../../source/deployment/docker.rst:111
msgid "``stop``: This brings down the container and removes it."
msgstr ""

#: ../../source/deployment/docker.rst:113
msgid "The following shows how to launch the container in a detached state and enter it:"
msgstr ""

#: ../../source/deployment/docker.rst:124
msgid "To copy files from the base container to the host machine, you can use the following command:"
msgstr ""

#: ../../source/deployment/docker.rst:131
msgid "The script ``container.sh`` provides a wrapper around this command to copy the ``logs`` , ``data_storage`` and ``docs/_build`` directories to the ``docker/artifacts`` directory. This is useful for copying the logs, data and documentation:"
msgstr ""

#: ../../source/deployment/docker.rst:141
msgid "Python Interpreter"
msgstr ""

#: ../../source/deployment/docker.rst:143
msgid "The container uses the Python interpreter provided by Isaac Sim. This interpreter is located at ``/isaac-sim/python.sh``. We set aliases inside the container to make it easier to run the Python interpreter. You can use the following commands to run the Python interpreter:"
msgstr ""

#: ../../source/deployment/docker.rst:154
msgid "Understanding the mounted volumes"
msgstr ""

#: ../../source/deployment/docker.rst:156
msgid "The ``docker-compose.yaml`` file creates several named volumes that are mounted to the container. These are summarized below:"
msgstr ""

#: ../../source/deployment/docker.rst:159
msgid "``isaac-cache-kit``: This volume is used to store cached Kit resources (`/isaac-sim/kit/cache` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:160
msgid "``isaac-cache-ov``: This volume is used to store cached OV resources (`/root/.cache/ov` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:161
msgid "``isaac-cache-pip``: This volume is used to store cached pip resources (`/root/.cache/pip`` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:162
msgid "``isaac-cache-gl``: This volume is used to store cached GLCache resources (`/root/.cache/nvidia/GLCache` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:163
msgid "``isaac-cache-compute``: This volume is used to store cached compute resources (`/root/.nv/ComputeCache` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:164
msgid "``isaac-logs``: This volume is used to store logs generated by Omniverse. (`/root/.nvidia-omniverse/logs` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:165
msgid "``isaac-carb-logs``: This volume is used to store logs generated by carb. (`/isaac-sim/kit/logs/Kit/Isaac-Sim` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:166
msgid "``isaac-data``: This volume is used to store data generated by Omniverse. (`/root/.local/share/ov/data` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:167
msgid "``isaac-docs``: This volume is used to store documents generated by Omniverse. (`/root/Documents` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:168
msgid "``isaac-lab-docs``: This volume is used to store documentation of Isaac Lab when built inside the container. (`/workspace/isaaclab/docs/_build` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:169
msgid "``isaac-lab-logs``: This volume is used to store logs generated by Isaac Lab workflows when run inside the container. (`/workspace/isaaclab/logs` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:170
msgid "``isaac-lab-data``: This volume is used to store whatever data users may want to preserve between container runs. (`/workspace/isaaclab/data_storage` in container)"
msgstr ""

#: ../../source/deployment/docker.rst:172
msgid "To view the contents of these volumes, you can use the following command:"
msgstr ""

#: ../../source/deployment/docker.rst:184
msgid "Isaac Lab Image Extensions"
msgstr ""

#: ../../source/deployment/docker.rst:186
msgid "The produced image depends upon the arguments passed to ``./container.sh start`` and ``./container.sh stop``. These commands accept an ``image_extension`` as an additional argument. If no argument is passed, then these commands default to ``base``. Currently, the only valid ``image_extension`` arguments are (``base``, ``ros2``). Only one ``image_extension`` can be passed at a time, and the produced container will be named ``isaaclab``."
msgstr ""

#: ../../source/deployment/docker.rst:202
msgid "The passed ``image_extension`` argument will build the image defined in ``Dockerfile.${image_extension}``, with the corresponding `profile`_ in the ``docker-compose.yaml`` and the envars from ``.env.${image_extension}`` in addition to the ``.env.base``, if any."
msgstr ""

#: ../../source/deployment/docker.rst:207
msgid "ROS2 Image Extension"
msgstr ""

#: ../../source/deployment/docker.rst:209
msgid "In ``Dockerfile.ros2``, the container installs ROS2 Humble via an `apt package`_, and it is sourced in the ``.bashrc``. The exact version is specified by the variable ``ROS_APT_PACKAGE`` in the ``.env.ros2`` file, defaulting to ``ros-base``. Other relevant ROS2 variables are also specified in the ``.env.ros2`` file, including variables defining the `various middleware`_ options. The container defaults to ``FastRTPS``, but ``CylconeDDS`` is also supported. Each of these middlewares can be `tuned`_ using their corresponding ``.xml`` files under ``docker/.ros``."
msgstr ""

#: ../../source/deployment/docker.rst:217
msgid "Known Issues"
msgstr ""

#: ../../source/deployment/docker.rst:220
msgid "Invalid mount config for type \"bind\""
msgstr ""

#: ../../source/deployment/docker.rst:222
msgid "If you see the following error when building the container:"
msgstr ""

#: ../../source/deployment/docker.rst:229
msgid "This means that the ``.Xauthority`` file is not present in the home directory of the host machine. The portion of the docker-compose.yaml that enables this is commented out by default, so this shouldn't happen unless it has been altered. This file is required for X11 forwarding to work. To fix this, you can create an empty ``.Xauthority`` file in your home directory."
msgstr ""

#: ../../source/deployment/docker.rst:238
msgid "A similar error but requires a different fix:"
msgstr ""

#: ../../source/deployment/docker.rst:245
msgid "This means that the folder/files are either not present or not accessible on the host machine. The portion of the docker-compose.yaml that enables this is commented out by default, so this shouldn't happen unless it has been altered. This usually happens when you have multiple docker versions installed on your machine. To fix this, you can try the following:"
msgstr ""

#: ../../source/deployment/docker.rst:250
msgid "Remove all docker versions from your machine."
msgstr ""

#: ../../source/deployment/docker.rst:259
msgid "Install the latest version of docker based on the instructions in the setup section."
msgstr ""

#: ../../source/deployment/docker.rst:262
msgid "WebRTC Streaming"
msgstr ""

#: ../../source/deployment/docker.rst:264
msgid "When streaming the GUI from Isaac Sim, there are `several streaming clients`_ available. There is a `known issue`_ when attempting to use WebRTC streaming client on Google Chrome and Safari while running Isaac Sim inside a container. To avoid this problem, we suggest using the Native Streaming Client or using the Mozilla Firefox browser on which WebRTC works."
msgstr ""

#: ../../source/deployment/docker.rst:269
msgid "Streaming is the only supported method for visualizing the Isaac GUI from within the container. The Omniverse Streaming Client is freely available from the Omniverse app, and is easy to use. The other streaming methods similarly require only a web browser. If users want to use X11 forwarding in order to have the apps behave as local GUI windows, they can uncomment the relevant portions in docker-compose.yaml."
msgstr ""
